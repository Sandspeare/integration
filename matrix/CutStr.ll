; ModuleID = 'CutStr.ll'
source_filename = "CutStr.ll"
target datalayout = "e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32-a:0:32-S32"
target triple = "i686-pc-windows-msvc16.0.0"

%struct.node_hay = type { i32, i32 }
%struct.node_snow = type { i32, i32, i32 }

$"\01??_C@_05NAIFAAEC@asdsd?$AA@" = comdat any

@"\01?dicnum@@3HA" = global i32 0, align 4
@"\01?lena@@3HA" = global i32 0, align 4
@"\01?diclen@@3PAHA" = global [510 x i32] zeroinitializer, align 4
@"\01?f@@3PAHA" = global [310 x i32] zeroinitializer, align 4
@"\01?dic@@3PAY0BDG@DA" = global [510 x [310 x i8]] zeroinitializer, align 1
@"\01?a@@3PADA" = global [310 x i8] zeroinitializer, align 1
@"\01?k@@3PAY0BDG@HA" = global [310 x [310 x i32]] zeroinitializer, align 4
@"\01?e1@?1??nim_game@@YAHH@Z@3PAHA" = private unnamed_addr constant [509 x i32] [i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0], align 4
@"\01?e1@?1??Haywire@@YAHH@Z@3PAY02HA" = private unnamed_addr constant [12 x [3 x i32]] [[3 x i32] [i32 4, i32 1, i32 9], [3 x i32] [i32 2, i32 3, i32 5], [3 x i32] [i32 8, i32 1, i32 10], [3 x i32] [i32 2, i32 5, i32 9], [3 x i32] [i32 7, i32 8, i32 11], [3 x i32] [i32 8, i32 7, i32 2], [3 x i32] [i32 3, i32 4, i32 6], [3 x i32] [i32 1, i32 7, i32 9], [3 x i32] [i32 10, i32 2, i32 5], [3 x i32] [i32 3, i32 6, i32 1], [3 x i32] [i32 2, i32 7, i32 3], [3 x i32] [i32 7, i32 2, i32 9]], align 4
@"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A" = internal global [15 x %struct.node_hay] zeroinitializer, align 4
@"\01?e1@?1??HYZ_card@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 5, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 5], align 4
@"\01?sb1_3@?1??HYZ_card@@YAHH@Z@3PAHA" = private unnamed_addr constant [1278 x i32] [i32 460, i32 5666, i32 7035, i32 2664, i32 4978, i32 3160, i32 8890, i32 3435, i32 1446, i32 5380, i32 663, i32 4894, i32 9840, i32 3462, i32 678, i32 6531, i32 5817, i32 1163, i32 5397, i32 1963, i32 7311, i32 9303, i32 2670, i32 9169, i32 402, i32 981, i32 1094, i32 1867, i32 7302, i32 3275, i32 1187, i32 479, i32 8177, i32 8005, i32 3511, i32 8545, i32 2726, i32 2703, i32 1481, i32 7948, i32 6780, i32 8021, i32 4951, i32 1012, i32 2519, i32 313, i32 3556, i32 7965, i32 4240, i32 1043, i32 743, i32 1264, i32 3051, i32 821, i32 4136, i32 3863, i32 2675, i32 1563, i32 245, i32 5775, i32 8027, i32 1728, i32 8506, i32 5649, i32 3185, i32 8584, i32 6966, i32 4995, i32 6962, i32 3421, i32 2824, i32 4217, i32 4652, i32 9952, i32 7541, i32 7489, i32 1991, i32 1091, i32 2753, i32 209, i32 9850, i32 6553, i32 5058, i32 2963, i32 9799, i32 4691, i32 991, i32 1124, i32 6920, i32 6134, i32 8649, i32 5707, i32 9745, i32 586, i32 2240, i32 5930, i32 5186, i32 3950, i32 4076, i32 318, i32 3319, i32 5441, i32 3365, i32 5986, i32 2864, i32 2406, i32 1983, i32 3631, i32 7529, i32 1056, i32 7174, i32 7539, i32 8356, i32 842, i32 7709, i32 4528, i32 8680, i32 4500, i32 9004, i32 8381, i32 488, i32 4443, i32 453, i32 2348, i32 5147, i32 9274, i32 3266, i32 1537, i32 2725, i32 9601, i32 7976, i32 1689, i32 1767, i32 8348, i32 2964, i32 2933, i32 2711, i32 6399, i32 7920, i32 770, i32 979, i32 1331, i32 89, i32 8094, i32 4872, i32 6543, i32 3971, i32 4641, i32 2067, i32 6286, i32 495, i32 2644, i32 9477, i32 4777, i32 943, i32 8424, i32 6205, i32 7065, i32 891, i32 2325, i32 2691, i32 5784, i32 2280, i32 2016, i32 8698, i32 6037, i32 9338, i32 4105, i32 5164, i32 1113, i32 6041, i32 1578, i32 4253, i32 2611, i32 1701, i32 1105, i32 1118, i32 7799, i32 7278, i32 9740, i32 9153, i32 6927, i32 4996, i32 4252, i32 2766, i32 6253, i32 3279, i32 7834, i32 5931, i32 6334, i32 4811, i32 9987, i32 8017, i32 3637, i32 1420, i32 725, i32 8937, i32 4543, i32 1695, i32 4332, i32 9655, i32 8439, i32 6509, i32 1916, i32 5130, i32 2454, i32 8343, i32 6357, i32 2460, i32 9326, i32 763, i32 1250, i32 2247, i32 5879, i32 3145, i32 519, i32 2442, i32 5450, i32 236, i32 3705, i32 7259, i32 1213, i32 7694, i32 450, i32 4336, i32 8209, i32 6652, i32 4906, i32 4131, i32 623, i32 4116, i32 8002, i32 8829, i32 1817, i32 8628, i32 3216, i32 5402, i32 4630, i32 154, i32 9392, i32 4176, i32 9870, i32 5297, i32 3550, i32 8295, i32 8048, i32 8945, i32 8819, i32 827, i32 1634, i32 3284, i32 161, i32 5207, i32 3914, i32 3985, i32 2831, i32 1694, i32 3056, i32 6044, i32 3334, i32 4297, i32 6600, i32 3134, i32 3195, i32 2154, i32 2802, i32 480, i32 3465, i32 38, i32 6237, i32 4751, i32 4023, i32 4579, i32 4854, i32 3110, i32 6395, i32 6026, i32 6984, i32 915, i32 3217, i32 8544, i32 3497, i32 3329, i32 1748, i32 3588, i32 7212, i32 7779, i32 3578, i32 9676, i32 2445, i32 8127, i32 4134, i32 4122, i32 5770, i32 6867, i32 9736, i32 3583, i32 800, i32 3475, i32 6435, i32 9619, i32 3353, i32 4221, i32 3151, i32 4487, i32 8124, i32 2260, i32 7573, i32 2108, i32 9317, i32 1545, i32 5180, i32 1252, i32 3077, i32 6965, i32 5166, i32 3101, i32 5321, i32 7261, i32 7878, i32 5519, i32 2564, i32 8674, i32 3446, i32 6819, i32 5730, i32 7532, i32 2567, i32 894, i32 3490, i32 2295, i32 549, i32 44, i32 4168, i32 5344, i32 9109, i32 3733, i32 807, i32 5794, i32 9165, i32 5553, i32 4780, i32 7575, i32 3538, i32 6189, i32 2954, i32 8321, i32 4813, i32 6882, i32 3628, i32 1776, i32 80, i32 7384, i32 2549, i32 9107, i32 266, i32 8482, i32 1662, i32 8079, i32 3058, i32 4774, i32 7144, i32 3995, i32 3196, i32 5989, i32 4793, i32 5856, i32 2249, i32 2052, i32 9941, i32 69, i32 5749, i32 8670, i32 3732, i32 434, i32 746, i32 3568, i32 775, i32 7551, i32 6386, i32 5592, i32 4586, i32 8653, i32 7028, i32 855, i32 5557, i32 4361, i32 9511, i32 3599, i32 8834, i32 5273, i32 4980, i32 2951, i32 9110, i32 9918, i32 1275, i32 7519, i32 9407, i32 6050, i32 1385, i32 6921, i32 5924, i32 8646, i32 4598, i32 2684, i32 7358, i32 2880, i32 8632, i32 3031, i32 4973, i32 1854, i32 276, i32 1639, i32 1844, i32 5333, i32 3076, i32 1729, i32 6256, i32 3251, i32 4731, i32 4883, i32 4643, i32 421, i32 4655, i32 6020, i32 9709, i32 2965, i32 2285, i32 2050, i32 3905, i32 9357, i32 5264, i32 1212, i32 5239, i32 290, i32 7774, i32 4189, i32 7304, i32 5379, i32 5410, i32 8626, i32 3972, i32 7584, i32 9888, i32 5698, i32 9691, i32 6217, i32 5777, i32 5542, i32 3941, i32 4898, i32 4340, i32 6904, i32 3955, i32 8324, i32 9486, i32 3348, i32 7654, i32 3187, i32 1682, i32 7217, i32 5385, i32 9423, i32 5548, i32 168, i32 6471, i32 8855, i32 1138, i32 9488, i32 9271, i32 6627, i32 7583, i32 5394, i32 1918, i32 1267, i32 4944, i32 6587, i32 3674, i32 3990, i32 4794, i32 9508, i32 4093, i32 227, i32 971, i32 2679, i32 8150, i32 2632, i32 710, i32 8990, i32 86, i32 6500, i32 5146, i32 7981, i32 2501, i32 1072, i32 4720, i32 2309, i32 5809, i32 3613, i32 7831, i32 8374, i32 5672, i32 5533, i32 1240, i32 8508, i32 8679, i32 9475, i32 7038, i32 7434, i32 9449, i32 9562, i32 4005, i32 1934, i32 7725, i32 7440, i32 5891, i32 9163, i32 213, i32 8352, i32 2096, i32 1964, i32 7590, i32 9168, i32 7523, i32 2974, i32 7293, i32 836, i32 1295, i32 7943, i32 5708, i32 8112, i32 1048, i32 4411, i32 2966, i32 1758, i32 4270, i32 7345, i32 9015, i32 9347, i32 2645, i32 2458, i32 2042, i32 2539, i32 1391, i32 2996, i32 9273, i32 3802, i32 3997, i32 1661, i32 7974, i32 9179, i32 2956, i32 4593, i32 4919, i32 6437, i32 3010, i32 7954, i32 3419, i32 2669, i32 5405, i32 2094, i32 6554, i32 1530, i32 6171, i32 498, i32 7821, i32 6248, i32 28, i32 2479, i32 2497, i32 484, i32 416, i32 3569, i32 6, i32 427, i32 5943, i32 4575, i32 3172, i32 1834, i32 5604, i32 3194, i32 6849, i32 7156, i32 2157, i32 2817, i32 4820, i32 7566, i32 7697, i32 7866, i32 8322, i32 9741, i32 6336, i32 4371, i32 7109, i32 5635, i32 7249, i32 1586, i32 4231, i32 1215, i32 2477, i32 5920, i32 913, i32 7544, i32 9422, i32 196, i32 2288, i32 270, i32 6653, i32 4979, i32 957, i32 2780, i32 2251, i32 4300, i32 596, i32 2638, i32 8981, i32 1280, i32 5670, i32 1856, i32 6846, i32 7166, i32 4268, i32 3838, i32 2740, i32 7904, i32 126, i32 9118, i32 7175, i32 509, i32 2967, i32 8716, i32 3989, i32 1456, i32 3565, i32 534, i32 5551, i32 1920, i32 8997, i32 8301, i32 769, i32 1447, i32 5663, i32 9030, i32 4127, i32 3594, i32 5283, i32 6322, i32 6838, i32 8795, i32 1935, i32 6112, i32 8883, i32 6419, i32 1325, i32 365, i32 951, i32 9780, i32 925, i32 6433, i32 8093, i32 3477, i32 1219, i32 4513, i32 1488, i32 8438, i32 9356, i32 9286, i32 4993, i32 3180, i32 6212, i32 6397, i32 7934, i32 7548, i32 3144, i32 1626, i32 2060, i32 7870, i32 8789, i32 4364, i32 9768, i32 8591, i32 9539, i32 7060, i32 2114, i32 1650, i32 9772, i32 2939, i32 2848, i32 330, i32 1177, i32 9398, i32 6332, i32 2829, i32 9304, i32 3043, i32 9284, i32 5904, i32 9634, i32 3762, i32 9940, i32 1079, i32 6957, i32 6955, i32 6090, i32 7448, i32 9991, i32 9174, i32 389, i32 2953, i32 9844, i32 2969, i32 6270, i32 5307, i32 2535, i32 3922, i32 1229, i32 115, i32 9668, i32 7139, i32 5219, i32 4153, i32 4912, i32 6624, i32 9293, i32 218, i32 7047, i32 5062, i32 5223, i32 4157, i32 1522, i32 933, i32 8658, i32 9638, i32 6173, i32 5220, i32 8693, i32 9183, i32 2682, i32 8434, i32 7620, i32 3595, i32 5837, i32 4372, i32 583, i32 5732, i32 7802, i32 6135, i32 2649, i32 1186, i32 2333, i32 4825, i32 4738, i32 9040, i32 6013, i32 903, i32 6261, i32 5035, i32 13, i32 1862, i32 8810, i32 2787, i32 960, i32 8078, i32 3440, i32 6015, i32 2032, i32 5210, i32 2109, i32 4262, i32 9029, i32 632, i32 4956, i32 6900, i32 835, i32 5688, i32 1344, i32 9221, i32 9582, i32 4001, i32 8083, i32 2798, i32 6574, i32 9231, i32 9633, i32 2783, i32 8878, i32 2171, i32 6689, i32 7585, i32 4298, i32 8728, i32 5657, i32 9656, i32 884, i32 9243, i32 4255, i32 5162, i32 4961, i32 1612, i32 653, i32 3108, i32 4865, i32 8742, i32 5913, i32 2640, i32 5751, i32 7339, i32 3314, i32 1604, i32 2968, i32 8077, i32 9027, i32 8291, i32 673, i32 9793, i32 6394, i32 2334, i32 7403, i32 9468, i32 6109, i32 9374, i32 3998, i32 8648, i32 7050, i32 5771, i32 5355, i32 8779, i32 8882, i32 7591, i32 7063, i32 8459, i32 6752, i32 3680, i32 4537, i32 8230, i32 9047, i32 5176, i32 630, i32 1089, i32 6580, i32 1284, i32 6498, i32 21, i32 3425, i32 4264, i32 7246, i32 2509, i32 5025, i32 2666, i32 7820, i32 3834, i32 2398, i32 7701, i32 8300, i32 8756, i32 5650, i32 1201, i32 1902, i32 6688, i32 1675, i32 8203, i32 2207, i32 9978, i32 6885, i32 907, i32 4028, i32 6243, i32 1629, i32 8832, i32 5240, i32 7332, i32 8850, i32 7364, i32 6166, i32 5516, i32 4470, i32 2551, i32 5029, i32 4855, i32 6075, i32 5343, i32 2357, i32 938, i32 5201, i32 6910, i32 7258, i32 985, i32 7512, i32 5568, i32 9867, i32 2503, i32 6280, i32 7643, i32 6886, i32 3142, i32 8168, i32 590, i32 5465, i32 8820, i32 714, i32 9929, i32 6809, i32 6595, i32 8437, i32 2502, i32 3651, i32 2794, i32 3942, i32 4705, i32 7809, i32 4968, i32 6465, i32 7237, i32 9237, i32 600, i32 3336, i32 5249, i32 1198, i32 2626, i32 111, i32 1076, i32 4921, i32 1792, i32 9712, i32 9433, i32 5429, i32 940, i32 890, i32 6816, i32 3869, i32 1668, i32 801, i32 5825, i32 7841, i32 2338, i32 659, i32 9810, i32 8616, i32 8873, i32 1895, i32 1840, i32 3662, i32 6186, i32 6648, i32 7735, i32 9450, i32 4827, i32 1803, i32 5476, i32 4185, i32 8827, i32 5674, i32 1030, i32 4477, i32 4686, i32 3339, i32 4211, i32 7817, i32 4522, i32 8807, i32 4428, i32 8722, i32 5291, i32 8033, i32 4718, i32 1514, i32 566, i32 18, i32 7708, i32 7048, i32 5585, i32 2811, i32 7752, i32 5232, i32 6511, i32 8657, i32 4078, i32 1348, i32 4616, i32 1841, i32 8515, i32 6947, i32 3390, i32 869, i32 1955, i32 1592, i32 7389, i32 5576, i32 7873, i32 2635, i32 9715, i32 6796, i32 96, i32 987, i32 112, i32 4237, i32 9127, i32 2605, i32 3817, i32 6324, i32 5919, i32 4795, i32 2874, i32 3750, i32 6775, i32 5968, i32 9428, i32 6005, i32 5225, i32 1663, i32 3277, i32 2162, i32 5308, i32 2986, i32 4413, i32 9298, i32 4107, i32 6295, i32 1418, i32 7745, i32 7947, i32 4275, i32 364, i32 2304, i32 7500, i32 5189, i32 866, i32 3499, i32 3575, i32 9847, i32 7609, i32 9176, i32 6783, i32 5718, i32 9455, i32 7637, i32 3120, i32 2059, i32 3910, i32 457, i32 2455, i32 5866, i32 5152, i32 3696, i32 6287, i32 7598, i32 8739, i32 9922, i32 1242, i32 2385, i32 4307, i32 8723, i32 2082, i32 1247, i32 9485, i32 4874, i32 8690, i32 6527, i32 5814, i32 8137, i32 4609, i32 6080, i32 8029, i32 1948, i32 2097, i32 3470, i32 7919, i32 7895, i32 8905, i32 602, i32 3743, i32 7090, i32 8603, i32 9367, i32 4625, i32 8157, i32 4564, i32 5908, i32 1913, i32 5139, i32 9021, i32 2180, i32 3904, i32 9731, i32 7537, i32 1023, i32 4868, i32 8861, i32 610, i32 2922, i32 4840, i32 2661, i32 4683, i32 7188, i32 3189, i32 3619, i32 8668, i32 5230, i32 532, i32 3469, i32 8413, i32 3302, i32 5668, i32 231, i32 4787, i32 1098, i32 9079, i32 570, i32 5144, i32 8016, i32 4115, i32 1560, i32 3742, i32 7996, i32 9507, i32 3288, i32 6853, i32 9188, i32 9498, i32 4784, i32 819, i32 2591, i32 8260, i32 9240, i32 9099, i32 5545, i32 8290, i32 4101, i32 9988, i32 7942, i32 7223, i32 7378, i32 7123, i32 6079, i32 538, i32 7149, i32 3496, i32 9222, i32 4467, i32 9550, i32 9932, i32 3233, i32 9721, i32 6548, i32 1960, i32 7622, i32 8161, i32 4081, i32 1155, i32 3039, i32 4472, i32 4776, i32 458, i32 4893, i32 9062, i32 6470, i32 8369, i32 8665, i32 9528, i32 6694, i32 9865, i32 6021, i32 1865, i32 2090, i32 5174, i32 7439, i32 9729, i32 2063, i32 6518, i32 2270, i32 4029, i32 8969, i32 4111, i32 351, i32 6000, i32 7704, i32 7306, i32 631, i32 9377, i32 9105, i32 2352, i32 8498, i32 1283, i32 8650, i32 2622, i32 8619, i32 2812, i32 150, i32 5433, i32 6149, i32 514, i32 8659, i32 2201, i32 6977, i32 6605, i32 9216, i32 3848, i32 8477, i32 6667, i32 7501, i32 3754, i32 5074, i32 7209, i32 5161, i32 6618, i32 6833, i32 1405, i32 2946, i32 8684, i32 5261, i32 5601, i32 3769, i32 2203, i32 1181, i32 4393, i32 718, i32 4773, i32 5366, i32 9513, i32 187, i32 5923, i32 1846, i32 5612, i32 9311, i32 4256, i32 3622, i32 4589, i32 9181, i32 1730, i32 825, i32 2857, i32 684, i32 491, i32 6489, i32 6391, i32 7755, i32 6761, i32 4497, i32 2081, i32 1119, i32 5731, i32 1301, i32 2816, i32 4552, i32 6664, i32 7027, i32 6695, i32 1226, i32 5222, i32 2380, i32 4608, i32 2686, i32 9258, i32 683, i32 2401, i32 7283, i32 4939, i32 5819, i32 3611, i32 571, i32 4509, i32 731, i32 2524, i32 871, i32 2865, i32 6850, i32 7738, i32 1635, i32 8004, i32 1800, i32 7776, i32 9989, i32 852, i32 3466, i32 4830, i32 7765, i32 573, i32 3256], align 4
@"\01?ez@?1??cal_zhou@@YAHH@Z@3PAY02DA" = private unnamed_addr constant [29 x [3 x i8]] [[3 x i8] c".X\00", [3 x i8] c"..\00", [3 x i8] c"..\00", [3 x i8] c"..\00", [3 x i8] c"X.\00", [3 x i8] c"X.\00", [3 x i8] c"X.\00", [3 x i8] c".X\00", [3 x i8] c".X\00", [3 x i8] c".X\00", [3 x i8] c"X.\00", [3 x i8] c"X.\00", [3 x i8] c".X\00", [3 x i8] c".X\00", [3 x i8] c"X.\00", [3 x i8] c"..\00", [3 x i8] c"X.\00", [3 x i8] c"XX\00", [3 x i8] c".X\00", [3 x i8] c"X.\00", [3 x i8] c"XX\00", [3 x i8] c"..\00", [3 x i8] c".X\00", [3 x i8] c"X.\00", [3 x i8] c"X.\00", [3 x i8] c"..\00", [3 x i8] c".X\00", [3 x i8] c"..\00", [3 x i8] c"..\00"], align 1
@"\01?ti@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA" = internal global i32 0, align 4
@"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA" = internal global [10010 x i32] zeroinitializer, align 4
@"\01?dfn@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA" = internal global [10010 x i32] zeroinitializer, align 4
@"\01?top@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA" = internal global i32 0, align 4
@"\01?stack@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA" = internal global [10010 x i32] zeroinitializer, align 4
@"\01?e1@?1??welcome_cow@@YAHH@Z@3PAHA" = private unnamed_addr constant [509 x i32] [i32 57, i32 92, i32 56, i32 15, i32 16, i32 31, i32 92, i32 20, i32 52, i32 72, i32 63, i32 66, i32 29, i32 10, i32 41, i32 14, i32 13, i32 71, i32 20, i32 56, i32 31, i32 42, i32 17, i32 5, i32 9, i32 71, i32 10, i32 39, i32 71, i32 36, i32 32, i32 16, i32 61, i32 66, i32 41, i32 10, i32 97, i32 89, i32 65, i32 33, i32 90, i32 88, i32 59, i32 52, i32 77, i32 48, i32 61, i32 8, i32 23, i32 59, i32 32, i32 46, i32 100, i32 78, i32 88, i32 19, i32 75, i32 58, i32 24, i32 93, i32 34, i32 17, i32 4, i32 54, i32 95, i32 27, i32 5, i32 7, i32 46, i32 80, i32 39, i32 71, i32 1, i32 32, i32 23, i32 60, i32 42, i32 61, i32 42, i32 72, i32 39, i32 1, i32 63, i32 41, i32 23, i32 37, i32 14, i32 81, i32 75, i32 43, i32 55, i32 5, i32 11, i32 54, i32 83, i32 35, i32 26, i32 89, i32 59, i32 56, i32 60, i32 1, i32 63, i32 27, i32 91, i32 59, i32 61, i32 61, i32 63, i32 39, i32 97, i32 23, i32 18, i32 11, i32 61, i32 74, i32 82, i32 95, i32 45, i32 33, i32 64, i32 56, i32 8, i32 68, i32 72, i32 93, i32 16, i32 6, i32 91, i32 1, i32 62, i32 49, i32 34, i32 43, i32 7, i32 99, i32 75, i32 84, i32 100, i32 60, i32 10, i32 41, i32 23, i32 27, i32 40, i32 61, i32 12, i32 42, i32 29, i32 40, i32 36, i32 19, i32 35, i32 38, i32 92, i32 14, i32 72, i32 47, i32 95, i32 63, i32 65, i32 33, i32 5, i32 65, i32 41, i32 38, i32 73, i32 72, i32 8, i32 4, i32 29, i32 89, i32 16, i32 87, i32 48, i32 92, i32 32, i32 82, i32 36, i32 82, i32 85, i32 7, i32 26, i32 73, i32 97, i32 42, i32 39, i32 59, i32 43, i32 51, i32 58, i32 41, i32 68, i32 62, i32 78, i32 68, i32 63, i32 21, i32 71, i32 64, i32 91, i32 70, i32 13, i32 35, i32 64, i32 56, i32 25, i32 81, i32 64, i32 76, i32 2, i32 82, i32 75, i32 47, i32 1, i32 45, i32 61, i32 53, i32 80, i32 63, i32 62, i32 98, i32 94, i32 81, i32 46, i32 32, i32 38, i32 49, i32 41, i32 77, i32 36, i32 93, i32 55, i32 97, i32 57, i32 30, i32 22, i32 67, i32 47, i32 64, i32 20, i32 69, i32 41, i32 74, i32 51, i32 39, i32 56, i32 59, i32 19, i32 66, i32 28, i32 82, i32 100, i32 50, i32 71, i32 30, i32 40, i32 35, i32 54, i32 57, i32 47, i32 5, i32 59, i32 2, i32 60, i32 47, i32 79, i32 28, i32 47, i32 60, i32 36, i32 33, i32 72, i32 2, i32 28, i32 11, i32 100, i32 10, i32 91, i32 24, i32 11, i32 78, i32 92, i32 74, i32 56, i32 39, i32 38, i32 59, i32 90, i32 60, i32 5, i32 58, i32 18, i32 91, i32 7, i32 44, i32 38, i32 31, i32 61, i32 59, i32 76, i32 84, i32 70, i32 82, i32 82, i32 32, i32 79, i32 60, i32 32, i32 34, i32 99, i32 28, i32 89, i32 93, i32 18, i32 59, i32 69, i32 50, i32 16, i32 41, i32 11, i32 40, i32 93, i32 23, i32 17, i32 67, i32 93, i32 20, i32 26, i32 36, i32 14, i32 98, i32 73, i32 49, i32 31, i32 15, i32 89, i32 20, i32 14, i32 77, i32 44, i32 71, i32 20, i32 51, i32 53, i32 28, i32 70, i32 95, i32 32, i32 99, i32 25, i32 86, i32 81, i32 59, i32 60, i32 4, i32 5, i32 29, i32 70, i32 21, i32 91, i32 36, i32 40, i32 44, i32 100, i32 9, i32 65, i32 15, i32 85, i32 47, i32 33, i32 84, i32 26, i32 74, i32 70, i32 32, i32 8, i32 69, i32 44, i32 16, i32 7, i32 19, i32 79, i32 68, i32 44, i32 45, i32 57, i32 79, i32 26, i32 65, i32 53, i32 94, i32 92, i32 54, i32 72, i32 53, i32 3, i32 76, i32 97, i32 100, i32 88, i32 22, i32 44, i32 5, i32 42, i32 19, i32 20, i32 2, i32 45, i32 37, i32 98, i32 38, i32 1, i32 21, i32 14, i32 76, i32 2, i32 4, i32 81, i32 14, i32 41, i32 87, i32 51, i32 93, i32 67, i32 95, i32 1, i32 52, i32 44, i32 43, i32 49, i32 43, i32 82, i32 72, i32 5, i32 89, i32 77, i32 41, i32 83, i32 75, i32 70, i32 19, i32 36, i32 65, i32 32, i32 76, i32 3, i32 36, i32 46, i32 47, i32 24, i32 33, i32 15, i32 74, i32 12, i32 13, i32 61, i32 2, i32 37, i32 8, i32 57, i32 11, i32 4, i32 89, i32 90, i32 80, i32 23, i32 28, i32 49, i32 39, i32 3, i32 78, i32 94, i32 93, i32 15, i32 72, i32 16, i32 68, i32 5, i32 39, i32 18, i32 63, i32 52, i32 97, i32 90, i32 12, i32 3, i32 81, i32 12, i32 81, i32 92, i32 15, i32 77, i32 81, i32 95, i32 36, i32 78, i32 94, i32 68, i32 70, i32 35, i32 77, i32 25, i32 23, i32 43, i32 47, i32 25, i32 93, i32 92], align 4
@"\01?e2@?1??welcome_cow@@YAHH@Z@3PAHA" = private unnamed_addr constant [509 x i32] [i32 33, i32 20, i32 99, i32 95, i32 70, i32 69, i32 39, i32 26, i32 93, i32 81, i32 14, i32 84, i32 99, i32 52, i32 38, i32 74, i32 59, i32 7, i32 13, i32 39, i32 72, i32 51, i32 36, i32 37, i32 97, i32 36, i32 44, i32 32, i32 84, i32 90, i32 54, i32 96, i32 42, i32 64, i32 29, i32 43, i32 14, i32 57, i32 64, i32 30, i32 13, i32 6, i32 31, i32 78, i32 9, i32 45, i32 39, i32 84, i32 10, i32 72, i32 50, i32 62, i32 83, i32 79, i32 56, i32 3, i32 62, i32 50, i32 68, i32 48, i32 78, i32 9, i32 78, i32 44, i32 23, i32 82, i32 1, i32 84, i32 69, i32 87, i32 93, i32 38, i32 96, i32 76, i32 55, i32 32, i32 43, i32 91, i32 96, i32 36, i32 28, i32 25, i32 98, i32 81, i32 20, i32 67, i32 86, i32 60, i32 25, i32 24, i32 61, i32 55, i32 23, i32 46, i32 45, i32 5, i32 94, i32 84, i32 28, i32 42, i32 70, i32 74, i32 28, i32 6, i32 35, i32 86, i32 46, i32 76, i32 13, i32 99, i32 90, i32 33, i32 3, i32 62, i32 55, i32 65, i32 54, i32 41, i32 24, i32 3, i32 90, i32 98, i32 95, i32 18, i32 13, i32 58, i32 13, i32 21, i32 24, i32 53, i32 51, i32 93, i32 75, i32 79, i32 62, i32 57, i32 72, i32 90, i32 51, i32 56, i32 57, i32 61, i32 92, i32 68, i32 16, i32 63, i32 29, i32 87, i32 20, i32 39, i32 64, i32 17, i32 27, i32 67, i32 41, i32 33, i32 49, i32 74, i32 77, i32 13, i32 83, i32 74, i32 27, i32 18, i32 49, i32 52, i32 19, i32 7, i32 56, i32 27, i32 92, i32 49, i32 49, i32 28, i32 87, i32 96, i32 47, i32 98, i32 99, i32 86, i32 22, i32 58, i32 33, i32 94, i32 3, i32 88, i32 76, i32 27, i32 55, i32 4, i32 2, i32 86, i32 72, i32 11, i32 40, i32 28, i32 4, i32 3, i32 44, i32 97, i32 73, i32 55, i32 85, i32 33, i32 47, i32 37, i32 49, i32 55, i32 52, i32 55, i32 40, i32 64, i32 100, i32 21, i32 5, i32 34, i32 11, i32 8, i32 62, i32 35, i32 100, i32 67, i32 41, i32 30, i32 5, i32 82, i32 90, i32 32, i32 1, i32 35, i32 69, i32 36, i32 86, i32 35, i32 22, i32 11, i32 84, i32 28, i32 32, i32 100, i32 34, i32 38, i32 95, i32 97, i32 41, i32 45, i32 34, i32 87, i32 41, i32 36, i32 76, i32 69, i32 42, i32 31, i32 10, i32 59, i32 73, i32 34, i32 29, i32 68, i32 75, i32 97, i32 76, i32 89, i32 88, i32 96, i32 29, i32 90, i32 100, i32 93, i32 68, i32 38, i32 79, i32 70, i32 95, i32 52, i32 84, i32 21, i32 84, i32 66, i32 6, i32 6, i32 35, i32 2, i32 39, i32 35, i32 84, i32 92, i32 12, i32 56, i32 17, i32 80, i32 55, i32 75, i32 21, i32 39, i32 95, i32 32, i32 91, i32 22, i32 51, i32 50, i32 24, i32 56, i32 40, i32 45, i32 52, i32 60, i32 79, i32 52, i32 81, i32 52, i32 76, i32 27, i32 5, i32 75, i32 94, i32 78, i32 78, i32 82, i32 78, i32 12, i32 6, i32 13, i32 60, i32 60, i32 100, i32 37, i32 57, i32 46, i32 31, i32 39, i32 43, i32 34, i32 54, i32 69, i32 93, i32 71, i32 13, i32 87, i32 88, i32 72, i32 97, i32 63, i32 57, i32 91, i32 99, i32 13, i32 9, i32 40, i32 59, i32 40, i32 80, i32 52, i32 31, i32 28, i32 53, i32 31, i32 8, i32 52, i32 31, i32 57, i32 21, i32 94, i32 4, i32 59, i32 6, i32 58, i32 99, i32 7, i32 12, i32 68, i32 66, i32 12, i32 72, i32 4, i32 44, i32 45, i32 15, i32 87, i32 59, i32 60, i32 9, i32 51, i32 17, i32 74, i32 95, i32 57, i32 40, i32 58, i32 59, i32 66, i32 66, i32 44, i32 81, i32 30, i32 3, i32 23, i32 62, i32 100, i32 17, i32 64, i32 21, i32 7, i32 93, i32 5, i32 33, i32 56, i32 1, i32 23, i32 22, i32 46, i32 12, i32 25, i32 90, i32 69, i32 54, i32 96, i32 81, i32 92, i32 90, i32 56, i32 32, i32 14, i32 45, i32 76, i32 39, i32 37, i32 32, i32 45, i32 84, i32 17, i32 44, i32 35, i32 80, i32 3, i32 41, i32 60, i32 57, i32 61, i32 79, i32 79, i32 47, i32 14, i32 92, i32 72, i32 21, i32 72, i32 76, i32 89, i32 57, i32 2, i32 44, i32 4, i32 96, i32 71, i32 19, i32 10, i32 61, i32 59, i32 38, i32 94, i32 75, i32 71, i32 74, i32 10, i32 35, i32 89, i32 13, i32 23, i32 75, i32 61, i32 97, i32 38, i32 93, i32 38, i32 89, i32 72, i32 67, i32 66, i32 38, i32 1, i32 9, i32 22, i32 79, i32 58, i32 47, i32 8, i32 23, i32 24, i32 84, i32 31, i32 47, i32 71, i32 75, i32 49, i32 85, i32 91, i32 85, i32 63, i32 24, i32 67, i32 75, i32 82, i32 67, i32 6, i32 68, i32 43, i32 57], align 4
@"\01?e1@?1??play_mice@@YAHH@Z@3PAY0DC@HA" = private unnamed_addr constant [2 x [50 x i32]] [[50 x i32] [i32 4, i32 7, i32 2, i32 7, i32 2, i32 3, i32 8, i32 3, i32 7, i32 3, i32 5, i32 2, i32 6, i32 2, i32 3, i32 8, i32 9, i32 6, i32 4, i32 4, i32 8, i32 1, i32 4, i32 6, i32 5, i32 7, i32 9, i32 9, i32 9, i32 6, i32 4, i32 5, i32 1, i32 7, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6, i32 1, i32 2, i32 6, i32 9, i32 9, i32 5, i32 2, i32 2, i32 9, i32 8], [50 x i32] [i32 1, i32 1, i32 7, i32 5, i32 5, i32 1, i32 9, i32 6, i32 5, i32 1, i32 3, i32 6, i32 4, i32 9, i32 9, i32 1, i32 1, i32 2, i32 7, i32 7, i32 4, i32 8, i32 9, i32 8, i32 8, i32 3, i32 3, i32 4, i32 3, i32 6, i32 9, i32 3, i32 8, i32 6, i32 6, i32 6, i32 7, i32 9, i32 1, i32 3, i32 6, i32 2, i32 6, i32 1, i32 6, i32 3, i32 1, i32 7, i32 4, i32 3]], align 4
@"\01?e1@?1??max_ziju@@YAHH@Z@3PAHA" = private unnamed_addr constant [109 x i32] [i32 -5, i32 12, i32 16, i32 -34, i32 -12, i32 2, i32 29, i32 -26, i32 -13, i32 29, i32 -3, i32 -19, i32 -15, i32 40, i32 -6, i32 30, i32 -9, i32 -2, i32 35, i32 9, i32 8, i32 -37, i32 24, i32 37, i32 -15, i32 3, i32 26, i32 38, i32 -26, i32 -50, i32 20, i32 38, i32 49, i32 14, i32 1, i32 -25, i32 1, i32 -40, i32 28, i32 -41, i32 15, i32 -9, i32 31, i32 -25, i32 -43, i32 36, i32 43, i32 14, i32 -20, i32 40, i32 4, i32 -45, i32 35, i32 40, i32 -21, i32 8, i32 26, i32 24, i32 11, i32 20, i32 -33, i32 -5, i32 -44, i32 47, i32 -50, i32 46, i32 -28, i32 -3, i32 13, i32 -26, i32 -50, i32 44, i32 33, i32 28, i32 -34, i32 -9, i32 -42, i32 40, i32 0, i32 44, i32 21, i32 -44, i32 22, i32 -28, i32 -34, i32 30, i32 -14, i32 48, i32 46, i32 -8, i32 -5, i32 -14, i32 48, i32 -30, i32 -3, i32 -43, i32 -15, i32 44, i32 27, i32 15, i32 21, i32 40, i32 -23, i32 3, i32 35, i32 36, i32 15, i32 6, i32 -40], align 4
@"\01?e2@?1??max_ziju@@YAHH@Z@3PAHA" = private unnamed_addr constant [109 x i32] [i32 -28, i32 20, i32 -23, i32 -10, i32 46, i32 -3, i32 -45, i32 -5, i32 33, i32 16, i32 -48, i32 -30, i32 10, i32 46, i32 -3, i32 -13, i32 -45, i32 -8, i32 25, i32 -38, i32 -11, i32 17, i32 -38, i32 0, i32 -13, i32 -12, i32 21, i32 -3, i32 31, i32 -36, i32 -25, i32 -50, i32 40, i32 29, i32 -42, i32 44, i32 -27, i32 -14, i32 4, i32 -38, i32 40, i32 -30, i32 41, i32 -9, i32 27, i32 22, i32 17, i32 42, i32 44, i32 24, i32 33, i32 44, i32 6, i32 -35, i32 0, i32 19, i32 -48, i32 39, i32 -8, i32 41, i32 -12, i32 -32, i32 -20, i32 -38, i32 -2, i32 -2, i32 18, i32 -28, i32 6, i32 42, i32 -2, i32 17, i32 9, i32 -23, i32 11, i32 -5, i32 40, i32 13, i32 31, i32 21, i32 20, i32 -33, i32 1, i32 16, i32 -36, i32 -2, i32 -31, i32 32, i32 30, i32 -47, i32 -3, i32 11, i32 -1, i32 4, i32 -10, i32 36, i32 29, i32 -11, i32 27, i32 -2, i32 17, i32 33, i32 -9, i32 33, i32 36, i32 49, i32 6, i32 -26, i32 14], align 4
@"\01?e1@?1??yyy_qi@@YAHH@Z@3PAHA" = private unnamed_addr constant [59 x i32] [i32 7, i32 9, i32 1, i32 2, i32 7, i32 5, i32 3, i32 4, i32 5, i32 4, i32 7, i32 9, i32 1, i32 3, i32 1, i32 6, i32 8, i32 2, i32 3, i32 1, i32 2, i32 9, i32 2, i32 5, i32 5, i32 3, i32 5, i32 5, i32 5, i32 3, i32 4, i32 4, i32 5, i32 1, i32 3, i32 3, i32 9, i32 8, i32 1, i32 1, i32 4, i32 3, i32 5, i32 8, i32 3, i32 1, i32 3, i32 9, i32 3, i32 3, i32 6, i32 6, i32 1, i32 9, i32 6, i32 9, i32 3, i32 4, i32 7], align 4
@"\01?e2@?1??yyy_qi@@YAHH@Z@3PAHA" = private unnamed_addr constant [59 x i32] [i32 5, i32 3, i32 4, i32 3, i32 2, i32 1, i32 4, i32 5, i32 3, i32 4, i32 6, i32 7, i32 9, i32 9, i32 4, i32 9, i32 5, i32 2, i32 4, i32 3, i32 3, i32 1, i32 3, i32 7, i32 5, i32 9, i32 7, i32 9, i32 8, i32 1, i32 5, i32 5, i32 2, i32 2, i32 7, i32 9, i32 8, i32 1, i32 5, i32 7, i32 6, i32 9, i32 5, i32 7, i32 5, i32 9, i32 3, i32 4, i32 4, i32 2, i32 9, i32 4, i32 2, i32 9, i32 2, i32 3, i32 3, i32 6, i32 2], align 4
@"\01?e3@?1??yyy_qi@@YAHH@Z@3PAHA" = private unnamed_addr constant [59 x i32] [i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1], align 4
@"\01?num@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4HA" = internal global i32 0, align 4
@"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA" = internal global [10010 x i32] zeroinitializer, align 4
@"\01?top@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4HA" = internal global i32 0, align 4
@"\01?Stack@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA" = internal global [10010 x i32] zeroinitializer, align 4
@"\01?instack@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA" = internal global [10010 x i32] zeroinitializer, align 4
@"\01?e1@?1??max_zitu@@YAHH@Z@3PAHA" = private unnamed_addr constant [109 x i32] [i32 25, i32 3, i32 37, i32 92, i32 94, i32 39, i32 68, i32 50, i32 43, i32 59, i32 40, i32 20, i32 23, i32 34, i32 77, i32 70, i32 93, i32 52, i32 43, i32 92, i32 75, i32 44, i32 41, i32 8, i32 59, i32 57, i32 83, i32 53, i32 24, i32 14, i32 57, i32 75, i32 29, i32 14, i32 58, i32 41, i32 65, i32 2, i32 98, i32 60, i32 90, i32 59, i32 34, i32 29, i32 43, i32 35, i32 93, i32 92, i32 57, i32 98, i32 46, i32 78, i32 92, i32 9, i32 79, i32 27, i32 28, i32 59, i32 13, i32 64, i32 41, i32 86, i32 51, i32 9, i32 26, i32 9, i32 80, i32 30, i32 68, i32 52, i32 43, i32 78, i32 81, i32 68, i32 38, i32 55, i32 73, i32 29, i32 46, i32 40, i32 52, i32 28, i32 34, i32 75, i32 70, i32 30, i32 45, i32 99, i32 27, i32 32, i32 9, i32 100, i32 85, i32 33, i32 87, i32 2, i32 88, i32 74, i32 54, i32 41, i32 12, i32 29, i32 87, i32 58, i32 11, i32 80, i32 58, i32 65, i32 83], align 4
@"\01?e2@?1??max_zitu@@YAHH@Z@3PAHA" = private unnamed_addr constant [109 x i32] [i32 33, i32 95, i32 8, i32 70, i32 86, i32 33, i32 96, i32 31, i32 57, i32 73, i32 3, i32 81, i32 65, i32 76, i32 14, i32 37, i32 28, i32 94, i32 48, i32 60, i32 6, i32 33, i32 64, i32 57, i32 89, i32 59, i32 79, i32 58, i32 17, i32 91, i32 40, i32 17, i32 64, i32 30, i32 43, i32 30, i32 27, i32 60, i32 97, i32 26, i32 59, i32 2, i32 100, i32 5, i32 65, i32 94, i32 86, i32 65, i32 82, i32 48, i32 93, i32 89, i32 77, i32 28, i32 24, i32 79, i32 23, i32 70, i32 19, i32 65, i32 2, i32 96, i32 28, i32 33, i32 44, i32 56, i32 87, i32 7, i32 16, i32 52, i32 40, i32 32, i32 96, i32 96, i32 9, i32 35, i32 65, i32 80, i32 65, i32 42, i32 25, i32 34, i32 23, i32 93, i32 10, i32 84, i32 83, i32 10, i32 100, i32 60, i32 27, i32 9, i32 59, i32 45, i32 59, i32 38, i32 33, i32 24, i32 61, i32 21, i32 62, i32 93, i32 3, i32 90, i32 21, i32 6, i32 60, i32 70, i32 32], align 4
@"\01?e1@?1??save_cloud@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 50, i32 15, i32 87, i32 70, i32 58, i32 43, i32 50, i32 53, i32 27, i32 3, i32 85, i32 15, i32 16, i32 93, i32 78, i32 34, i32 30, i32 74, i32 11, i32 39, i32 19, i32 37, i32 62, i32 26, i32 36, i32 75, i32 87, i32 95, i32 8, i32 77, i32 13, i32 56, i32 100, i32 59, i32 86, i32 42, i32 14, i32 30, i32 66, i32 83, i32 65, i32 41, i32 28, i32 35, i32 65, i32 85, i32 76, i32 42, i32 5, i32 55, i32 72, i32 19, i32 34, i32 83, i32 83, i32 29, i32 74, i32 65, i32 43, i32 99, i32 73, i32 7, i32 99, i32 68, i32 56, i32 28, i32 94, i32 82, i32 15, i32 52, i32 42, i32 87, i32 6, i32 53, i32 14, i32 65, i32 33, i32 25, i32 69, i32 36, i32 32, i32 73, i32 41, i32 23, i32 79, i32 98, i32 36, i32 79, i32 29, i32 94, i32 19, i32 31, i32 40, i32 32, i32 27, i32 66, i32 81, i32 93, i32 20, i32 89, i32 62, i32 73, i32 42, i32 53, i32 93, i32 53, i32 86, i32 23, i32 86, i32 10, i32 40, i32 84, i32 85, i32 79, i32 24, i32 77, i32 20, i32 16, i32 56, i32 89, i32 64, i32 2, i32 81, i32 46, i32 76, i32 4, i32 25, i32 48, i32 13, i32 75, i32 38, i32 79, i32 30, i32 14, i32 35, i32 69, i32 53, i32 14, i32 95, i32 95, i32 98, i32 71, i32 100, i32 99, i32 84, i32 21, i32 56, i32 66, i32 100, i32 63, i32 2, i32 31, i32 20, i32 83, i32 98, i32 42, i32 90, i32 82, i32 87, i32 57, i32 84, i32 2, i32 40, i32 42, i32 26, i32 22, i32 97, i32 74, i32 97, i32 65, i32 36, i32 9, i32 43, i32 6, i32 44, i32 44, i32 92, i32 10, i32 55, i32 59, i32 53, i32 69, i32 50, i32 69, i32 14, i32 43, i32 9, i32 82, i32 100, i32 28, i32 56, i32 88, i32 87, i32 11, i32 75, i32 78, i32 83, i32 45, i32 57, i32 37, i32 43, i32 17, i32 21, i32 91, i32 31, i32 64, i32 80, i32 54, i32 47, i32 60, i32 61, i32 28, i32 26, i32 80, i32 31, i32 95, i32 17, i32 58, i32 24, i32 24, i32 25, i32 70, i32 86, i32 64, i32 38, i32 4, i32 35, i32 36, i32 41, i32 35, i32 100, i32 21, i32 31, i32 89, i32 34, i32 59, i32 96, i32 96, i32 46, i32 73, i32 67, i32 31, i32 99, i32 60, i32 98, i32 74, i32 7, i32 47, i32 49, i32 27, i32 19, i32 83, i32 5, i32 65, i32 98, i32 73, i32 18, i32 40, i32 18, i32 54, i32 7, i32 53, i32 16, i32 29, i32 18, i32 94, i32 36, i32 20, i32 66, i32 78, i32 55, i32 70, i32 47, i32 46, i32 46, i32 37, i32 70, i32 40, i32 18, i32 43, i32 36, i32 59, i32 81, i32 13, i32 90, i32 85, i32 4, i32 5, i32 44, i32 58, i32 60, i32 82, i32 3, i32 71, i32 84, i32 79, i32 85, i32 17, i32 45, i32 98, i32 76, i32 41, i32 95, i32 60, i32 35, i32 66, i32 56, i32 90, i32 42, i32 99, i32 41, i32 71, i32 3, i32 46, i32 90, i32 64, i32 25, i32 80, i32 83, i32 1, i32 82, i32 16, i32 10, i32 19, i32 53, i32 69, i32 46, i32 39, i32 76, i32 50, i32 86, i32 41, i32 85, i32 9, i32 28, i32 16, i32 93, i32 19, i32 36, i32 32, i32 85, i32 6, i32 64, i32 49, i32 16, i32 68, i32 2, i32 69, i32 24, i32 28, i32 71, i32 80, i32 6, i32 93, i32 97, i32 19, i32 34, i32 7, i32 85, i32 85, i32 39, i32 89, i32 23, i32 36, i32 18, i32 10, i32 15, i32 86, i32 39, i32 89, i32 21, i32 39, i32 29, i32 60, i32 68, i32 40, i32 36, i32 30, i32 65, i32 36, i32 9, i32 4, i32 34, i32 91, i32 51, i32 3, i32 4, i32 35, i32 19, i32 28, i32 94, i32 54, i32 77, i32 57, i32 97, i32 12, i32 72, i32 68, i32 72, i32 65, i32 7, i32 48, i32 95, i32 8, i32 8, i32 38, i32 66, i32 87, i32 13, i32 38, i32 41, i32 5, i32 54, i32 68, i32 70, i32 94, i32 8, i32 9, i32 51, i32 2, i32 54, i32 3, i32 19, i32 32, i32 67, i32 87, i32 14, i32 89, i32 76, i32 84, i32 64, i32 17, i32 70, i32 16, i32 21, i32 39, i32 41, i32 20, i32 74, i32 82, i32 67, i32 90, i32 49, i32 71, i32 15, i32 11, i32 40, i32 1, i32 68, i32 95, i32 8, i32 1, i32 92, i32 26, i32 12, i32 73, i32 7, i32 93, i32 28, i32 100, i32 52, i32 16, i32 14, i32 65, i32 29, i32 33, i32 38, i32 79, i32 45, i32 62, i32 10, i32 69, i32 82, i32 93, i32 57, i32 96, i32 65, i32 90, i32 27, i32 17, i32 96, i32 51, i32 18, i32 70, i32 64, i32 26, i32 40, i32 45, i32 83, i32 56, i32 14, i32 99, i32 35, i32 73, i32 88, i32 8, i32 1, i32 23, i32 27, i32 25, i32 10, i32 52, i32 98, i32 24, i32 35, i32 23, i32 33, i32 64, i32 82, i32 34, i32 8, i32 13, i32 73, i32 55, i32 62, i32 27, i32 5, i32 84, i32 69, i32 30, i32 8, i32 13, i32 82, i32 36, i32 98, i32 11, i32 75, i32 75, i32 83, i32 25, i32 47, i32 98, i32 5, i32 83, i32 43, i32 68, i32 84, i32 88, i32 36, i32 79, i32 99, i32 82, i32 31, i32 1, i32 81, i32 6, i32 79, i32 95, i32 57, i32 100, i32 85, i32 37, i32 64, i32 27, i32 5, i32 21, i32 64, i32 79, i32 31, i32 42, i32 13, i32 48, i32 80, i32 14, i32 69, i32 77, i32 11, i32 58, i32 60, i32 27, i32 1, i32 79, i32 41, i32 53, i32 34, i32 95, i32 44, i32 21, i32 16, i32 94, i32 15, i32 60, i32 78, i32 59, i32 20, i32 3, i32 85, i32 9, i32 84, i32 90, i32 43, i32 50, i32 50, i32 68, i32 62, i32 99, i32 17, i32 78, i32 63, i32 16, i32 99, i32 93, i32 36, i32 82, i32 51, i32 12, i32 74, i32 95, i32 34, i32 44, i32 74, i32 58, i32 85, i32 83, i32 86, i32 70, i32 42, i32 33, i32 71, i32 21, i32 75, i32 51, i32 44, i32 43, i32 88, i32 96, i32 66, i32 66, i32 41, i32 32, i32 58, i32 89, i32 82, i32 51, i32 11, i32 50, i32 7, i32 92, i32 57, i32 21, i32 30, i32 84, i32 72, i32 56, i32 100, i32 20, i32 42, i32 8, i32 93, i32 48, i32 85, i32 92, i32 98, i32 13, i32 47, i32 30, i32 78, i32 47, i32 70, i32 3, i32 95, i32 95, i32 25, i32 64, i32 76, i32 99, i32 1, i32 76, i32 78, i32 83, i32 62, i32 40, i32 89, i32 42, i32 21, i32 90, i32 92, i32 78, i32 98, i32 6, i32 6, i32 44, i32 62, i32 48, i32 84, i32 23, i32 23, i32 62, i32 28, i32 74, i32 83, i32 91, i32 15, i32 66, i32 67, i32 97, i32 41, i32 75, i32 19, i32 34, i32 96, i32 43, i32 70, i32 69, i32 50, i32 18, i32 55, i32 96, i32 36, i32 48, i32 40, i32 27, i32 82, i32 19, i32 79, i32 92, i32 62, i32 40, i32 20, i32 86, i32 75, i32 62, i32 37, i32 47, i32 1, i32 89, i32 8, i32 74, i32 33, i32 66, i32 28, i32 98, i32 51, i32 71, i32 23, i32 63, i32 21, i32 58, i32 94, i32 17, i32 48, i32 52, i32 79, i32 69, i32 5, i32 52, i32 24, i32 80, i32 89, i32 53, i32 4, i32 51, i32 52, i32 53, i32 15, i32 43, i32 73, i32 89, i32 61, i32 9, i32 17, i32 26, i32 97, i32 70, i32 52, i32 41, i32 95, i32 44, i32 93, i32 83, i32 74, i32 67, i32 55, i32 65, i32 86, i32 45, i32 49, i32 79, i32 87, i32 75, i32 51, i32 87, i32 4, i32 15, i32 79, i32 27, i32 100, i32 93, i32 49, i32 12, i32 42, i32 62, i32 88, i32 87, i32 86, i32 92, i32 52, i32 59, i32 77, i32 18, i32 38, i32 73, i32 12, i32 44, i32 36, i32 75, i32 48, i32 5, i32 15, i32 50, i32 76, i32 26, i32 31, i32 64, i32 80, i32 43, i32 87, i32 2, i32 60, i32 3, i32 16, i32 18, i32 15, i32 69, i32 93, i32 98, i32 3, i32 55, i32 28, i32 82, i32 16, i32 46, i32 63, i32 5, i32 1, i32 82, i32 78, i32 18, i32 19, i32 87, i32 16, i32 70, i32 90, i32 10, i32 81, i32 21, i32 49, i32 24, i32 79, i32 92, i32 55, i32 68, i32 94, i32 84, i32 4, i32 83, i32 42, i32 44, i32 61, i32 16, i32 30, i32 51, i32 98, i32 89, i32 96, i32 52, i32 86, i32 9, i32 74, i32 17, i32 57, i32 41, i32 47, i32 87, i32 2, i32 18, i32 92, i32 55, i32 53, i32 12, i32 90, i32 90, i32 20, i32 78, i32 100, i32 51, i32 39, i32 16, i32 26, i32 82, i32 85, i32 74, i32 26, i32 69, i32 50, i32 14, i32 69, i32 38, i32 78, i32 40, i32 99, i32 90, i32 17, i32 16, i32 34, i32 50, i32 17, i32 30, i32 7, i32 20, i32 33, i32 58, i32 76, i32 64, i32 57, i32 80, i32 14, i32 4, i32 57, i32 12, i32 35, i32 83, i32 31, i32 98, i32 55, i32 10, i32 23, i32 9, i32 61, i32 33, i32 19, i32 52, i32 80, i32 24, i32 64, i32 20, i32 57, i32 17, i32 59, i32 33, i32 85, i32 4, i32 15, i32 54, i32 46, i32 84, i32 93, i32 40, i32 4, i32 12, i32 12, i32 31, i32 59, i32 15, i32 73, i32 74, i32 5, i32 81, i32 85, i32 21, i32 85, i32 91, i32 74, i32 20, i32 90, i32 78, i32 76, i32 36, i32 12, i32 53, i32 55, i32 80, i32 1, i32 14, i32 75, i32 22, i32 1, i32 75, i32 19, i32 51, i32 99, i32 82, i32 4, i32 46, i32 92, i32 71, i32 12, i32 50, i32 22, i32 36, i32 11, i32 73, i32 60, i32 25, i32 34, i32 24, i32 79, i32 88, i32 21, i32 71, i32 78, i32 47, i32 46, i32 100, i32 15, i32 43, i32 52, i32 73, i32 11], align 4
@"\01?e2@?1??save_cloud@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 55, i32 27, i32 11, i32 68, i32 45, i32 92, i32 69, i32 94, i32 54, i32 90, i32 79, i32 5, i32 6, i32 92, i32 97, i32 43, i32 56, i32 31, i32 89, i32 17, i32 61, i32 46, i32 7, i32 84, i32 33, i32 47, i32 28, i32 19, i32 1, i32 59, i32 58, i32 53, i32 63, i32 73, i32 60, i32 36, i32 54, i32 56, i32 37, i32 98, i32 13, i32 33, i32 70, i32 7, i32 54, i32 32, i32 47, i32 44, i32 83, i32 98, i32 16, i32 60, i32 49, i32 78, i32 61, i32 35, i32 68, i32 97, i32 45, i32 3, i32 89, i32 8, i32 18, i32 22, i32 57, i32 2, i32 20, i32 79, i32 83, i32 76, i32 64, i32 48, i32 80, i32 75, i32 33, i32 65, i32 77, i32 31, i32 44, i32 27, i32 93, i32 67, i32 63, i32 30, i32 6, i32 24, i32 95, i32 44, i32 62, i32 50, i32 38, i32 24, i32 89, i32 91, i32 65, i32 5, i32 76, i32 49, i32 37, i32 90, i32 87, i32 80, i32 76, i32 68, i32 56, i32 24, i32 94, i32 34, i32 89, i32 15, i32 59, i32 55, i32 87, i32 17, i32 28, i32 89, i32 94, i32 93, i32 99, i32 99, i32 55, i32 94, i32 100, i32 9, i32 78, i32 88, i32 2, i32 74, i32 13, i32 57, i32 53, i32 23, i32 75, i32 14, i32 3, i32 27, i32 100, i32 73, i32 82, i32 71, i32 45, i32 92, i32 56, i32 93, i32 43, i32 34, i32 68, i32 67, i32 96, i32 27, i32 72, i32 88, i32 38, i32 15, i32 21, i32 17, i32 3, i32 11, i32 13, i32 25, i32 94, i32 76, i32 36, i32 80, i32 44, i32 1, i32 91, i32 9, i32 46, i32 18, i32 86, i32 35, i32 25, i32 36, i32 67, i32 2, i32 39, i32 24, i32 41, i32 72, i32 43, i32 82, i32 18, i32 87, i32 78, i32 27, i32 74, i32 65, i32 41, i32 52, i32 57, i32 69, i32 35, i32 67, i32 31, i32 54, i32 54, i32 8, i32 34, i32 20, i32 46, i32 91, i32 52, i32 61, i32 55, i32 45, i32 80, i32 44, i32 4, i32 97, i32 22, i32 16, i32 11, i32 83, i32 97, i32 97, i32 68, i32 20, i32 82, i32 50, i32 83, i32 61, i32 95, i32 54, i32 96, i32 94, i32 48, i32 65, i32 83, i32 45, i32 40, i32 59, i32 75, i32 95, i32 4, i32 64, i32 67, i32 16, i32 43, i32 85, i32 69, i32 10, i32 8, i32 60, i32 54, i32 35, i32 7, i32 43, i32 83, i32 22, i32 59, i32 4, i32 43, i32 61, i32 63, i32 67, i32 44, i32 79, i32 38, i32 25, i32 90, i32 21, i32 87, i32 3, i32 23, i32 27, i32 17, i32 7, i32 2, i32 67, i32 10, i32 35, i32 28, i32 21, i32 15, i32 89, i32 98, i32 48, i32 82, i32 64, i32 46, i32 85, i32 75, i32 32, i32 1, i32 18, i32 23, i32 69, i32 57, i32 37, i32 72, i32 18, i32 90, i32 27, i32 32, i32 42, i32 78, i32 23, i32 3, i32 63, i32 56, i32 55, i32 80, i32 60, i32 7, i32 62, i32 23, i32 28, i32 87, i32 33, i32 19, i32 89, i32 64, i32 49, i32 47, i32 58, i32 12, i32 80, i32 31, i32 90, i32 21, i32 32, i32 12, i32 91, i32 69, i32 59, i32 7, i32 46, i32 58, i32 46, i32 29, i32 100, i32 83, i32 12, i32 72, i32 43, i32 91, i32 47, i32 63, i32 65, i32 86, i32 28, i32 52, i32 35, i32 15, i32 98, i32 99, i32 31, i32 24, i32 26, i32 19, i32 28, i32 55, i32 98, i32 98, i32 33, i32 29, i32 73, i32 23, i32 68, i32 97, i32 37, i32 46, i32 39, i32 10, i32 10, i32 89, i32 37, i32 31, i32 13, i32 21, i32 12, i32 17, i32 23, i32 13, i32 36, i32 13, i32 59, i32 45, i32 53, i32 81, i32 10, i32 63, i32 69, i32 89, i32 57, i32 93, i32 4, i32 70, i32 72, i32 48, i32 22, i32 60, i32 84, i32 29, i32 10, i32 72, i32 25, i32 60, i32 42, i32 67, i32 95, i32 55, i32 16, i32 30, i32 72, i32 71, i32 17, i32 23, i32 90, i32 60, i32 17, i32 91, i32 68, i32 38, i32 100, i32 11, i32 57, i32 23, i32 26, i32 19, i32 62, i32 95, i32 82, i32 32, i32 2, i32 29, i32 64, i32 15, i32 76, i32 99, i32 28, i32 71, i32 49, i32 15, i32 62, i32 34, i32 13, i32 20, i32 8, i32 13, i32 53, i32 70, i32 85, i32 69, i32 64, i32 38, i32 66, i32 91, i32 64, i32 36, i32 95, i32 74, i32 8, i32 24, i32 30, i32 92, i32 69, i32 67, i32 70, i32 83, i32 56, i32 46, i32 46, i32 78, i32 53, i32 60, i32 26, i32 56, i32 53, i32 63, i32 68, i32 28, i32 69, i32 78, i32 74, i32 44, i32 89, i32 52, i32 59, i32 16, i32 77, i32 89, i32 83, i32 67, i32 26, i32 75, i32 100, i32 54, i32 40, i32 72, i32 4, i32 56, i32 54, i32 15, i32 39, i32 9, i32 67, i32 58, i32 92, i32 90, i32 82, i32 12, i32 70, i32 8, i32 74, i32 97, i32 30, i32 26, i32 81, i32 49, i32 60, i32 80, i32 45, i32 32, i32 64, i32 7, i32 81, i32 69, i32 65, i32 66, i32 37, i32 49, i32 94, i32 77, i32 94, i32 80, i32 36, i32 63, i32 20, i32 75, i32 25, i32 34, i32 59, i32 49, i32 32, i32 77, i32 51, i32 8, i32 80, i32 10, i32 28, i32 60, i32 90, i32 92, i32 77, i32 1, i32 7, i32 71, i32 3, i32 97, i32 42, i32 49, i32 98, i32 95, i32 26, i32 90, i32 38, i32 2, i32 18, i32 68, i32 22, i32 89, i32 59, i32 6, i32 74, i32 63, i32 80, i32 84, i32 11, i32 61, i32 48, i32 3, i32 62, i32 65, i32 5, i32 61, i32 68, i32 27, i32 84, i32 44, i32 9, i32 84, i32 28, i32 18, i32 44, i32 37, i32 20, i32 49, i32 67, i32 5, i32 77, i32 60, i32 77, i32 22, i32 72, i32 99, i32 73, i32 71, i32 57, i32 93, i32 29, i32 14, i32 35, i32 60, i32 28, i32 68, i32 85, i32 80, i32 13, i32 46, i32 60, i32 100, i32 75, i32 92, i32 68, i32 99, i32 6, i32 66, i32 12, i32 67, i32 75, i32 53, i32 74, i32 68, i32 41, i32 64, i32 22, i32 84, i32 62, i32 13, i32 45, i32 3, i32 83, i32 25, i32 32, i32 87, i32 25, i32 89, i32 62, i32 71, i32 48, i32 38, i32 59, i32 32, i32 92, i32 90, i32 55, i32 16, i32 92, i32 22, i32 61, i32 85, i32 81, i32 36, i32 7, i32 62, i32 1, i32 82, i32 53, i32 65, i32 19, i32 31, i32 82, i32 21, i32 27, i32 36, i32 92, i32 59, i32 60, i32 1, i32 75, i32 2, i32 77, i32 20, i32 42, i32 1, i32 22, i32 44, i32 82, i32 1, i32 68, i32 19, i32 8, i32 48, i32 24, i32 88, i32 32, i32 67, i32 73, i32 62, i32 6, i32 93, i32 87, i32 57, i32 4, i32 82, i32 94, i32 98, i32 46, i32 28, i32 50, i32 58, i32 3, i32 24, i32 7, i32 94, i32 76, i32 15, i32 42, i32 48, i32 87, i32 98, i32 22, i32 32, i32 56, i32 63, i32 73, i32 35, i32 54, i32 34, i32 1, i32 64, i32 34, i32 48, i32 18, i32 27, i32 6, i32 41, i32 90, i32 51, i32 98, i32 44, i32 57, i32 76, i32 15, i32 66, i32 91, i32 90, i32 95, i32 38, i32 54, i32 27, i32 57, i32 67, i32 25, i32 16, i32 75, i32 58, i32 16, i32 19, i32 34, i32 39, i32 41, i32 57, i32 78, i32 25, i32 69, i32 92, i32 53, i32 67, i32 82, i32 16, i32 19, i32 43, i32 91, i32 93, i32 93, i32 53, i32 94, i32 55, i32 42, i32 78, i32 37, i32 35, i32 26, i32 91, i32 79, i32 81, i32 46, i32 78, i32 5, i32 28, i32 90, i32 19, i32 37, i32 53, i32 72, i32 3, i32 92, i32 31, i32 2, i32 39, i32 40, i32 49, i32 88, i32 84, i32 31, i32 97, i32 100, i32 54, i32 90, i32 46, i32 81, i32 21, i32 71, i32 94, i32 91, i32 12, i32 12, i32 46, i32 98, i32 96, i32 12, i32 8, i32 62, i32 76, i32 83, i32 57, i32 1, i32 80, i32 38, i32 64, i32 47, i32 15, i32 59, i32 74, i32 72, i32 90, i32 98, i32 70, i32 85, i32 46, i32 20, i32 63, i32 87, i32 29, i32 96, i32 4, i32 41, i32 2, i32 2, i32 3, i32 1, i32 38, i32 39, i32 39, i32 55, i32 25, i32 70, i32 23, i32 72, i32 14, i32 92, i32 63, i32 25, i32 99, i32 91, i32 87, i32 21, i32 10, i32 94, i32 26, i32 6, i32 86, i32 24, i32 44, i32 70, i32 83, i32 38, i32 1, i32 7, i32 51, i32 22, i32 82, i32 5, i32 81, i32 37, i32 65, i32 99, i32 54, i32 81, i32 70, i32 22, i32 20, i32 54, i32 55, i32 1, i32 67, i32 61, i32 22, i32 72, i32 18, i32 26, i32 20, i32 40, i32 29, i32 98, i32 96, i32 53, i32 99, i32 82, i32 36, i32 19, i32 54, i32 49, i32 10, i32 97, i32 39, i32 67, i32 91, i32 38, i32 98, i32 4, i32 94, i32 15, i32 100, i32 72, i32 77, i32 17, i32 84, i32 65, i32 85, i32 24, i32 12, i32 51, i32 80, i32 38, i32 62, i32 21, i32 59, i32 88, i32 26, i32 18, i32 92, i32 68, i32 48, i32 56, i32 34, i32 24, i32 99, i32 64, i32 52, i32 52, i32 80, i32 91, i32 59, i32 85, i32 12, i32 56, i32 52, i32 21, i32 59, i32 55, i32 39, i32 71, i32 56, i32 82, i32 5, i32 78, i32 7, i32 86, i32 38, i32 22, i32 12, i32 13, i32 42, i32 46, i32 58, i32 14, i32 98, i32 46, i32 18, i32 46, i32 52, i32 10, i32 53, i32 3, i32 91, i32 32, i32 99, i32 23, i32 93, i32 58, i32 51, i32 88, i32 96, i32 14, i32 47, i32 41, i32 82, i32 76, i32 67, i32 2, i32 51, i32 33, i32 86, i32 90, i32 40, i32 91, i32 83, i32 90, i32 75, i32 15, i32 28, i32 90, i32 75, i32 49, i32 37], align 4
@"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A" = internal global [20010 x %struct.node_snow] zeroinitializer, align 4
@"\01?e1@?1??light_bomb@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 68, i32 0, i32 65, i32 8, i32 42, i32 60, i32 42, i32 50, i32 65, i32 14, i32 50, i32 24, i32 45, i32 61, i32 27, i32 5, i32 52, i32 0, i32 98, i32 84, i32 0, i32 66, i32 7, i32 75, i32 52, i32 50, i32 57, i32 22, i32 62, i32 59, i32 69, i32 72, i32 4, i32 85, i32 73, i32 30, i32 46, i32 61, i32 59, i32 55, i32 42, i32 31, i32 39, i32 32, i32 36, i32 53, i32 77, i32 34, i32 62, i32 49, i32 74, i32 74, i32 48, i32 7, i32 35, i32 74, i32 23, i32 97, i32 24, i32 88, i32 78, i32 91, i32 34, i32 21, i32 50, i32 23, i32 50, i32 4, i32 99, i32 2, i32 35, i32 11, i32 13, i32 92, i32 13, i32 49, i32 85, i32 98, i32 57, i32 85, i32 47, i32 9, i32 61, i32 20, i32 5, i32 58, i32 64, i32 10, i32 16, i32 16, i32 96, i32 10, i32 95, i32 64, i32 41, i32 43, i32 43, i32 88, i32 39, i32 50, i32 87, i32 38, i32 81, i32 90, i32 30, i32 43, i32 35, i32 74, i32 31, i32 98, i32 20, i32 22, i32 27, i32 77, i32 77, i32 97, i32 91, i32 62, i32 33, i32 61, i32 57, i32 21, i32 30, i32 6, i32 71, i32 76, i32 44, i32 33, i32 46, i32 64, i32 32, i32 99, i32 72, i32 57, i32 65, i32 48, i32 31, i32 37, i32 96, i32 16, i32 96, i32 24, i32 80, i32 59, i32 39, i32 35, i32 45, i32 37, i32 34, i32 72, i32 6, i32 96, i32 4, i32 72, i32 74, i32 92, i32 26, i32 70, i32 54, i32 8, i32 78, i32 59, i32 50, i32 96, i32 51, i32 29, i32 52, i32 62, i32 78, i32 68, i32 23, i32 69, i32 39, i32 2, i32 8, i32 29, i32 49, i32 20, i32 34, i32 62, i32 32, i32 64, i32 2, i32 3, i32 64, i32 37, i32 39, i32 36, i32 15, i32 95, i32 49, i32 51, i32 61, i32 46, i32 31, i32 13, i32 71, i32 6, i32 47, i32 84, i32 9, i32 16, i32 41, i32 74, i32 48, i32 54, i32 35, i32 13, i32 69, i32 93, i32 78, i32 33, i32 28, i32 40, i32 17, i32 20, i32 26, i32 58, i32 36, i32 49, i32 73, i32 86, i32 94, i32 62, i32 98, i32 9, i32 3, i32 72, i32 29, i32 58, i32 81, i32 70, i32 16, i32 95, i32 94, i32 29, i32 78, i32 77, i32 86, i32 42, i32 84, i32 52, i32 3, i32 16, i32 66, i32 84, i32 87, i32 74, i32 23, i32 10, i32 59, i32 25, i32 46, i32 68, i32 6, i32 44, i32 26, i32 10, i32 95, i32 88, i32 88, i32 53, i32 50, i32 27, i32 48, i32 6, i32 5, i32 21, i32 24, i32 56, i32 11, i32 60, i32 24, i32 95, i32 65, i32 1, i32 15, i32 49, i32 61, i32 81, i32 88, i32 76, i32 92, i32 11, i32 9, i32 98, i32 15, i32 42, i32 73, i32 99, i32 0, i32 14, i32 81, i32 5, i32 50, i32 60, i32 40, i32 53, i32 20, i32 99, i32 96, i32 19, i32 7, i32 18, i32 76, i32 69, i32 31, i32 5, i32 57, i32 44, i32 36, i32 78, i32 45, i32 46, i32 78, i32 14, i32 61, i32 75, i32 61, i32 1, i32 87, i32 18, i32 84, i32 93, i32 75, i32 56, i32 59, i32 80, i32 78, i32 50, i32 30, i32 26, i32 51, i32 84, i32 88, i32 78, i32 17, i32 74, i32 26, i32 10, i32 90, i32 53, i32 24, i32 24, i32 5, i32 79, i32 90, i32 66, i32 56, i32 52, i32 35, i32 32, i32 89, i32 7, i32 76, i32 66, i32 46, i32 48, i32 50, i32 66, i32 37, i32 73, i32 50, i32 1, i32 22, i32 29, i32 18, i32 2, i32 95, i32 33, i32 37, i32 91, i32 47, i32 11, i32 11, i32 34, i32 45, i32 29, i32 39, i32 0, i32 43, i32 97, i32 51, i32 33, i32 55, i32 21, i32 11, i32 0, i32 50, i32 60, i32 82, i32 94, i32 90, i32 78, i32 76, i32 44, i32 49, i32 90, i32 41, i32 34, i32 2, i32 94, i32 72, i32 7, i32 88, i32 58, i32 31, i32 70, i32 90, i32 25, i32 13, i32 75, i32 25, i32 83, i32 80, i32 22, i32 70, i32 75, i32 12, i32 5, i32 68, i32 42, i32 34, i32 62, i32 79, i32 20, i32 93, i32 38, i32 84, i32 93, i32 77, i32 91, i32 89, i32 53, i32 44, i32 28, i32 28, i32 93, i32 31, i32 78, i32 55, i32 46, i32 14, i32 4, i32 30, i32 38, i32 27, i32 59, i32 43, i32 63, i32 91, i32 26, i32 85, i32 75, i32 13, i32 41, i32 42, i32 81, i32 62, i32 7, i32 30, i32 89, i32 12, i32 52, i32 10, i32 35, i32 27, i32 65, i32 25, i32 1, i32 72, i32 35, i32 70, i32 73, i32 42, i32 78, i32 90, i32 6, i32 9, i32 59, i32 27, i32 83, i32 85, i32 50, i32 79, i32 74, i32 36, i32 88, i32 56, i32 75, i32 81, i32 20, i32 9, i32 94, i32 57, i32 67, i32 6, i32 0, i32 1, i32 28, i32 10, i32 41, i32 49, i32 12, i32 59, i32 53, i32 22, i32 19, i32 13, i32 67, i32 19, i32 55, i32 83, i32 88, i32 95, i32 32, i32 2, i32 84, i32 69, i32 32, i32 19, i32 91, i32 74, i32 24, i32 36, i32 77, i32 65, i32 5, i32 67, i32 89, i32 89, i32 40, i32 81, i32 33, i32 47, i32 77, i32 84, i32 53, i32 93, i32 65, i32 70, i32 80, i32 83, i32 33, i32 27, i32 4, i32 21, i32 63, i32 15, i32 53, i32 35, i32 57, i32 26, i32 79, i32 74, i32 14, i32 16, i32 53, i32 70, i32 44, i32 61, i32 29, i32 19, i32 48, i32 78, i32 13, i32 1, i32 36, i32 34, i32 37, i32 24, i32 85, i32 15, i32 55, i32 57, i32 20, i32 62, i32 83, i32 23, i32 25, i32 27, i32 14, i32 1, i32 7, i32 42, i32 76, i32 85, i32 47, i32 7, i32 9, i32 10, i32 23, i32 41, i32 18, i32 20, i32 10, i32 20, i32 99, i32 51, i32 34, i32 32, i32 11, i32 25, i32 8, i32 47, i32 68, i32 61, i32 2, i32 17, i32 21, i32 74, i32 79, i32 97, i32 51, i32 36, i32 95, i32 73, i32 90, i32 11, i32 49, i32 91, i32 68, i32 27, i32 52, i32 24, i32 18, i32 75, i32 88, i32 38, i32 58, i32 26, i32 39, i32 45, i32 39, i32 75, i32 10, i32 21, i32 74, i32 54, i32 78, i32 89, i32 90, i32 36, i32 42, i32 2, i32 97, i32 94, i32 97, i32 53, i32 19, i32 41, i32 84, i32 67, i32 89, i32 30, i32 96, i32 73, i32 27, i32 5, i32 39, i32 21, i32 0, i32 4, i32 95, i32 89, i32 64, i32 71, i32 74, i32 47, i32 46, i32 10, i32 25, i32 16, i32 6, i32 49, i32 9, i32 18, i32 71, i32 90, i32 14, i32 12, i32 28, i32 32, i32 99, i32 2, i32 87, i32 41, i32 31, i32 77, i32 77, i32 60, i32 80, i32 95, i32 58, i32 99, i32 32, i32 81, i32 93, i32 18, i32 36, i32 61, i32 24, i32 95, i32 81, i32 2, i32 44, i32 71, i32 49, i32 87, i32 47, i32 85, i32 53, i32 38, i32 6, i32 88, i32 58, i32 53, i32 18, i32 60, i32 61, i32 99, i32 15, i32 6, i32 76, i32 46, i32 55, i32 57, i32 23, i32 53, i32 86, i32 88, i32 91, i32 93, i32 59, i32 29, i32 97, i32 86, i32 54, i32 4, i32 54, i32 82, i32 99, i32 19, i32 83, i32 4, i32 22, i32 83, i32 18, i32 71, i32 48, i32 82, i32 90, i32 88, i32 18, i32 34, i32 68, i32 36, i32 39, i32 99, i32 86, i32 18, i32 11, i32 81, i32 18, i32 21, i32 13, i32 50, i32 63, i32 95, i32 78, i32 42, i32 79, i32 53, i32 23, i32 17, i32 91, i32 28, i32 56, i32 0, i32 32, i32 41, i32 94, i32 44, i32 5, i32 70, i32 45, i32 56, i32 43, i32 3, i32 52, i32 87, i32 19, i32 1, i32 70, i32 0, i32 53, i32 81, i32 21, i32 89, i32 49, i32 41, i32 56, i32 23, i32 67, i32 47, i32 11, i32 85, i32 21, i32 35, i32 63, i32 24, i32 16, i32 24, i32 50, i32 2, i32 98, i32 21, i32 85, i32 31, i32 98, i32 77, i32 73, i32 60, i32 53, i32 67, i32 76, i32 78, i32 91, i32 54, i32 7, i32 61, i32 79, i32 20, i32 73, i32 93, i32 49, i32 99, i32 51, i32 71, i32 83, i32 30, i32 13, i32 1, i32 82, i32 84, i32 83, i32 55, i32 3, i32 80, i32 23, i32 89, i32 64, i32 67, i32 33, i32 58, i32 6, i32 13, i32 84, i32 42, i32 18, i32 17, i32 13, i32 12, i32 51, i32 94, i32 1, i32 84, i32 82, i32 99, i32 39, i32 64, i32 71, i32 37, i32 25, i32 17, i32 45, i32 90, i32 59, i32 55, i32 34, i32 42, i32 67, i32 63, i32 49, i32 41, i32 23, i32 11, i32 40, i32 23, i32 94, i32 40, i32 83, i32 31, i32 74, i32 94, i32 10, i32 30, i32 39, i32 9, i32 7, i32 57, i32 87, i32 12, i32 1, i32 20, i32 83, i32 45, i32 40, i32 46, i32 91, i32 39, i32 89, i32 25, i32 7, i32 37, i32 78, i32 27, i32 9, i32 40, i32 95, i32 42, i32 67, i32 64, i32 36, i32 0, i32 96, i32 85, i32 69, i32 83, i32 65, i32 71, i32 47, i32 94, i32 19, i32 2, i32 98, i32 12, i32 77, i32 91, i32 67, i32 24, i32 71, i32 68, i32 5, i32 84, i32 21, i32 17, i32 64, i32 39, i32 8, i32 57, i32 65, i32 81, i32 47, i32 1, i32 9, i32 44, i32 57, i32 88, i32 30, i32 28, i32 5, i32 61, i32 8, i32 68, i32 84, i32 12, i32 13, i32 9, i32 6, i32 12, i32 95, i32 53, i32 32, i32 88, i32 64, i32 10, i32 92, i32 22, i32 86, i32 88, i32 24, i32 61, i32 67, i32 32, i32 61, i32 21, i32 13, i32 40, i32 10, i32 90, i32 12, i32 41, i32 94, i32 57, i32 1, i32 64, i32 36, i32 69, i32 25, i32 59, i32 19, i32 82, i32 19, i32 9, i32 81, i32 28, i32 27, i32 76], align 4
@"\01?e2@?1??light_bomb@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 97, i32 87, i32 58, i32 42, i32 31, i32 62, i32 34, i32 27, i32 90, i32 54, i32 60, i32 52, i32 5, i32 40, i32 0, i32 97, i32 97, i32 70, i32 48, i32 55, i32 87, i32 15, i32 1, i32 28, i32 24, i32 38, i32 72, i32 28, i32 67, i32 55, i32 68, i32 53, i32 28, i32 25, i32 41, i32 13, i32 1, i32 71, i32 30, i32 18, i32 28, i32 21, i32 16, i32 70, i32 8, i32 68, i32 89, i32 96, i32 57, i32 64, i32 57, i32 36, i32 6, i32 35, i32 51, i32 42, i32 94, i32 55, i32 86, i32 72, i32 95, i32 44, i32 83, i32 5, i32 54, i32 30, i32 62, i32 62, i32 8, i32 52, i32 86, i32 5, i32 40, i32 89, i32 60, i32 43, i32 88, i32 23, i32 64, i32 88, i32 83, i32 4, i32 22, i32 85, i32 25, i32 28, i32 9, i32 60, i32 29, i32 77, i32 67, i32 45, i32 68, i32 15, i32 55, i32 36, i32 57, i32 26, i32 51, i32 20, i32 36, i32 39, i32 30, i32 17, i32 45, i32 38, i32 27, i32 84, i32 65, i32 87, i32 31, i32 63, i32 14, i32 14, i32 69, i32 41, i32 15, i32 0, i32 28, i32 70, i32 21, i32 55, i32 20, i32 94, i32 18, i32 51, i32 24, i32 82, i32 88, i32 5, i32 94, i32 75, i32 41, i32 14, i32 94, i32 80, i32 91, i32 28, i32 63, i32 31, i32 69, i32 42, i32 49, i32 31, i32 60, i32 99, i32 77, i32 31, i32 59, i32 19, i32 97, i32 70, i32 80, i32 2, i32 33, i32 1, i32 51, i32 30, i32 91, i32 43, i32 69, i32 72, i32 85, i32 44, i32 20, i32 47, i32 59, i32 22, i32 1, i32 86, i32 48, i32 5, i32 8, i32 79, i32 4, i32 75, i32 14, i32 35, i32 18, i32 50, i32 91, i32 56, i32 34, i32 98, i32 30, i32 38, i32 56, i32 31, i32 81, i32 75, i32 52, i32 87, i32 2, i32 99, i32 42, i32 85, i32 27, i32 23, i32 77, i32 86, i32 30, i32 69, i32 44, i32 32, i32 70, i32 15, i32 53, i32 33, i32 40, i32 21, i32 93, i32 56, i32 45, i32 17, i32 79, i32 18, i32 40, i32 43, i32 76, i32 7, i32 85, i32 24, i32 0, i32 17, i32 63, i32 45, i32 35, i32 20, i32 41, i32 1, i32 45, i32 69, i32 4, i32 18, i32 82, i32 80, i32 67, i32 30, i32 43, i32 38, i32 46, i32 17, i32 24, i32 19, i32 61, i32 19, i32 82, i32 47, i32 94, i32 17, i32 30, i32 77, i32 2, i32 78, i32 8, i32 88, i32 66, i32 26, i32 35, i32 16, i32 40, i32 2, i32 10, i32 12, i32 35, i32 80, i32 78, i32 16, i32 98, i32 34, i32 51, i32 60, i32 25, i32 41, i32 14, i32 11, i32 59, i32 59, i32 76, i32 97, i32 48, i32 66, i32 92, i32 66, i32 37, i32 0, i32 4, i32 69, i32 42, i32 55, i32 4, i32 17, i32 38, i32 16, i32 77, i32 29, i32 72, i32 20, i32 32, i32 39, i32 60, i32 24, i32 34, i32 57, i32 94, i32 87, i32 87, i32 46, i32 77, i32 94, i32 3, i32 91, i32 69, i32 91, i32 78, i32 35, i32 33, i32 30, i32 48, i32 63, i32 83, i32 35, i32 6, i32 69, i32 87, i32 57, i32 3, i32 49, i32 55, i32 33, i32 66, i32 26, i32 89, i32 39, i32 25, i32 70, i32 90, i32 47, i32 84, i32 95, i32 97, i32 24, i32 40, i32 15, i32 78, i32 39, i32 62, i32 87, i32 68, i32 14, i32 83, i32 73, i32 80, i32 39, i32 87, i32 38, i32 32, i32 12, i32 20, i32 72, i32 51, i32 45, i32 99, i32 55, i32 3, i32 94, i32 25, i32 56, i32 32, i32 85, i32 29, i32 90, i32 9, i32 74, i32 53, i32 35, i32 74, i32 9, i32 99, i32 7, i32 65, i32 84, i32 41, i32 22, i32 65, i32 63, i32 27, i32 39, i32 24, i32 62, i32 9, i32 76, i32 4, i32 85, i32 62, i32 31, i32 36, i32 99, i32 91, i32 57, i32 36, i32 41, i32 39, i32 14, i32 0, i32 96, i32 23, i32 82, i32 29, i32 75, i32 72, i32 29, i32 2, i32 2, i32 11, i32 4, i32 59, i32 27, i32 31, i32 45, i32 24, i32 91, i32 89, i32 98, i32 19, i32 85, i32 25, i32 48, i32 0, i32 24, i32 54, i32 46, i32 81, i32 40, i32 12, i32 76, i32 24, i32 17, i32 22, i32 28, i32 41, i32 87, i32 81, i32 95, i32 2, i32 8, i32 6, i32 10, i32 9, i32 24, i32 20, i32 94, i32 57, i32 16, i32 24, i32 99, i32 80, i32 46, i32 37, i32 16, i32 78, i32 17, i32 62, i32 0, i32 67, i32 33, i32 54, i32 49, i32 70, i32 40, i32 71, i32 9, i32 38, i32 9, i32 61, i32 49, i32 89, i32 94, i32 76, i32 79, i32 42, i32 99, i32 38, i32 10, i32 38, i32 13, i32 39, i32 42, i32 55, i32 55, i32 13, i32 33, i32 26, i32 32, i32 16, i32 36, i32 99, i32 76, i32 89, i32 21, i32 80, i32 90, i32 53, i32 84, i32 69, i32 9, i32 26, i32 33, i32 21, i32 67, i32 28, i32 75, i32 34, i32 79, i32 1, i32 44, i32 98, i32 57, i32 4, i32 40, i32 95, i32 91, i32 66, i32 70, i32 47, i32 36, i32 29, i32 81, i32 13, i32 70, i32 2, i32 29, i32 40, i32 57, i32 91, i32 32, i32 93, i32 0, i32 40, i32 20, i32 83, i32 50, i32 13, i32 9, i32 93, i32 23, i32 46, i32 41, i32 29, i32 12, i32 88, i32 18, i32 74, i32 89, i32 15, i32 2, i32 38, i32 12, i32 94, i32 26, i32 88, i32 99, i32 34, i32 8, i32 66, i32 46, i32 84, i32 88, i32 10, i32 45, i32 41, i32 28, i32 76, i32 81, i32 80, i32 36, i32 40, i32 20, i32 69, i32 21, i32 63, i32 82, i32 68, i32 34, i32 14, i32 49, i32 82, i32 24, i32 32, i32 28, i32 15, i32 2, i32 69, i32 62, i32 44, i32 6, i32 25, i32 39, i32 96, i32 34, i32 87, i32 98, i32 38, i32 94, i32 0, i32 83, i32 58, i32 48, i32 94, i32 48, i32 59, i32 89, i32 16, i32 48, i32 42, i32 78, i32 55, i32 39, i32 84, i32 54, i32 36, i32 85, i32 15, i32 13, i32 35, i32 24, i32 4, i32 67, i32 81, i32 93, i32 37, i32 46, i32 94, i32 18, i32 91, i32 78, i32 32, i32 34, i32 30, i32 61, i32 49, i32 7, i32 1, i32 83, i32 42, i32 94, i32 81, i32 93, i32 14, i32 92, i32 46, i32 81, i32 65, i32 1, i32 25, i32 28, i32 22, i32 80, i32 19, i32 85, i32 62, i32 87, i32 90, i32 50, i32 35, i32 3, i32 93, i32 41, i32 86, i32 70, i32 4, i32 39, i32 14, i32 8, i32 9, i32 10, i32 21, i32 10, i32 65, i32 31, i32 64, i32 96, i32 93, i32 36, i32 12, i32 47, i32 28, i32 80, i32 20, i32 14, i32 25, i32 84, i32 92, i32 2, i32 77, i32 35, i32 50, i32 30, i32 36, i32 28, i32 27, i32 39, i32 59, i32 99, i32 0, i32 22, i32 36, i32 51, i32 82, i32 85, i32 70, i32 17, i32 5, i32 56, i32 4, i32 2, i32 20, i32 92, i32 40, i32 21, i32 41, i32 54, i32 13, i32 24, i32 26, i32 28, i32 68, i32 31, i32 78, i32 21, i32 9, i32 18, i32 2, i32 86, i32 6, i32 25, i32 16, i32 44, i32 18, i32 0, i32 77, i32 96, i32 7, i32 44, i32 1, i32 80, i32 81, i32 13, i32 29, i32 77, i32 0, i32 38, i32 59, i32 68, i32 29, i32 40, i32 9, i32 71, i32 53, i32 6, i32 33, i32 57, i32 83, i32 89, i32 0, i32 49, i32 63, i32 48, i32 21, i32 40, i32 40, i32 45, i32 83, i32 76, i32 28, i32 71, i32 17, i32 51, i32 78, i32 23, i32 15, i32 50, i32 71, i32 42, i32 96, i32 4, i32 60, i32 87, i32 11, i32 7, i32 85, i32 62, i32 92, i32 93, i32 62, i32 63, i32 70, i32 7, i32 62, i32 64, i32 26, i32 47, i32 95, i32 17, i32 56, i32 56, i32 26, i32 95, i32 50, i32 5, i32 56, i32 65, i32 55, i32 7, i32 73, i32 85, i32 53, i32 96, i32 74, i32 77, i32 27, i32 71, i32 39, i32 34, i32 52, i32 14, i32 90, i32 83, i32 22, i32 6, i32 69, i32 75, i32 84, i32 64, i32 64, i32 36, i32 65, i32 42, i32 67, i32 53, i32 70, i32 90, i32 86, i32 1, i32 5, i32 51, i32 9, i32 26, i32 8, i32 95, i32 39, i32 87, i32 65, i32 43, i32 81, i32 27, i32 46, i32 87, i32 66, i32 21, i32 89, i32 20, i32 24, i32 6, i32 72, i32 79, i32 32, i32 37, i32 12, i32 14, i32 88, i32 23, i32 9, i32 70, i32 98, i32 93, i32 34, i32 98, i32 8, i32 29, i32 1, i32 69, i32 48, i32 14, i32 15, i32 80, i32 81, i32 77, i32 70, i32 27, i32 43, i32 2, i32 50, i32 79, i32 31, i32 83, i32 86, i32 72, i32 55, i32 50, i32 73, i32 61, i32 94, i32 21, i32 12, i32 8, i32 71, i32 22, i32 37, i32 42, i32 29, i32 98, i32 85, i32 27, i32 35, i32 86, i32 89, i32 52, i32 92, i32 0, i32 98, i32 3, i32 39, i32 28, i32 15, i32 56, i32 2, i32 99, i32 9, i32 33, i32 3, i32 82, i32 89, i32 56, i32 66, i32 16, i32 11, i32 90, i32 2, i32 89, i32 4, i32 4, i32 88, i32 24, i32 64, i32 13, i32 58, i32 32, i32 57, i32 49, i32 56, i32 10, i32 56, i32 20, i32 43, i32 41, i32 4, i32 47, i32 53, i32 19, i32 84, i32 93, i32 74, i32 84, i32 62, i32 77, i32 83, i32 23, i32 62, i32 97, i32 44, i32 85, i32 89, i32 61, i32 54, i32 59, i32 28, i32 57, i32 29, i32 68, i32 31, i32 27, i32 85, i32 33, i32 87, i32 62, i32 22, i32 48, i32 17, i32 36, i32 42, i32 33, i32 14, i32 32, i32 61, i32 66, i32 55, i32 26, i32 49, i32 20, i32 6, i32 24, i32 28, i32 77, i32 32, i32 88, i32 26, i32 77, i32 59], align 4
@"\01?e3@?1??light_bomb@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 60, i32 58, i32 25, i32 57, i32 95, i32 88, i32 66, i32 88, i32 80, i32 88, i32 75, i32 11, i32 31, i32 48, i32 48, i32 80, i32 94, i32 36, i32 73, i32 73, i32 48, i32 67, i32 97, i32 28, i32 68, i32 53, i32 25, i32 23, i32 64, i32 80, i32 5, i32 43, i32 62, i32 24, i32 68, i32 30, i32 23, i32 49, i32 39, i32 56, i32 36, i32 27, i32 69, i32 40, i32 13, i32 68, i32 45, i32 74, i32 30, i32 10, i32 26, i32 7, i32 92, i32 41, i32 4, i32 65, i32 16, i32 61, i32 54, i32 49, i32 14, i32 46, i32 14, i32 3, i32 23, i32 31, i32 95, i32 7, i32 63, i32 41, i32 68, i32 71, i32 94, i32 26, i32 55, i32 35, i32 58, i32 92, i32 52, i32 19, i32 92, i32 47, i32 78, i32 92, i32 7, i32 28, i32 16, i32 65, i32 96, i32 17, i32 69, i32 91, i32 76, i32 81, i32 87, i32 22, i32 89, i32 47, i32 39, i32 78, i32 81, i32 32, i32 37, i32 44, i32 63, i32 48, i32 17, i32 1, i32 2, i32 31, i32 61, i32 25, i32 19, i32 82, i32 52, i32 47, i32 43, i32 18, i32 48, i32 0, i32 71, i32 26, i32 18, i32 81, i32 40, i32 66, i32 79, i32 28, i32 81, i32 37, i32 68, i32 7, i32 64, i32 81, i32 58, i32 13, i32 0, i32 69, i32 22, i32 2, i32 8, i32 23, i32 60, i32 32, i32 37, i32 62, i32 9, i32 0, i32 77, i32 38, i32 71, i32 40, i32 46, i32 78, i32 20, i32 57, i32 54, i32 10, i32 12, i32 5, i32 47, i32 6, i32 81, i32 39, i32 1, i32 90, i32 78, i32 69, i32 78, i32 50, i32 42, i32 24, i32 57, i32 44, i32 46, i32 62, i32 11, i32 6, i32 58, i32 43, i32 15, i32 27, i32 92, i32 4, i32 8, i32 5, i32 46, i32 45, i32 90, i32 5, i32 74, i32 60, i32 20, i32 34, i32 50, i32 23, i32 90, i32 9, i32 66, i32 0, i32 67, i32 43, i32 45, i32 42, i32 98, i32 55, i32 98, i32 61, i32 39, i32 63, i32 88, i32 34, i32 20, i32 36, i32 40, i32 37, i32 86, i32 7, i32 91, i32 16, i32 70, i32 93, i32 46, i32 40, i32 89, i32 57, i32 71, i32 18, i32 70, i32 50, i32 97, i32 9, i32 78, i32 89, i32 58, i32 43, i32 1, i32 69, i32 60, i32 79, i32 61, i32 92, i32 59, i32 36, i32 81, i32 92, i32 4, i32 29, i32 91, i32 77, i32 97, i32 11, i32 83, i32 89, i32 1, i32 61, i32 92, i32 34, i32 41, i32 80, i32 98, i32 36, i32 59, i32 45, i32 59, i32 44, i32 94, i32 69, i32 74, i32 25, i32 3, i32 54, i32 50, i32 96, i32 56, i32 78, i32 44, i32 23, i32 29, i32 32, i32 24, i32 85, i32 53, i32 9, i32 22, i32 6, i32 32, i32 50, i32 68, i32 60, i32 3, i32 38, i32 55, i32 69, i32 12, i32 25, i32 49, i32 55, i32 74, i32 98, i32 55, i32 99, i32 15, i32 12, i32 32, i32 14, i32 36, i32 74, i32 48, i32 64, i32 81, i32 77, i32 3, i32 53, i32 15, i32 34, i32 9, i32 70, i32 88, i32 19, i32 93, i32 58, i32 11, i32 97, i32 13, i32 45, i32 67, i32 71, i32 45, i32 32, i32 53, i32 66, i32 9, i32 90, i32 34, i32 16, i32 56, i32 44, i32 3, i32 73, i32 62, i32 57, i32 58, i32 52, i32 35, i32 41, i32 32, i32 59, i32 97, i32 67, i32 93, i32 66, i32 55, i32 49, i32 40, i32 7, i32 67, i32 38, i32 98, i32 44, i32 48, i32 53, i32 55, i32 79, i32 7, i32 69, i32 64, i32 92, i32 76, i32 34, i32 6, i32 39, i32 24, i32 40, i32 58, i32 7, i32 16, i32 70, i32 43, i32 58, i32 22, i32 32, i32 12, i32 91, i32 5, i32 42, i32 27, i32 51, i32 96, i32 49, i32 10, i32 64, i32 75, i32 30, i32 44, i32 80, i32 33, i32 78, i32 58, i32 28, i32 96, i32 53, i32 88, i32 98, i32 77, i32 80, i32 21, i32 45, i32 33, i32 19, i32 44, i32 51, i32 14, i32 70, i32 72, i32 61, i32 47, i32 50, i32 82, i32 43, i32 88, i32 77, i32 64, i32 44, i32 3, i32 11, i32 42, i32 79, i32 63, i32 51, i32 51, i32 44, i32 41, i32 82, i32 92, i32 39, i32 32, i32 84, i32 41, i32 52, i32 32, i32 52, i32 89, i32 58, i32 55, i32 92, i32 44, i32 72, i32 76, i32 97, i32 70, i32 12, i32 95, i32 65, i32 37, i32 42, i32 37, i32 78, i32 0, i32 79, i32 17, i32 53, i32 26, i32 50, i32 21, i32 16, i32 33, i32 23, i32 20, i32 14, i32 98, i32 96, i32 7, i32 37, i32 31, i32 43, i32 48, i32 67, i32 28, i32 52, i32 74, i32 35, i32 20, i32 57, i32 43, i32 63, i32 13, i32 69, i32 30, i32 27, i32 54, i32 87, i32 48, i32 97, i32 87, i32 52, i32 69, i32 67, i32 30, i32 67, i32 46, i32 97, i32 70, i32 43, i32 44, i32 99, i32 5, i32 29, i32 9, i32 26, i32 37, i32 62, i32 85, i32 49, i32 16, i32 31, i32 82, i32 42, i32 14, i32 40, i32 28, i32 72, i32 59, i32 27, i32 7, i32 61, i32 94, i32 9, i32 24, i32 99, i32 96, i32 50, i32 36, i32 21, i32 28, i32 31, i32 39, i32 22, i32 19, i32 62, i32 0, i32 29, i32 37, i32 29, i32 69, i32 58, i32 95, i32 90, i32 23, i32 6, i32 8, i32 40, i32 50, i32 21, i32 20, i32 98, i32 22, i32 15, i32 58, i32 84, i32 54, i32 92, i32 93, i32 26, i32 46, i32 60, i32 98, i32 82, i32 23, i32 59, i32 80, i32 14, i32 99, i32 16, i32 55, i32 41, i32 93, i32 52, i32 8, i32 97, i32 88, i32 29, i32 93, i32 35, i32 26, i32 83, i32 20, i32 34, i32 49, i32 70, i32 76, i32 15, i32 41, i32 99, i32 42, i32 7, i32 2, i32 54, i32 77, i32 22, i32 27, i32 91, i32 84, i32 97, i32 64, i32 47, i32 7, i32 52, i32 72, i32 13, i32 19, i32 91, i32 34, i32 75, i32 22, i32 35, i32 76, i32 2, i32 92, i32 54, i32 53, i32 15, i32 59, i32 55, i32 85, i32 97, i32 36, i32 84, i32 42, i32 73, i32 40, i32 9, i32 28, i32 96, i32 48, i32 1, i32 41, i32 72, i32 73, i32 90, i32 29, i32 2, i32 90, i32 93, i32 73, i32 81, i32 36, i32 58, i32 68, i32 2, i32 49, i32 59, i32 55, i32 59, i32 94, i32 72, i32 34, i32 14, i32 32, i32 45, i32 90, i32 91, i32 35, i32 5, i32 93, i32 27, i32 75, i32 16, i32 19, i32 94, i32 93, i32 56, i32 22, i32 30, i32 73, i32 38, i32 7, i32 99, i32 27, i32 55, i32 68, i32 9, i32 26, i32 14, i32 33, i32 43, i32 19, i32 6, i32 57, i32 77, i32 35, i32 23, i32 82, i32 90, i32 77, i32 71, i32 92, i32 9, i32 59, i32 8, i32 25, i32 67, i32 77, i32 32, i32 2, i32 8, i32 41, i32 16, i32 45, i32 40, i32 10, i32 64, i32 79, i32 89, i32 58, i32 91, i32 51, i32 86, i32 78, i32 5, i32 49, i32 37, i32 61, i32 40, i32 56, i32 18, i32 95, i32 23, i32 92, i32 17, i32 87, i32 69, i32 1, i32 50, i32 17, i32 10, i32 33, i32 95, i32 66, i32 79, i32 77, i32 46, i32 27, i32 5, i32 93, i32 13, i32 81, i32 12, i32 94, i32 19, i32 14, i32 2, i32 69, i32 58, i32 67, i32 35, i32 15, i32 65, i32 90, i32 61, i32 77, i32 35, i32 11, i32 71, i32 31, i32 71, i32 12, i32 75, i32 28, i32 14, i32 27, i32 40, i32 24, i32 81, i32 97, i32 6, i32 50, i32 67, i32 86, i32 12, i32 52, i32 48, i32 32, i32 38, i32 46, i32 81, i32 42, i32 31, i32 2, i32 35, i32 69, i32 48, i32 81, i32 91, i32 25, i32 12, i32 59, i32 4, i32 60, i32 47, i32 80, i32 94, i32 22, i32 47, i32 74, i32 86, i32 7, i32 43, i32 43, i32 64, i32 54, i32 16, i32 63, i32 79, i32 48, i32 57, i32 57, i32 20, i32 12, i32 8, i32 41, i32 57, i32 4, i32 62, i32 10, i32 89, i32 61, i32 4, i32 98, i32 60, i32 32, i32 27, i32 30, i32 65, i32 41, i32 10, i32 17, i32 11, i32 75, i32 59, i32 42, i32 87, i32 88, i32 2, i32 75, i32 38, i32 18, i32 14, i32 43, i32 13, i32 6, i32 22, i32 29, i32 16, i32 81, i32 3, i32 25, i32 42, i32 26, i32 76, i32 34, i32 20, i32 60, i32 4, i32 75, i32 57, i32 98, i32 82, i32 78, i32 46, i32 1, i32 80, i32 77, i32 68, i32 74, i32 4, i32 55, i32 5, i32 29, i32 32, i32 8, i32 11, i32 78, i32 30, i32 1, i32 59, i32 64, i32 10, i32 78, i32 61, i32 49, i32 24, i32 11, i32 22, i32 79, i32 72, i32 19, i32 76, i32 63, i32 73, i32 39, i32 57, i32 80, i32 53, i32 52, i32 79, i32 27, i32 93, i32 62, i32 15, i32 35, i32 15, i32 87, i32 83, i32 57, i32 30, i32 7, i32 28, i32 0, i32 72, i32 11, i32 48, i32 97, i32 27, i32 45, i32 39, i32 89, i32 64, i32 52, i32 94, i32 22, i32 60, i32 2, i32 74, i32 38, i32 30, i32 88, i32 96, i32 61, i32 4, i32 41, i32 48, i32 86, i32 3, i32 18, i32 98, i32 37, i32 12, i32 8, i32 17, i32 41, i32 71, i32 70, i32 90, i32 2, i32 53, i32 97, i32 33, i32 95, i32 89, i32 31, i32 83, i32 90, i32 50, i32 78, i32 35, i32 45, i32 75, i32 41, i32 87, i32 20, i32 8, i32 88, i32 46, i32 76, i32 46, i32 64, i32 64, i32 63, i32 69, i32 12, i32 80, i32 66, i32 75, i32 23, i32 64, i32 70, i32 72, i32 91, i32 29, i32 74, i32 10, i32 82, i32 77, i32 90, i32 92, i32 5, i32 16, i32 34, i32 58, i32 90, i32 94, i32 5, i32 40, i32 61, i32 51, i32 55, i32 78, i32 36], align 4
@"\01?ez@?1??cow_balei@@YAHH@Z@3PAY03DA" = private unnamed_addr constant [1010 x [4 x i8]] [[4 x i8] c"LLR\00", [4 x i8] c"PPF\00", [4 x i8] c"LPF\00", [4 x i8] c"FPF\00", [4 x i8] c"LFF\00", [4 x i8] c"LRF\00", [4 x i8] c"PFP\00", [4 x i8] c"LFP\00", [4 x i8] c"LFP\00", [4 x i8] c"FPP\00", [4 x i8] c"PLL\00", [4 x i8] c"LFL\00", [4 x i8] c"RRF\00", [4 x i8] c"LLR\00", [4 x i8] c"RLR\00", [4 x i8] c"PLF\00", [4 x i8] c"RRL\00", [4 x i8] c"FPF\00", [4 x i8] c"FRL\00", [4 x i8] c"LLP\00", [4 x i8] c"RLP\00", [4 x i8] c"FRP\00", [4 x i8] c"LRR\00", [4 x i8] c"LLL\00", [4 x i8] c"FLL\00", [4 x i8] c"LRF\00", [4 x i8] c"PRF\00", [4 x i8] c"LLF\00", [4 x i8] c"RLF\00", [4 x i8] c"PFL\00", [4 x i8] c"RRF\00", [4 x i8] c"PFP\00", [4 x i8] c"RRF\00", [4 x i8] c"LPR\00", [4 x i8] c"LPR\00", [4 x i8] c"FRF\00", [4 x i8] c"LLF\00", [4 x i8] c"PFF\00", [4 x i8] c"FRF\00", [4 x i8] c"PRF\00", [4 x i8] c"RLP\00", [4 x i8] c"RPR\00", [4 x i8] c"PRP\00", [4 x i8] c"PPF\00", [4 x i8] c"PLP\00", [4 x i8] c"LFF\00", [4 x i8] c"PRL\00", [4 x i8] c"PFR\00", [4 x i8] c"RFL\00", [4 x i8] c"FFL\00", [4 x i8] c"LLR\00", [4 x i8] c"PLL\00", [4 x i8] c"RFF\00", [4 x i8] c"FPL\00", [4 x i8] c"FFL\00", [4 x i8] c"RRF\00", [4 x i8] c"FFR\00", [4 x i8] c"RRF\00", [4 x i8] c"FFL\00", [4 x i8] c"RLF\00", [4 x i8] c"PFP\00", [4 x i8] c"FLR\00", [4 x i8] c"PLL\00", [4 x i8] c"RRR\00", [4 x i8] c"FRR\00", [4 x i8] c"PRL\00", [4 x i8] c"PFR\00", [4 x i8] c"FFR\00", [4 x i8] c"RFP\00", [4 x i8] c"RPL\00", [4 x i8] c"LRL\00", [4 x i8] c"LPP\00", [4 x i8] c"RPP\00", [4 x i8] c"RFL\00", [4 x i8] c"LRR\00", [4 x i8] c"FRL\00", [4 x i8] c"LFR\00", [4 x i8] c"PPL\00", [4 x i8] c"RLR\00", [4 x i8] c"FLR\00", [4 x i8] c"LFL\00", [4 x i8] c"LRL\00", [4 x i8] c"PFR\00", [4 x i8] c"RFF\00", [4 x i8] c"FPL\00", [4 x i8] c"PRF\00", [4 x i8] c"PPR\00", [4 x i8] c"PRR\00", [4 x i8] c"RPF\00", [4 x i8] c"FPL\00", [4 x i8] c"LLL\00", [4 x i8] c"RFF\00", [4 x i8] c"RLF\00", [4 x i8] c"LFP\00", [4 x i8] c"PFR\00", [4 x i8] c"LRL\00", [4 x i8] c"FRF\00", [4 x i8] c"FPF\00", [4 x i8] c"LRP\00", [4 x i8] c"PLR\00", [4 x i8] c"LLL\00", [4 x i8] c"FFP\00", [4 x i8] c"RLF\00", [4 x i8] c"PLF\00", [4 x i8] c"LFR\00", [4 x i8] c"RPP\00", [4 x i8] c"FRP\00", [4 x i8] c"RRR\00", [4 x i8] c"PRP\00", [4 x i8] c"RRF\00", [4 x i8] c"PRF\00", [4 x i8] c"PPR\00", [4 x i8] c"FRP\00", [4 x i8] c"FPF\00", [4 x i8] c"LPR\00", [4 x i8] c"LLR\00", [4 x i8] c"RFR\00", [4 x i8] c"PRL\00", [4 x i8] c"FPP\00", [4 x i8] c"PPR\00", [4 x i8] c"LRL\00", [4 x i8] c"PPF\00", [4 x i8] c"LLP\00", [4 x i8] c"PRL\00", [4 x i8] c"FLR\00", [4 x i8] c"RFR\00", [4 x i8] c"LPL\00", [4 x i8] c"RLR\00", [4 x i8] c"LLP\00", [4 x i8] c"PLF\00", [4 x i8] c"RFL\00", [4 x i8] c"LPF\00", [4 x i8] c"RRF\00", [4 x i8] c"PLP\00", [4 x i8] c"FRF\00", [4 x i8] c"LRL\00", [4 x i8] c"PLL\00", [4 x i8] c"RRP\00", [4 x i8] c"RLP\00", [4 x i8] c"LPP\00", [4 x i8] c"LPP\00", [4 x i8] c"FRF\00", [4 x i8] c"LPR\00", [4 x i8] c"PRR\00", [4 x i8] c"LRL\00", [4 x i8] c"RPF\00", [4 x i8] c"RRR\00", [4 x i8] c"PRR\00", [4 x i8] c"PLF\00", [4 x i8] c"LFR\00", [4 x i8] c"RRR\00", [4 x i8] c"PLF\00", [4 x i8] c"RPR\00", [4 x i8] c"LPP\00", [4 x i8] c"PLL\00", [4 x i8] c"PRL\00", [4 x i8] c"LRP\00", [4 x i8] c"FFR\00", [4 x i8] c"PLL\00", [4 x i8] c"RRP\00", [4 x i8] c"PFL\00", [4 x i8] c"LPF\00", [4 x i8] c"PRR\00", [4 x i8] c"PRF\00", [4 x i8] c"RFF\00", [4 x i8] c"FFP\00", [4 x i8] c"RRL\00", [4 x i8] c"FPR\00", [4 x i8] c"LPL\00", [4 x i8] c"RLP\00", [4 x i8] c"PRL\00", [4 x i8] c"PLL\00", [4 x i8] c"RPF\00", [4 x i8] c"FPL\00", [4 x i8] c"LPL\00", [4 x i8] c"FPL\00", [4 x i8] c"FPR\00", [4 x i8] c"RRL\00", [4 x i8] c"RLR\00", [4 x i8] c"LPL\00", [4 x i8] c"PFF\00", [4 x i8] c"FRR\00", [4 x i8] c"LLL\00", [4 x i8] c"RFP\00", [4 x i8] c"RPL\00", [4 x i8] c"FRF\00", [4 x i8] c"RRP\00", [4 x i8] c"FFL\00", [4 x i8] c"FRL\00", [4 x i8] c"FFR\00", [4 x i8] c"LPP\00", [4 x i8] c"RFP\00", [4 x i8] c"LFP\00", [4 x i8] c"FFF\00", [4 x i8] c"PRP\00", [4 x i8] c"LPF\00", [4 x i8] c"FPF\00", [4 x i8] c"PRR\00", [4 x i8] c"PPF\00", [4 x i8] c"PPR\00", [4 x i8] c"FLR\00", [4 x i8] c"FRR\00", [4 x i8] c"RFL\00", [4 x i8] c"FLR\00", [4 x i8] c"PPF\00", [4 x i8] c"LRR\00", [4 x i8] c"RPR\00", [4 x i8] c"RLP\00", [4 x i8] c"PRR\00", [4 x i8] c"RLR\00", [4 x i8] c"FPF\00", [4 x i8] c"PFR\00", [4 x i8] c"PLF\00", [4 x i8] c"FFF\00", [4 x i8] c"LPP\00", [4 x i8] c"LPF\00", [4 x i8] c"PLL\00", [4 x i8] c"FPL\00", [4 x i8] c"RRF\00", [4 x i8] c"LLF\00", [4 x i8] c"PFF\00", [4 x i8] c"FRF\00", [4 x i8] c"RFR\00", [4 x i8] c"RLP\00", [4 x i8] c"PPP\00", [4 x i8] c"LLP\00", [4 x i8] c"FPF\00", [4 x i8] c"FPR\00", [4 x i8] c"LRF\00", [4 x i8] c"LPF\00", [4 x i8] c"FFP\00", [4 x i8] c"FPP\00", [4 x i8] c"LFL\00", [4 x i8] c"PPF\00", [4 x i8] c"FLL\00", [4 x i8] c"PFF\00", [4 x i8] c"PFP\00", [4 x i8] c"LPL\00", [4 x i8] c"LPF\00", [4 x i8] c"LRR\00", [4 x i8] c"FFL\00", [4 x i8] c"LPF\00", [4 x i8] c"PLP\00", [4 x i8] c"PRP\00", [4 x i8] c"FLF\00", [4 x i8] c"RLF\00", [4 x i8] c"FFP\00", [4 x i8] c"LFR\00", [4 x i8] c"RFF\00", [4 x i8] c"FPP\00", [4 x i8] c"RLP\00", [4 x i8] c"LLR\00", [4 x i8] c"LPL\00", [4 x i8] c"LLF\00", [4 x i8] c"LFR\00", [4 x i8] c"RRL\00", [4 x i8] c"RPF\00", [4 x i8] c"FFF\00", [4 x i8] c"LLF\00", [4 x i8] c"PFL\00", [4 x i8] c"PFR\00", [4 x i8] c"LPR\00", [4 x i8] c"PLR\00", [4 x i8] c"RLR\00", [4 x i8] c"RLP\00", [4 x i8] c"FLL\00", [4 x i8] c"RFL\00", [4 x i8] c"RPF\00", [4 x i8] c"FRP\00", [4 x i8] c"RPP\00", [4 x i8] c"FFF\00", [4 x i8] c"LLR\00", [4 x i8] c"LRL\00", [4 x i8] c"FLP\00", [4 x i8] c"FRP\00", [4 x i8] c"PPL\00", [4 x i8] c"FPF\00", [4 x i8] c"PRP\00", [4 x i8] c"PPL\00", [4 x i8] c"RLP\00", [4 x i8] c"RPP\00", [4 x i8] c"LRR\00", [4 x i8] c"PPP\00", [4 x i8] c"RFL\00", [4 x i8] c"PRF\00", [4 x i8] c"RRF\00", [4 x i8] c"PPP\00", [4 x i8] c"LPF\00", [4 x i8] c"FPF\00", [4 x i8] c"LPL\00", [4 x i8] c"PFL\00", [4 x i8] c"PFL\00", [4 x i8] c"FLR\00", [4 x i8] c"RLR\00", [4 x i8] c"FRP\00", [4 x i8] c"PLR\00", [4 x i8] c"LRP\00", [4 x i8] c"RPR\00", [4 x i8] c"LFR\00", [4 x i8] c"LRF\00", [4 x i8] c"LPR\00", [4 x i8] c"PLL\00", [4 x i8] c"PPL\00", [4 x i8] c"PRL\00", [4 x i8] c"PPR\00", [4 x i8] c"FPL\00", [4 x i8] c"PPR\00", [4 x i8] c"PLP\00", [4 x i8] c"PLP\00", [4 x i8] c"LPL\00", [4 x i8] c"FPR\00", [4 x i8] c"PFP\00", [4 x i8] c"FRR\00", [4 x i8] c"LFF\00", [4 x i8] c"FRP\00", [4 x i8] c"LPF\00", [4 x i8] c"FRR\00", [4 x i8] c"RFP\00", [4 x i8] c"LRR\00", [4 x i8] c"FRP\00", [4 x i8] c"LPP\00", [4 x i8] c"PRR\00", [4 x i8] c"FPF\00", [4 x i8] c"FPL\00", [4 x i8] c"FLF\00", [4 x i8] c"PPR\00", [4 x i8] c"PFL\00", [4 x i8] c"PFL\00", [4 x i8] c"FRF\00", [4 x i8] c"LPP\00", [4 x i8] c"PRP\00", [4 x i8] c"PRP\00", [4 x i8] c"PPF\00", [4 x i8] c"PPF\00", [4 x i8] c"RRF\00", [4 x i8] c"FFP\00", [4 x i8] c"LPL\00", [4 x i8] c"FFR\00", [4 x i8] c"FLP\00", [4 x i8] c"FRL\00", [4 x i8] c"RPR\00", [4 x i8] c"PLP\00", [4 x i8] c"LPR\00", [4 x i8] c"LPF\00", [4 x i8] c"RLF\00", [4 x i8] c"LPP\00", [4 x i8] c"FRR\00", [4 x i8] c"LLR\00", [4 x i8] c"PRF\00", [4 x i8] c"PRP\00", [4 x i8] c"RFP\00", [4 x i8] c"LLR\00", [4 x i8] c"FPR\00", [4 x i8] c"RPL\00", [4 x i8] c"LPR\00", [4 x i8] c"RFF\00", [4 x i8] c"PLL\00", [4 x i8] c"PLP\00", [4 x i8] c"PRL\00", [4 x i8] c"RLR\00", [4 x i8] c"FPL\00", [4 x i8] c"LFL\00", [4 x i8] c"LFF\00", [4 x i8] c"FLL\00", [4 x i8] c"FPR\00", [4 x i8] c"RLR\00", [4 x i8] c"PPF\00", [4 x i8] c"PFF\00", [4 x i8] c"PPL\00", [4 x i8] c"LRL\00", [4 x i8] c"FPR\00", [4 x i8] c"FLL\00", [4 x i8] c"PRP\00", [4 x i8] c"PFL\00", [4 x i8] c"RLP\00", [4 x i8] c"FPP\00", [4 x i8] c"LFR\00", [4 x i8] c"PLP\00", [4 x i8] c"RFP\00", [4 x i8] c"PPF\00", [4 x i8] c"FLL\00", [4 x i8] c"LPL\00", [4 x i8] c"FFF\00", [4 x i8] c"FRF\00", [4 x i8] c"LPF\00", [4 x i8] c"RLR\00", [4 x i8] c"PRR\00", [4 x i8] c"LLP\00", [4 x i8] c"LPP\00", [4 x i8] c"LLL\00", [4 x i8] c"LFR\00", [4 x i8] c"RLL\00", [4 x i8] c"LPP\00", [4 x i8] c"PPR\00", [4 x i8] c"PRF\00", [4 x i8] c"RFF\00", [4 x i8] c"LPL\00", [4 x i8] c"LPR\00", [4 x i8] c"LPR\00", [4 x i8] c"LFP\00", [4 x i8] c"FRF\00", [4 x i8] c"PFP\00", [4 x i8] c"PFF\00", [4 x i8] c"LFL\00", [4 x i8] c"FLL\00", [4 x i8] c"LRR\00", [4 x i8] c"RFP\00", [4 x i8] c"FFP\00", [4 x i8] c"PRR\00", [4 x i8] c"RFF\00", [4 x i8] c"PLL\00", [4 x i8] c"RFF\00", [4 x i8] c"FFL\00", [4 x i8] c"LPF\00", [4 x i8] c"RFF\00", [4 x i8] c"FLR\00", [4 x i8] c"RFF\00", [4 x i8] c"LLF\00", [4 x i8] c"PFL\00", [4 x i8] c"RLL\00", [4 x i8] c"LPR\00", [4 x i8] c"LPF\00", [4 x i8] c"LFF\00", [4 x i8] c"RFR\00", [4 x i8] c"PFL\00", [4 x i8] c"PPL\00", [4 x i8] c"FRR\00", [4 x i8] c"PLL\00", [4 x i8] c"PPR\00", [4 x i8] c"PRL\00", [4 x i8] c"FPL\00", [4 x i8] c"LLP\00", [4 x i8] c"LRP\00", [4 x i8] c"FRL\00", [4 x i8] c"PRR\00", [4 x i8] c"FLR\00", [4 x i8] c"LLR\00", [4 x i8] c"FFL\00", [4 x i8] c"RFR\00", [4 x i8] c"LPP\00", [4 x i8] c"RPP\00", [4 x i8] c"FLP\00", [4 x i8] c"RFL\00", [4 x i8] c"PLL\00", [4 x i8] c"FRL\00", [4 x i8] c"RLF\00", [4 x i8] c"FRR\00", [4 x i8] c"LLP\00", [4 x i8] c"RPF\00", [4 x i8] c"PPF\00", [4 x i8] c"RRP\00", [4 x i8] c"RPF\00", [4 x i8] c"PPL\00", [4 x i8] c"FFL\00", [4 x i8] c"PFF\00", [4 x i8] c"FRR\00", [4 x i8] c"LFL\00", [4 x i8] c"FPL\00", [4 x i8] c"RLP\00", [4 x i8] c"LLP\00", [4 x i8] c"LPF\00", [4 x i8] c"RRL\00", [4 x i8] c"RFP\00", [4 x i8] c"RLP\00", [4 x i8] c"PLP\00", [4 x i8] c"FFR\00", [4 x i8] c"PFL\00", [4 x i8] c"RRP\00", [4 x i8] c"RFP\00", [4 x i8] c"LRF\00", [4 x i8] c"LPR\00", [4 x i8] c"PRF\00", [4 x i8] c"PPL\00", [4 x i8] c"RFR\00", [4 x i8] c"RRR\00", [4 x i8] c"RFR\00", [4 x i8] c"LLF\00", [4 x i8] c"FFR\00", [4 x i8] c"RFL\00", [4 x i8] c"LFR\00", [4 x i8] c"PRP\00", [4 x i8] c"FFF\00", [4 x i8] c"PRP\00", [4 x i8] c"LPL\00", [4 x i8] c"RRR\00", [4 x i8] c"RRL\00", [4 x i8] c"RFF\00", [4 x i8] c"PPR\00", [4 x i8] c"LRP\00", [4 x i8] c"FPR\00", [4 x i8] c"LFR\00", [4 x i8] c"LPP\00", [4 x i8] c"RLP\00", [4 x i8] c"LPF\00", [4 x i8] c"RRL\00", [4 x i8] c"RLF\00", [4 x i8] c"RRL\00", [4 x i8] c"RPR\00", [4 x i8] c"FPF\00", [4 x i8] c"FLR\00", [4 x i8] c"PLL\00", [4 x i8] c"PLL\00", [4 x i8] c"PRP\00", [4 x i8] c"PRP\00", [4 x i8] c"FLR\00", [4 x i8] c"RLP\00", [4 x i8] c"PRL\00", [4 x i8] c"PRF\00", [4 x i8] c"PPP\00", [4 x i8] c"FLL\00", [4 x i8] c"FRF\00", [4 x i8] c"LPF\00", [4 x i8] c"LFF\00", [4 x i8] c"RFP\00", [4 x i8] c"RPP\00", [4 x i8] c"RFR\00", [4 x i8] c"PLF\00", [4 x i8] c"LPP\00", [4 x i8] c"LLL\00", [4 x i8] c"LRP\00", [4 x i8] c"RLF\00", [4 x i8] c"PLF\00", [4 x i8] c"PPP\00", [4 x i8] c"RRL\00", [4 x i8] c"PLR\00", [4 x i8] c"PFL\00", [4 x i8] c"FRP\00", [4 x i8] c"LLL\00", [4 x i8] c"LRF\00", [4 x i8] c"LFF\00", [4 x i8] c"RLR\00", [4 x i8] c"RLF\00", [4 x i8] c"PRL\00", [4 x i8] c"LFP\00", [4 x i8] c"LLR\00", [4 x i8] c"FRP\00", [4 x i8] c"PLL\00", [4 x i8] c"FRL\00", [4 x i8] c"RRP\00", [4 x i8] c"PPP\00", [4 x i8] c"FRL\00", [4 x i8] c"RFR\00", [4 x i8] c"LFR\00", [4 x i8] c"FPP\00", [4 x i8] c"FPR\00", [4 x i8] c"LLL\00", [4 x i8] c"LRL\00", [4 x i8] c"PPF\00", [4 x i8] c"RPR\00", [4 x i8] c"FPR\00", [4 x i8] c"RFL\00", [4 x i8] c"FLP\00", [4 x i8] c"RLF\00", [4 x i8] c"LFL\00", [4 x i8] c"PPP\00", [4 x i8] c"RPP\00", [4 x i8] c"FFR\00", [4 x i8] c"FLL\00", [4 x i8] c"FRR\00", [4 x i8] c"PFF\00", [4 x i8] c"RPR\00", [4 x i8] c"PFL\00", [4 x i8] c"LFL\00", [4 x i8] c"RPP\00", [4 x i8] c"FPR\00", [4 x i8] c"RFR\00", [4 x i8] c"RLP\00", [4 x i8] c"PPF\00", [4 x i8] c"RFL\00", [4 x i8] c"LPL\00", [4 x i8] c"LPF\00", [4 x i8] c"FPR\00", [4 x i8] c"RPP\00", [4 x i8] c"RLF\00", [4 x i8] c"RLR\00", [4 x i8] c"PFF\00", [4 x i8] c"FLP\00", [4 x i8] c"PFF\00", [4 x i8] c"PFL\00", [4 x i8] c"RPR\00", [4 x i8] c"RLL\00", [4 x i8] c"RFF\00", [4 x i8] c"FFP\00", [4 x i8] c"PFL\00", [4 x i8] c"LLF\00", [4 x i8] c"RPF\00", [4 x i8] c"LPP\00", [4 x i8] c"RPR\00", [4 x i8] c"LRL\00", [4 x i8] c"PPL\00", [4 x i8] c"RPL\00", [4 x i8] c"FRF\00", [4 x i8] c"FPL\00", [4 x i8] c"RFF\00", [4 x i8] c"FFL\00", [4 x i8] c"LFF\00", [4 x i8] c"LPP\00", [4 x i8] c"RPF\00", [4 x i8] c"FFL\00", [4 x i8] c"RLP\00", [4 x i8] c"LRF\00", [4 x i8] c"RLP\00", [4 x i8] c"LPP\00", [4 x i8] c"PFL\00", [4 x i8] c"PFP\00", [4 x i8] c"FPF\00", [4 x i8] c"RRP\00", [4 x i8] c"FPF\00", [4 x i8] c"RPL\00", [4 x i8] c"FLF\00", [4 x i8] c"RPP\00", [4 x i8] c"RPP\00", [4 x i8] c"FPF\00", [4 x i8] c"LLP\00", [4 x i8] c"RPL\00", [4 x i8] c"RPL\00", [4 x i8] c"RPR\00", [4 x i8] c"RPR\00", [4 x i8] c"FPF\00", [4 x i8] c"LRF\00", [4 x i8] c"PLL\00", [4 x i8] c"RPR\00", [4 x i8] c"FLP\00", [4 x i8] c"FLL\00", [4 x i8] c"FPL\00", [4 x i8] c"FLP\00", [4 x i8] c"PPR\00", [4 x i8] c"RRP\00", [4 x i8] c"PRF\00", [4 x i8] c"FRR\00", [4 x i8] c"LRP\00", [4 x i8] c"PPL\00", [4 x i8] c"LFL\00", [4 x i8] c"LFP\00", [4 x i8] c"PLL\00", [4 x i8] c"FFR\00", [4 x i8] c"FRR\00", [4 x i8] c"RLF\00", [4 x i8] c"PRL\00", [4 x i8] c"LFF\00", [4 x i8] c"PRL\00", [4 x i8] c"FPF\00", [4 x i8] c"RLF\00", [4 x i8] c"PLF\00", [4 x i8] c"LRP\00", [4 x i8] c"LPR\00", [4 x i8] c"RRF\00", [4 x i8] c"PRP\00", [4 x i8] c"RLL\00", [4 x i8] c"RPF\00", [4 x i8] c"FLP\00", [4 x i8] c"LFP\00", [4 x i8] c"PPL\00", [4 x i8] c"RRL\00", [4 x i8] c"PFR\00", [4 x i8] c"RFR\00", [4 x i8] c"FPF\00", [4 x i8] c"LFF\00", [4 x i8] c"FPL\00", [4 x i8] c"PRL\00", [4 x i8] c"FLR\00", [4 x i8] c"PFP\00", [4 x i8] c"RFL\00", [4 x i8] c"PPP\00", [4 x i8] c"FFR\00", [4 x i8] c"LPL\00", [4 x i8] c"RRL\00", [4 x i8] c"FLP\00", [4 x i8] c"LFP\00", [4 x i8] c"RLF\00", [4 x i8] c"PRL\00", [4 x i8] c"LLR\00", [4 x i8] c"LPL\00", [4 x i8] c"LRR\00", [4 x i8] c"LRL\00", [4 x i8] c"PFP\00", [4 x i8] c"PPF\00", [4 x i8] c"RLL\00", [4 x i8] c"LRP\00", [4 x i8] c"FRL\00", [4 x i8] c"RRF\00", [4 x i8] c"LRF\00", [4 x i8] c"FLR\00", [4 x i8] c"LRF\00", [4 x i8] c"PRF\00", [4 x i8] c"PLF\00", [4 x i8] c"PPR\00", [4 x i8] c"LFR\00", [4 x i8] c"PPL\00", [4 x i8] c"PPF\00", [4 x i8] c"PPP\00", [4 x i8] c"FPL\00", [4 x i8] c"LLP\00", [4 x i8] c"FFL\00", [4 x i8] c"LLF\00", [4 x i8] c"FRF\00", [4 x i8] c"RPL\00", [4 x i8] c"FFR\00", [4 x i8] c"RLP\00", [4 x i8] c"FPR\00", [4 x i8] c"FRP\00", [4 x i8] c"FFL\00", [4 x i8] c"PLF\00", [4 x i8] c"PLR\00", [4 x i8] c"LPF\00", [4 x i8] c"FPR\00", [4 x i8] c"FPF\00", [4 x i8] c"RPL\00", [4 x i8] c"RLL\00", [4 x i8] c"RPF\00", [4 x i8] c"RPR\00", [4 x i8] c"LFR\00", [4 x i8] c"PLL\00", [4 x i8] c"LFL\00", [4 x i8] c"PFP\00", [4 x i8] c"LFF\00", [4 x i8] c"PFF\00", [4 x i8] c"LFP\00", [4 x i8] c"LPP\00", [4 x i8] c"RRP\00", [4 x i8] c"RRP\00", [4 x i8] c"PRF\00", [4 x i8] c"PFR\00", [4 x i8] c"PLL\00", [4 x i8] c"FRF\00", [4 x i8] c"LRF\00", [4 x i8] c"RRL\00", [4 x i8] c"FLL\00", [4 x i8] c"RLF\00", [4 x i8] c"FFF\00", [4 x i8] c"LLL\00", [4 x i8] c"LLP\00", [4 x i8] c"FLF\00", [4 x i8] c"FPR\00", [4 x i8] c"RRR\00", [4 x i8] c"LPL\00", [4 x i8] c"RLF\00", [4 x i8] c"PFP\00", [4 x i8] c"PLP\00", [4 x i8] c"RLF\00", [4 x i8] c"PRF\00", [4 x i8] c"LLF\00", [4 x i8] c"PLP\00", [4 x i8] c"PLL\00", [4 x i8] c"LFR\00", [4 x i8] c"LLL\00", [4 x i8] c"LFL\00", [4 x i8] c"RFL\00", [4 x i8] c"RPL\00", [4 x i8] c"PRF\00", [4 x i8] c"PPL\00", [4 x i8] c"RRP\00", [4 x i8] c"LPL\00", [4 x i8] c"LPF\00", [4 x i8] c"LFR\00", [4 x i8] c"PRF\00", [4 x i8] c"PFR\00", [4 x i8] c"FPL\00", [4 x i8] c"PRF\00", [4 x i8] c"PRR\00", [4 x i8] c"PFL\00", [4 x i8] c"PRP\00", [4 x i8] c"FFR\00", [4 x i8] c"PFR\00", [4 x i8] c"FRR\00", [4 x i8] c"LFF\00", [4 x i8] c"RLP\00", [4 x i8] c"RRF\00", [4 x i8] c"LPR\00", [4 x i8] c"PPR\00", [4 x i8] c"PFP\00", [4 x i8] c"FRP\00", [4 x i8] c"PFL\00", [4 x i8] c"RRF\00", [4 x i8] c"RRL\00", [4 x i8] c"LLP\00", [4 x i8] c"FPF\00", [4 x i8] c"FRR\00", [4 x i8] c"RRF\00", [4 x i8] c"RPP\00", [4 x i8] c"FRL\00", [4 x i8] c"RPL\00", [4 x i8] c"LRR\00", [4 x i8] c"PLF\00", [4 x i8] c"LRF\00", [4 x i8] c"LLF\00", [4 x i8] c"LLL\00", [4 x i8] c"LFL\00", [4 x i8] c"LRP\00", [4 x i8] c"FRF\00", [4 x i8] c"LRR\00", [4 x i8] c"PFF\00", [4 x i8] c"FFP\00", [4 x i8] c"PRL\00", [4 x i8] c"LLR\00", [4 x i8] c"PPL\00", [4 x i8] c"FFF\00", [4 x i8] c"PPL\00", [4 x i8] c"FFR\00", [4 x i8] c"RLF\00", [4 x i8] c"FFR\00", [4 x i8] c"RLP\00", [4 x i8] c"RLF\00", [4 x i8] c"PRL\00", [4 x i8] c"RFP\00", [4 x i8] c"PFR\00", [4 x i8] c"PPL\00", [4 x i8] c"RFR\00", [4 x i8] c"FFF\00", [4 x i8] c"LFR\00", [4 x i8] c"FPL\00", [4 x i8] c"FLP\00", [4 x i8] c"FPP\00", [4 x i8] c"PRL\00", [4 x i8] c"FPF\00", [4 x i8] c"PRL\00", [4 x i8] c"RFP\00", [4 x i8] c"RLL\00", [4 x i8] c"FLL\00", [4 x i8] c"FPL\00", [4 x i8] c"LPP\00", [4 x i8] c"PLF\00", [4 x i8] c"LRF\00", [4 x i8] c"LLR\00", [4 x i8] c"FLP\00", [4 x i8] c"PRF\00", [4 x i8] c"PLP\00", [4 x i8] c"PLR\00", [4 x i8] c"FLP\00", [4 x i8] c"RPP\00", [4 x i8] c"RRL\00", [4 x i8] c"LLF\00", [4 x i8] c"RFF\00", [4 x i8] c"PFF\00", [4 x i8] c"LFL\00", [4 x i8] c"RFP\00", [4 x i8] c"FPR\00", [4 x i8] c"LFP\00", [4 x i8] c"LLR\00", [4 x i8] c"RRP\00", [4 x i8] c"PLP\00", [4 x i8] c"LPL\00", [4 x i8] c"FLR\00", [4 x i8] c"RLF\00", [4 x i8] c"PRF\00", [4 x i8] c"FLL\00", [4 x i8] c"PLL\00", [4 x i8] c"LFF\00", [4 x i8] c"PFP\00", [4 x i8] c"PPL\00", [4 x i8] c"LFP\00", [4 x i8] c"LPL\00", [4 x i8] c"RRF\00", [4 x i8] c"LRF\00", [4 x i8] c"FFF\00", [4 x i8] c"FFF\00", [4 x i8] c"LRF\00", [4 x i8] c"PRF\00", [4 x i8] c"FLP\00", [4 x i8] c"RFF\00", [4 x i8] c"FLP\00", [4 x i8] c"RRR\00", [4 x i8] c"FLR\00", [4 x i8] c"PFF\00", [4 x i8] c"RFP\00", [4 x i8] c"RRL\00", [4 x i8] c"LFP\00", [4 x i8] c"FRP\00", [4 x i8] c"PFL\00", [4 x i8] c"RFR\00", [4 x i8] c"FRF\00", [4 x i8] c"RRR\00", [4 x i8] c"LRP\00", [4 x i8] c"PPL\00", [4 x i8] c"RFL\00", [4 x i8] c"LRR\00", [4 x i8] c"RFR\00", [4 x i8] c"PLP\00", [4 x i8] c"LFF\00", [4 x i8] c"LRP\00", [4 x i8] c"FRL\00", [4 x i8] c"FLR\00", [4 x i8] c"RLL\00", [4 x i8] c"RFL\00", [4 x i8] c"LPP\00", [4 x i8] c"FPR\00", [4 x i8] c"PPL\00", [4 x i8] c"FLF\00", [4 x i8] c"RPR\00", [4 x i8] c"PFL\00", [4 x i8] c"RRP\00", [4 x i8] c"RPP\00", [4 x i8] c"FPR\00", [4 x i8] c"RFL\00", [4 x i8] c"FFL\00", [4 x i8] c"PPF\00", [4 x i8] c"PFP\00", [4 x i8] c"FPF\00", [4 x i8] c"RLL\00", [4 x i8] c"FPR\00", [4 x i8] c"RPR\00", [4 x i8] c"PPF\00", [4 x i8] c"LRR\00", [4 x i8] c"PPR\00", [4 x i8] c"PPF\00", [4 x i8] c"RPR\00", [4 x i8] c"FPL\00", [4 x i8] c"RRF\00", [4 x i8] c"FRF\00", [4 x i8] c"FPP\00", [4 x i8] c"RPP\00", [4 x i8] c"FFL\00", [4 x i8] c"FFP\00", [4 x i8] c"FLP\00", [4 x i8] c"PLR\00", [4 x i8] c"RLP\00", [4 x i8] c"RLR\00", [4 x i8] c"RFP\00", [4 x i8] c"PRF\00", [4 x i8] c"FPR\00", [4 x i8] c"LPF\00", [4 x i8] c"FFF\00", [4 x i8] c"FLF\00", [4 x i8] c"FPF\00", [4 x i8] c"FPR\00", [4 x i8] c"PRP\00", [4 x i8] c"FFP\00", [4 x i8] c"PLL\00", [4 x i8] c"RLP\00", [4 x i8] c"PFF\00", [4 x i8] c"PRF\00", [4 x i8] c"LRR\00", [4 x i8] c"FLR\00", [4 x i8] c"PRP\00", [4 x i8] c"RRP\00", [4 x i8] c"FFR\00", [4 x i8] c"PRP\00", [4 x i8] c"LLF\00", [4 x i8] c"FPF\00", [4 x i8] c"PPL\00", [4 x i8] c"FRF\00", [4 x i8] c"FRR\00", [4 x i8] c"LLP\00", [4 x i8] c"FFR\00", [4 x i8] c"RFR\00", [4 x i8] c"LPF\00", [4 x i8] c"RRP\00", [4 x i8] c"LFF\00", [4 x i8] c"RFP\00", [4 x i8] c"RPR\00", [4 x i8] c"LPL\00", [4 x i8] c"RRL\00", [4 x i8] c"PRP\00", [4 x i8] c"PPR\00", [4 x i8] c"PFL\00", [4 x i8] c"PPL\00", [4 x i8] c"PFF\00", [4 x i8] c"RRF\00", [4 x i8] c"FPP\00", [4 x i8] c"RPR\00", [4 x i8] c"LLF\00", [4 x i8] c"RLR\00", [4 x i8] c"PRP\00", [4 x i8] c"LPF\00", [4 x i8] c"LRL\00", [4 x i8] c"RRL\00", [4 x i8] c"LFF\00", [4 x i8] c"LRR\00", [4 x i8] c"PFF\00", [4 x i8] c"FRP\00", [4 x i8] c"LPR\00", [4 x i8] c"FPL\00", [4 x i8] c"LLP\00", [4 x i8] c"FPR\00", [4 x i8] c"LFF\00", [4 x i8] c"LPR\00", [4 x i8] c"FRL\00", [4 x i8] c"LRP\00", [4 x i8] c"FFF\00", [4 x i8] c"RFP\00", [4 x i8] c"LRP\00", [4 x i8] c"PPL\00", [4 x i8] c"FRL\00", [4 x i8] c"RLL\00", [4 x i8] c"FFF\00", [4 x i8] c"LLP\00", [4 x i8] c"FLF\00", [4 x i8] c"RLL\00", [4 x i8] c"LFR\00", [4 x i8] c"LFR\00", [4 x i8] c"LFL\00", [4 x i8] c"RLR\00", [4 x i8] c"PRF\00", [4 x i8] c"FPL\00", [4 x i8] c"FFF\00", [4 x i8] c"LPR\00", [4 x i8] c"LPR\00", [4 x i8] c"FRP\00", [4 x i8] c"FRR\00", [4 x i8] c"PPL\00", [4 x i8] c"FRP\00", [4 x i8] c"PLL\00", [4 x i8] c"FLL\00", [4 x i8] c"FPL\00", [4 x i8] c"FPL\00", [4 x i8] c"LPL\00", [4 x i8] c"RLF\00", [4 x i8] c"LFF\00", [4 x i8] c"RFL\00", [4 x i8] zeroinitializer], align 1
@"\01?dx@?1??cow_balei@@YAHH@Z@3PAHA" = private unnamed_addr constant [4 x i32] [i32 -1, i32 0, i32 1, i32 0], align 4
@"\01?dy@?1??cow_balei@@YAHH@Z@3PAHA" = private unnamed_addr constant [4 x i32] [i32 0, i32 1, i32 0, i32 -1], align 4
@"\01?y@?1??cow_balei@@YAHH@Z@4PAHA" = internal global [4 x i32] zeroinitializer, align 4
@"\01?x@?1??cow_balei@@YAHH@Z@4PAHA" = internal global [4 x i32] zeroinitializer, align 4
@"\01?e1@?1??tong_fan@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 47, i32 72, i32 22, i32 65, i32 98, i32 95, i32 96, i32 85, i32 85, i32 31, i32 39, i32 18, i32 62, i32 4, i32 98, i32 29, i32 4, i32 96, i32 32, i32 86, i32 54, i32 34, i32 64, i32 30, i32 99, i32 92, i32 54, i32 2, i32 11, i32 73, i32 82, i32 30, i32 7, i32 18, i32 22, i32 72, i32 48, i32 86, i32 32, i32 94, i32 67, i32 71, i32 3, i32 49, i32 51, i32 9, i32 37, i32 51, i32 61, i32 3, i32 49, i32 82, i32 43, i32 95, i32 75, i32 94, i32 55, i32 18, i32 89, i32 96, i32 10, i32 33, i32 12, i32 5, i32 83, i32 34, i32 39, i32 96, i32 96, i32 92, i32 37, i32 7, i32 31, i32 79, i32 77, i32 40, i32 43, i32 54, i32 26, i32 89, i32 96, i32 30, i32 61, i32 65, i32 42, i32 59, i32 61, i32 90, i32 100, i32 17, i32 77, i32 3, i32 14, i32 77, i32 7, i32 60, i32 16, i32 29, i32 87, i32 9, i32 29, i32 86, i32 50, i32 94, i32 27, i32 100, i32 35, i32 64, i32 9, i32 45, i32 8, i32 7, i32 57, i32 5, i32 82, i32 74, i32 73, i32 32, i32 17, i32 10, i32 50, i32 68, i32 41, i32 17, i32 17, i32 35, i32 57, i32 92, i32 72, i32 33, i32 90, i32 20, i32 33, i32 27, i32 70, i32 76, i32 39, i32 96, i32 2, i32 44, i32 31, i32 38, i32 52, i32 58, i32 16, i32 33, i32 47, i32 69, i32 71, i32 36, i32 62, i32 44, i32 11, i32 100, i32 73, i32 44, i32 24, i32 7, i32 73, i32 100, i32 26, i32 71, i32 72, i32 66, i32 83, i32 31, i32 66, i32 95, i32 61, i32 95, i32 50, i32 54, i32 14, i32 67, i32 63, i32 16, i32 84, i32 58, i32 68, i32 18, i32 84, i32 40, i32 30, i32 70, i32 22, i32 43, i32 34, i32 97, i32 25, i32 13, i32 59, i32 12, i32 73, i32 16, i32 35, i32 69, i32 29, i32 66, i32 92, i32 94, i32 80, i32 63, i32 42, i32 57, i32 18, i32 80, i32 70, i32 45, i32 89, i32 92, i32 72, i32 72, i32 80, i32 65, i32 29, i32 1, i32 40, i32 20, i32 58, i32 27, i32 44, i32 53, i32 78, i32 87, i32 71, i32 94, i32 15, i32 98, i32 15, i32 63, i32 15, i32 23, i32 60, i32 57, i32 96, i32 91, i32 96, i32 74, i32 36, i32 30, i32 61, i32 4, i32 55, i32 10, i32 66, i32 29, i32 43, i32 11, i32 11, i32 18, i32 26, i32 14, i32 4, i32 96, i32 27, i32 69, i32 79, i32 51, i32 25, i32 66, i32 99, i32 87, i32 21, i32 60, i32 59, i32 58, i32 29, i32 29, i32 47, i32 74, i32 30, i32 64, i32 41, i32 58, i32 67, i32 57, i32 78, i32 83, i32 39, i32 13, i32 25, i32 48, i32 20, i32 71, i32 64, i32 30, i32 43, i32 71, i32 10, i32 9, i32 57, i32 33, i32 75, i32 88, i32 26, i32 23, i32 37, i32 33, i32 25, i32 7, i32 54, i32 68, i32 65, i32 53, i32 80, i32 39, i32 23, i32 72, i32 42, i32 33, i32 94, i32 5, i32 74, i32 92, i32 80, i32 67, i32 40, i32 29, i32 5, i32 13, i32 9, i32 39, i32 55, i32 58, i32 75, i32 32, i32 69, i32 82, i32 21, i32 70, i32 11, i32 28, i32 16, i32 53, i32 40, i32 61, i32 19, i32 43, i32 70, i32 25, i32 35, i32 90, i32 58, i32 29, i32 96, i32 26, i32 89, i32 26, i32 21, i32 53, i32 97, i32 78, i32 1, i32 32, i32 57, i32 79, i32 17, i32 6, i32 14, i32 29, i32 43, i32 43, i32 35, i32 36, i32 54, i32 33, i32 7, i32 29, i32 28, i32 64, i32 91, i32 49, i32 96, i32 82, i32 34, i32 8, i32 31, i32 20, i32 15, i32 85, i32 89, i32 70, i32 22, i32 36, i32 76, i32 72, i32 91, i32 62, i32 22, i32 58, i32 35, i32 94, i32 87, i32 85, i32 7, i32 66, i32 41, i32 29, i32 9, i32 61, i32 73, i32 27, i32 54, i32 72, i32 37, i32 31, i32 5, i32 96, i32 90, i32 94, i32 50, i32 91, i32 27, i32 60, i32 69, i32 47, i32 11, i32 24, i32 72, i32 4, i32 98, i32 93, i32 100, i32 5, i32 87, i32 28, i32 30, i32 10, i32 29, i32 31, i32 31, i32 6, i32 66, i32 96, i32 76, i32 33, i32 50, i32 66, i32 85, i32 73, i32 42, i32 88, i32 41, i32 92, i32 23, i32 62, i32 20, i32 90, i32 28, i32 100, i32 12, i32 88, i32 65, i32 15, i32 72, i32 93, i32 38, i32 8, i32 98, i32 52, i32 67, i32 100, i32 58, i32 40, i32 66, i32 63, i32 41, i32 65, i32 29, i32 18, i32 6, i32 18, i32 15, i32 5, i32 57, i32 80, i32 100, i32 85, i32 7, i32 44, i32 6, i32 63, i32 40, i32 82, i32 63, i32 27, i32 88, i32 40, i32 25, i32 77, i32 24, i32 2, i32 48, i32 64, i32 22, i32 72, i32 54, i32 3, i32 85, i32 15, i32 51, i32 56, i32 19, i32 61, i32 7, i32 80, i32 34, i32 84, i32 41, i32 46, i32 64, i32 64, i32 97, i32 17, i32 23, i32 60, i32 24, i32 52, i32 49, i32 58, i32 49, i32 43, i32 100, i32 98, i32 83, i32 53, i32 33, i32 50, i32 45, i32 8, i32 19, i32 51, i32 7, i32 31, i32 31, i32 54, i32 44, i32 75, i32 83, i32 19, i32 68, i32 26, i32 25, i32 97, i32 59, i32 69, i32 49, i32 51, i32 63, i32 11, i32 63, i32 21, i32 73, i32 38, i32 41, i32 24, i32 82, i32 68, i32 80, i32 24, i32 22, i32 82, i32 23, i32 92, i32 79, i32 18, i32 33, i32 15, i32 76, i32 13, i32 59, i32 72, i32 12, i32 65, i32 33, i32 7, i32 96, i32 67, i32 88, i32 83, i32 74, i32 54, i32 85, i32 35, i32 63, i32 77, i32 29, i32 100, i32 96, i32 20, i32 58, i32 20, i32 7, i32 21, i32 9, i32 69, i32 62, i32 99, i32 72, i32 95, i32 99, i32 52, i32 30, i32 49, i32 23, i32 67, i32 82, i32 78, i32 14, i32 9, i32 57, i32 55, i32 77, i32 68, i32 100, i32 31, i32 57, i32 58, i32 48, i32 61, i32 45, i32 39, i32 77, i32 58, i32 43, i32 54, i32 26, i32 9, i32 76, i32 83, i32 24, i32 69, i32 47, i32 31, i32 85, i32 48, i32 47, i32 18, i32 100, i32 1, i32 10, i32 94, i32 63, i32 99, i32 40, i32 8, i32 57, i32 81, i32 35, i32 78, i32 55, i32 78, i32 72, i32 84, i32 95, i32 18, i32 90, i32 38, i32 29, i32 79, i32 8, i32 99, i32 67, i32 38, i32 27, i32 69, i32 73, i32 82, i32 79, i32 12, i32 59, i32 77, i32 38, i32 89, i32 31, i32 65, i32 62, i32 74, i32 60, i32 23, i32 68, i32 95, i32 23, i32 64, i32 44, i32 69, i32 43, i32 41, i32 49, i32 99, i32 25, i32 46, i32 87, i32 21, i32 86, i32 27, i32 80, i32 53, i32 46, i32 32, i32 73, i32 79, i32 48, i32 23, i32 42, i32 62, i32 61, i32 84, i32 63, i32 32, i32 18, i32 25, i32 33, i32 53, i32 30, i32 1, i32 79, i32 8, i32 8, i32 77, i32 59, i32 85, i32 70, i32 100, i32 49, i32 59, i32 63, i32 11, i32 11, i32 26, i32 60, i32 100, i32 47, i32 4, i32 90, i32 14, i32 33, i32 12, i32 44, i32 94, i32 65, i32 67, i32 36, i32 72, i32 96, i32 62, i32 96, i32 84, i32 69, i32 41, i32 29, i32 40, i32 92, i32 8, i32 6, i32 26, i32 39, i32 54, i32 34, i32 86, i32 84, i32 20, i32 2, i32 92, i32 67, i32 87, i32 63, i32 62, i32 72, i32 91, i32 66, i32 34, i32 100, i32 85, i32 12, i32 28, i32 82, i32 63, i32 58, i32 32, i32 56, i32 65, i32 24, i32 66, i32 87, i32 40, i32 82, i32 57, i32 26, i32 71, i32 98, i32 84, i32 11, i32 77, i32 14, i32 42, i32 93, i32 48, i32 42, i32 86, i32 25, i32 93, i32 97, i32 58, i32 41, i32 39, i32 24, i32 18, i32 3, i32 65, i32 21, i32 73, i32 81, i32 65, i32 71, i32 70, i32 5, i32 21, i32 42, i32 51, i32 36, i32 69, i32 42, i32 74, i32 28, i32 42, i32 52, i32 28, i32 50, i32 92, i32 25, i32 68, i32 56, i32 40, i32 50, i32 71, i32 9, i32 99, i32 22, i32 78, i32 2, i32 75, i32 26, i32 42, i32 38, i32 75, i32 6, i32 62, i32 19, i32 26, i32 12, i32 4, i32 83, i32 83, i32 49, i32 87, i32 17, i32 64, i32 29, i32 39, i32 63, i32 23, i32 34, i32 88, i32 13, i32 42, i32 47, i32 92, i32 66, i32 50, i32 12, i32 2, i32 98, i32 95, i32 26, i32 65, i32 4, i32 17, i32 19, i32 3, i32 48, i32 99, i32 6, i32 14, i32 40, i32 61, i32 39, i32 43, i32 79, i32 72, i32 16, i32 79, i32 74, i32 45, i32 56, i32 25, i32 70, i32 62, i32 11, i32 10, i32 62, i32 69, i32 26, i32 25, i32 9, i32 18, i32 87, i32 72, i32 15, i32 89, i32 52, i32 59, i32 50, i32 98, i32 62, i32 27, i32 45, i32 96, i32 67, i32 78, i32 30, i32 61, i32 23, i32 85, i32 63, i32 2, i32 46, i32 58, i32 93, i32 2, i32 86, i32 36, i32 50, i32 20, i32 17, i32 89, i32 15, i32 51, i32 11, i32 95, i32 76, i32 49, i32 92, i32 91, i32 99, i32 53, i32 51, i32 48, i32 59, i32 27, i32 62, i32 26, i32 27, i32 20, i32 69, i32 5, i32 46, i32 46, i32 78, i32 74, i32 29, i32 66, i32 6, i32 9, i32 30, i32 29, i32 66, i32 83, i32 46, i32 91, i32 13, i32 25, i32 14, i32 43, i32 84, i32 53, i32 63, i32 10, i32 48, i32 80, i32 21, i32 56, i32 51, i32 40, i32 61, i32 50, i32 54, i32 65, i32 42, i32 79, i32 79, i32 37, i32 50, i32 63, i32 87, i32 1, i32 80, i32 30, i32 27, i32 64, i32 6, i32 69, i32 80, i32 12, i32 54, i32 91, i32 38, i32 11, i32 33], align 4
@"\01?e2@?1??tong_fan@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 87, i32 77, i32 28, i32 83, i32 38, i32 93, i32 59, i32 54, i32 46, i32 75, i32 53, i32 68, i32 66, i32 23, i32 46, i32 11, i32 22, i32 86, i32 83, i32 33, i32 94, i32 76, i32 72, i32 30, i32 97, i32 99, i32 22, i32 87, i32 47, i32 50, i32 37, i32 85, i32 79, i32 41, i32 30, i32 76, i32 10, i32 56, i32 69, i32 25, i32 54, i32 73, i32 77, i32 38, i32 33, i32 86, i32 67, i32 11, i32 78, i32 66, i32 60, i32 52, i32 100, i32 80, i32 7, i32 70, i32 9, i32 49, i32 19, i32 83, i32 96, i32 85, i32 4, i32 42, i32 63, i32 15, i32 32, i32 8, i32 25, i32 100, i32 13, i32 64, i32 6, i32 75, i32 94, i32 18, i32 36, i32 19, i32 58, i32 54, i32 63, i32 7, i32 22, i32 14, i32 48, i32 69, i32 64, i32 61, i32 90, i32 34, i32 96, i32 18, i32 85, i32 23, i32 54, i32 68, i32 32, i32 98, i32 77, i32 39, i32 71, i32 97, i32 94, i32 31, i32 42, i32 53, i32 41, i32 80, i32 23, i32 97, i32 12, i32 41, i32 11, i32 34, i32 57, i32 84, i32 90, i32 38, i32 12, i32 91, i32 98, i32 4, i32 93, i32 2, i32 3, i32 31, i32 9, i32 91, i32 38, i32 17, i32 34, i32 78, i32 71, i32 3, i32 57, i32 79, i32 49, i32 46, i32 54, i32 57, i32 85, i32 84, i32 83, i32 16, i32 2, i32 83, i32 58, i32 100, i32 84, i32 17, i32 69, i32 34, i32 62, i32 87, i32 45, i32 15, i32 4, i32 56, i32 42, i32 68, i32 99, i32 79, i32 70, i32 28, i32 92, i32 53, i32 84, i32 4, i32 87, i32 63, i32 92, i32 82, i32 19, i32 27, i32 42, i32 25, i32 69, i32 21, i32 84, i32 85, i32 48, i32 62, i32 37, i32 60, i32 30, i32 7, i32 21, i32 7, i32 91, i32 27, i32 49, i32 96, i32 60, i32 81, i32 53, i32 20, i32 21, i32 91, i32 43, i32 74, i32 25, i32 70, i32 97, i32 94, i32 4, i32 27, i32 24, i32 8, i32 3, i32 69, i32 24, i32 99, i32 41, i32 40, i32 56, i32 58, i32 79, i32 85, i32 79, i32 63, i32 2, i32 36, i32 18, i32 95, i32 9, i32 43, i32 25, i32 57, i32 43, i32 80, i32 21, i32 99, i32 64, i32 21, i32 39, i32 78, i32 86, i32 23, i32 69, i32 66, i32 80, i32 41, i32 18, i32 5, i32 69, i32 28, i32 85, i32 17, i32 49, i32 80, i32 94, i32 12, i32 58, i32 98, i32 18, i32 19, i32 36, i32 46, i32 63, i32 24, i32 85, i32 21, i32 93, i32 50, i32 66, i32 87, i32 28, i32 86, i32 57, i32 45, i32 49, i32 52, i32 74, i32 54, i32 17, i32 34, i32 19, i32 64, i32 89, i32 13, i32 13, i32 89, i32 97, i32 54, i32 59, i32 55, i32 10, i32 1, i32 16, i32 45, i32 60, i32 61, i32 22, i32 58, i32 72, i32 22, i32 83, i32 5, i32 95, i32 90, i32 71, i32 30, i32 50, i32 17, i32 17, i32 61, i32 58, i32 79, i32 93, i32 90, i32 54, i32 87, i32 84, i32 39, i32 66, i32 45, i32 98, i32 49, i32 46, i32 12, i32 14, i32 52, i32 90, i32 33, i32 70, i32 77, i32 32, i32 49, i32 67, i32 26, i32 88, i32 94, i32 84, i32 38, i32 82, i32 72, i32 36, i32 41, i32 97, i32 22, i32 17, i32 63, i32 93, i32 96, i32 73, i32 41, i32 79, i32 49, i32 41, i32 52, i32 98, i32 51, i32 83, i32 56, i32 61, i32 71, i32 63, i32 37, i32 100, i32 60, i32 83, i32 3, i32 90, i32 74, i32 10, i32 83, i32 40, i32 80, i32 58, i32 50, i32 34, i32 72, i32 99, i32 75, i32 78, i32 63, i32 2, i32 97, i32 29, i32 10, i32 37, i32 26, i32 78, i32 74, i32 90, i32 32, i32 2, i32 10, i32 86, i32 68, i32 24, i32 25, i32 36, i32 79, i32 85, i32 66, i32 80, i32 55, i32 64, i32 19, i32 59, i32 6, i32 11, i32 57, i32 78, i32 39, i32 29, i32 53, i32 80, i32 79, i32 55, i32 46, i32 4, i32 16, i32 12, i32 70, i32 38, i32 56, i32 42, i32 1, i32 85, i32 4, i32 83, i32 68, i32 57, i32 8, i32 88, i32 51, i32 85, i32 81, i32 41, i32 29, i32 59, i32 96, i32 64, i32 74, i32 35, i32 6, i32 3, i32 37, i32 77, i32 68, i32 31, i32 100, i32 36, i32 91, i32 61, i32 50, i32 27, i32 55, i32 2, i32 87, i32 100, i32 50, i32 53, i32 23, i32 51, i32 38, i32 45, i32 85, i32 24, i32 49, i32 23, i32 30, i32 69, i32 78, i32 69, i32 28, i32 95, i32 86, i32 98, i32 37, i32 21, i32 43, i32 49, i32 26, i32 18, i32 64, i32 57, i32 75, i32 42, i32 51, i32 35, i32 17, i32 36, i32 7, i32 1, i32 40, i32 90, i32 89, i32 49, i32 15, i32 90, i32 95, i32 96, i32 67, i32 4, i32 53, i32 85, i32 25, i32 95, i32 73, i32 97, i32 45, i32 5, i32 65, i32 73, i32 9, i32 74, i32 57, i32 96, i32 7, i32 48, i32 88, i32 65, i32 71, i32 26, i32 87, i32 62, i32 97, i32 68, i32 80, i32 39, i32 80, i32 65, i32 38, i32 20, i32 21, i32 28, i32 2, i32 48, i32 38, i32 9, i32 49, i32 38, i32 35, i32 60, i32 87, i32 46, i32 4, i32 60, i32 38, i32 32, i32 10, i32 1, i32 24, i32 74, i32 54, i32 76, i32 67, i32 70, i32 12, i32 45, i32 85, i32 71, i32 21, i32 19, i32 37, i32 18, i32 60, i32 12, i32 37, i32 68, i32 89, i32 9, i32 49, i32 27, i32 93, i32 37, i32 63, i32 9, i32 54, i32 51, i32 96, i32 25, i32 22, i32 28, i32 43, i32 93, i32 1, i32 98, i32 47, i32 95, i32 97, i32 29, i32 96, i32 96, i32 28, i32 5, i32 69, i32 44, i32 93, i32 5, i32 63, i32 53, i32 81, i32 61, i32 9, i32 37, i32 10, i32 67, i32 83, i32 35, i32 68, i32 57, i32 27, i32 51, i32 88, i32 96, i32 68, i32 41, i32 78, i32 7, i32 6, i32 79, i32 56, i32 6, i32 63, i32 64, i32 94, i32 94, i32 53, i32 98, i32 80, i32 31, i32 45, i32 88, i32 27, i32 1, i32 10, i32 15, i32 16, i32 80, i32 48, i32 24, i32 75, i32 10, i32 35, i32 77, i32 71, i32 48, i32 27, i32 19, i32 72, i32 74, i32 8, i32 14, i32 91, i32 79, i32 2, i32 88, i32 20, i32 53, i32 67, i32 68, i32 53, i32 20, i32 61, i32 28, i32 87, i32 87, i32 24, i32 64, i32 21, i32 54, i32 76, i32 16, i32 5, i32 63, i32 89, i32 100, i32 6, i32 44, i32 19, i32 88, i32 89, i32 71, i32 93, i32 45, i32 35, i32 24, i32 35, i32 75, i32 39, i32 47, i32 65, i32 78, i32 67, i32 57, i32 26, i32 29, i32 77, i32 98, i32 100, i32 7, i32 42, i32 15, i32 59, i32 69, i32 80, i32 45, i32 42, i32 63, i32 46, i32 23, i32 13, i32 100, i32 65, i32 47, i32 43, i32 60, i32 62, i32 16, i32 16, i32 60, i32 98, i32 30, i32 88, i32 24, i32 48, i32 15, i32 81, i32 77, i32 93, i32 10, i32 4, i32 19, i32 9, i32 10, i32 51, i32 33, i32 98, i32 96, i32 41, i32 13, i32 45, i32 26, i32 3, i32 74, i32 17, i32 83, i32 77, i32 95, i32 95, i32 2, i32 65, i32 83, i32 59, i32 58, i32 81, i32 24, i32 68, i32 34, i32 27, i32 86, i32 40, i32 6, i32 45, i32 48, i32 8, i32 21, i32 73, i32 77, i32 22, i32 32, i32 7, i32 18, i32 80, i32 10, i32 46, i32 60, i32 91, i32 54, i32 12, i32 73, i32 59, i32 35, i32 71, i32 9, i32 79, i32 34, i32 81, i32 61, i32 5, i32 73, i32 40, i32 80, i32 1, i32 7, i32 35, i32 83, i32 36, i32 83, i32 54, i32 50, i32 65, i32 94, i32 29, i32 97, i32 92, i32 15, i32 17, i32 42, i32 35, i32 23, i32 65, i32 80, i32 52, i32 32, i32 97, i32 70, i32 55, i32 63, i32 63, i32 6, i32 18, i32 83, i32 15, i32 92, i32 57, i32 39, i32 21, i32 98, i32 33, i32 98, i32 38, i32 52, i32 7, i32 40, i32 29, i32 72, i32 41, i32 52, i32 41, i32 87, i32 43, i32 50, i32 61, i32 52, i32 68, i32 48, i32 69, i32 89, i32 31, i32 45, i32 83, i32 22, i32 35, i32 51, i32 56, i32 26, i32 13, i32 59, i32 94, i32 51, i32 69, i32 41, i32 21, i32 31, i32 68, i32 24, i32 22, i32 97, i32 36, i32 57, i32 26, i32 89, i32 15, i32 82, i32 85, i32 34, i32 10, i32 47, i32 10, i32 6, i32 71, i32 68, i32 60, i32 25, i32 42, i32 34, i32 6, i32 67, i32 77, i32 14, i32 79, i32 17, i32 39, i32 65, i32 97, i32 93, i32 72, i32 66, i32 28, i32 57, i32 35, i32 87, i32 83, i32 70, i32 92, i32 69, i32 3, i32 26, i32 76, i32 14, i32 22, i32 16, i32 52, i32 64, i32 32, i32 70, i32 35, i32 96, i32 82, i32 99, i32 16, i32 96, i32 14, i32 67, i32 17, i32 71, i32 71, i32 65, i32 52, i32 65, i32 33, i32 44, i32 31, i32 10, i32 92, i32 57, i32 17, i32 13, i32 100, i32 20, i32 16, i32 97, i32 31, i32 73, i32 70, i32 22, i32 59, i32 64, i32 83, i32 68, i32 4, i32 21, i32 38, i32 74, i32 34, i32 37, i32 55, i32 94, i32 1, i32 80, i32 80, i32 86, i32 20, i32 2, i32 55, i32 47, i32 37, i32 91, i32 43, i32 23, i32 97, i32 13, i32 21, i32 68, i32 1, i32 62, i32 5, i32 9, i32 52, i32 7, i32 83, i32 13, i32 65, i32 71, i32 72, i32 54, i32 14, i32 19, i32 91, i32 92, i32 27, i32 10, i32 12, i32 95, i32 93, i32 37, i32 18, i32 97, i32 17, i32 77, i32 8, i32 28, i32 86, i32 73, i32 80, i32 20, i32 40, i32 18, i32 7, i32 31, i32 27, i32 41, i32 40, i32 54], align 4
@"\01?e1@?1??mai_meng@@YAHXZ@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 -10, i32 34, i32 -86, i32 11, i32 -89, i32 16, i32 72, i32 -49, i32 -47, i32 -51, i32 -90, i32 -87, i32 10, i32 83, i32 -86, i32 -69, i32 -64, i32 30, i32 -4, i32 -88, i32 55, i32 -32, i32 75, i32 73, i32 -66, i32 -15, i32 -53, i32 83, i32 -52, i32 -46, i32 19, i32 17, i32 -20, i32 -12, i32 40, i32 -25, i32 -28, i32 -93, i32 91, i32 -75, i32 -33, i32 85, i32 -86, i32 -87, i32 -50, i32 84, i32 -62, i32 10, i32 -65, i32 96, i32 -83, i32 -20, i32 91, i32 54, i32 -5, i32 75, i32 36, i32 -15, i32 -2, i32 -23, i32 29, i32 -32, i32 69, i32 -73, i32 26, i32 49, i32 -82, i32 -45, i32 -35, i32 91, i32 15, i32 12, i32 20, i32 25, i32 -16, i32 -86, i32 -21, i32 -61, i32 84, i32 -99, i32 69, i32 78, i32 5, i32 39, i32 35, i32 53, i32 63, i32 -95, i32 -84, i32 88, i32 87, i32 -10, i32 -17, i32 8, i32 15, i32 -3, i32 -94, i32 21, i32 18, i32 -59, i32 9, i32 -56, i32 2, i32 -48, i32 -88, i32 38, i32 29, i32 -24, i32 -31, i32 6, i32 90, i32 -1, i32 8, i32 -76, i32 -5, i32 77, i32 12, i32 -97, i32 -20, i32 -91, i32 -65, i32 -81, i32 73, i32 -58, i32 -12, i32 -28, i32 27, i32 -45, i32 24, i32 59, i32 -26, i32 89, i32 62, i32 93, i32 -72, i32 19, i32 -61, i32 76, i32 33, i32 50, i32 87, i32 85, i32 -22, i32 19, i32 -53, i32 12, i32 -40, i32 37, i32 -40, i32 70, i32 5, i32 46, i32 -69, i32 39, i32 71, i32 -98, i32 -84, i32 -83, i32 53, i32 31, i32 -11, i32 36, i32 -51, i32 49, i32 39, i32 -64, i32 -35, i32 -81, i32 27, i32 -70, i32 -59, i32 9, i32 70, i32 48, i32 -94, i32 -76, i32 -80, i32 -16, i32 -42, i32 40, i32 32, i32 83, i32 87, i32 84, i32 78, i32 5, i32 53, i32 -79, i32 -6, i32 -61, i32 -44, i32 55, i32 -86, i32 -28, i32 6, i32 -6, i32 -70, i32 -64, i32 56, i32 7, i32 74, i32 -95, i32 38, i32 77, i32 13, i32 14, i32 68, i32 -20, i32 11, i32 0, i32 82, i32 -4, i32 -22, i32 -60, i32 -22, i32 6, i32 4, i32 -10, i32 -40, i32 -98, i32 87, i32 -50, i32 -57, i32 -46, i32 98, i32 -59, i32 8, i32 48, i32 84, i32 37, i32 -53, i32 23, i32 -99, i32 -100, i32 54, i32 95, i32 54, i32 -90, i32 -45, i32 47, i32 -41, i32 -90, i32 -51, i32 -66, i32 68, i32 -6, i32 -27, i32 67, i32 38, i32 3, i32 -21, i32 -94, i32 -75, i32 -50, i32 -31, i32 -95, i32 -44, i32 94, i32 -75, i32 -23, i32 -28, i32 -5, i32 -41, i32 69, i32 -9, i32 4, i32 -59, i32 -79, i32 -17, i32 -31, i32 -46, i32 -39, i32 -56, i32 -67, i32 -53, i32 -68, i32 -43, i32 75, i32 56, i32 -62, i32 77, i32 -20, i32 65, i32 95, i32 34, i32 59, i32 -29, i32 -10, i32 -52, i32 -7, i32 93, i32 84, i32 14, i32 30, i32 16, i32 -43, i32 82, i32 -85, i32 -8, i32 -25, i32 12, i32 -54, i32 -59, i32 13, i32 28, i32 -53, i32 23, i32 -91, i32 -27, i32 -6, i32 -20, i32 -67, i32 -12, i32 -64, i32 27, i32 87, i32 -82, i32 26, i32 -63, i32 -34, i32 47, i32 -14, i32 -30, i32 44, i32 50, i32 53, i32 -94, i32 -5, i32 -39, i32 85, i32 -32, i32 -62, i32 8, i32 70, i32 -20, i32 -44, i32 3, i32 -7, i32 -35, i32 -45, i32 37, i32 -89, i32 13, i32 -91, i32 -55, i32 10, i32 -35, i32 58, i32 70, i32 59, i32 -22, i32 80, i32 63, i32 98, i32 58, i32 72, i32 -81, i32 -59, i32 -67, i32 65, i32 47, i32 48, i32 44, i32 85, i32 -73, i32 -39, i32 -24, i32 39, i32 39, i32 9, i32 0, i32 16, i32 69, i32 39, i32 16, i32 89, i32 70, i32 -54, i32 0, i32 -61, i32 -47, i32 -84, i32 82, i32 -70, i32 -90, i32 3, i32 -75, i32 -38, i32 -49, i32 23, i32 -50, i32 -73, i32 48, i32 38, i32 93, i32 -79, i32 87, i32 78, i32 -84, i32 69, i32 -93, i32 44, i32 -78, i32 8, i32 -52, i32 66, i32 -45, i32 18, i32 29, i32 -74, i32 -6, i32 88, i32 33, i32 -80, i32 -84, i32 -44, i32 -15, i32 -4, i32 30, i32 7, i32 -54, i32 36, i32 -4, i32 -72, i32 -7, i32 -93, i32 10, i32 1, i32 82, i32 47, i32 85, i32 -79, i32 -12, i32 23, i32 43, i32 70, i32 -89, i32 85, i32 -91, i32 -61, i32 -5, i32 42, i32 13, i32 -52, i32 39, i32 -95, i32 -99, i32 -15, i32 71, i32 60, i32 69, i32 -41, i32 -81, i32 13, i32 -92, i32 -43, i32 72, i32 -55, i32 -48, i32 59, i32 49, i32 -32, i32 -73, i32 -2, i32 -31, i32 19, i32 58, i32 -72, i32 -87, i32 20, i32 91, i32 25, i32 12, i32 -54, i32 30, i32 -80, i32 -69, i32 0, i32 4, i32 49, i32 25, i32 80, i32 -82, i32 -59, i32 -63, i32 74, i32 63, i32 -68, i32 -44, i32 -92, i32 -9, i32 25, i32 92, i32 56, i32 -33, i32 -14, i32 -6, i32 26, i32 -23, i32 -87, i32 92, i32 -74, i32 -97, i32 -2, i32 -53, i32 -58, i32 -15, i32 -2, i32 -90, i32 -41, i32 -87, i32 -80, i32 75, i32 -79, i32 -15, i32 -3, i32 61, i32 -6, i32 52, i32 33, i32 39, i32 17, i32 -3, i32 82, i32 -83, i32 -70, i32 25, i32 4, i32 57, i32 -95, i32 -8, i32 89, i32 -92, i32 -11, i32 -18, i32 57, i32 -56, i32 -53, i32 86, i32 -10, i32 51, i32 -49, i32 -85, i32 -96, i32 13, i32 -71, i32 6, i32 30, i32 45, i32 -63, i32 -62, i32 -74, i32 -16, i32 -55, i32 -47, i32 16, i32 81, i32 -97, i32 43, i32 36, i32 -21, i32 71, i32 -4, i32 -41, i32 -48, i32 5, i32 70, i32 -75, i32 -42, i32 45, i32 61, i32 -46, i32 -42, i32 -24, i32 77, i32 -45, i32 -64, i32 24, i32 82, i32 98, i32 -39, i32 -19, i32 -89, i32 42, i32 -26, i32 39, i32 98, i32 -75, i32 49, i32 63, i32 69, i32 25, i32 -86, i32 90, i32 15, i32 71, i32 -35, i32 49, i32 94, i32 -32, i32 15, i32 -13, i32 62, i32 -17, i32 -37, i32 54, i32 90, i32 -59, i32 -36, i32 -15, i32 69, i32 17, i32 -64, i32 -44, i32 -60, i32 85, i32 -33, i32 64, i32 18, i32 57, i32 79, i32 3, i32 -91, i32 -44, i32 -65, i32 52, i32 36, i32 -52, i32 -47, i32 -27, i32 8, i32 6, i32 -78, i32 65, i32 3, i32 91, i32 -13, i32 -22, i32 72, i32 -94, i32 75, i32 1, i32 74, i32 50, i32 19, i32 -63, i32 34, i32 65, i32 -96, i32 9, i32 93, i32 -97, i32 68, i32 -47, i32 -44, i32 47, i32 90, i32 55, i32 24, i32 69, i32 -51, i32 -95, i32 51, i32 -84, i32 26, i32 -24, i32 -65, i32 -58, i32 -48, i32 2, i32 -20, i32 80, i32 -10, i32 46, i32 67, i32 76, i32 7, i32 82, i32 35, i32 -1, i32 39, i32 50, i32 -82, i32 90, i32 5, i32 -16, i32 -15, i32 43, i32 96, i32 43, i32 1, i32 67, i32 -45, i32 51, i32 -40, i32 82, i32 49, i32 2, i32 -59, i32 -27, i32 62, i32 80, i32 43, i32 -60, i32 -25, i32 49, i32 90, i32 3, i32 83, i32 -22, i32 -4, i32 32, i32 27, i32 -44, i32 87, i32 7, i32 63, i32 38, i32 44, i32 45, i32 11, i32 -45, i32 0, i32 55, i32 -86, i32 -62, i32 -30, i32 1, i32 -31, i32 36, i32 98, i32 -67, i32 73, i32 -36, i32 -27, i32 81, i32 71, i32 47, i32 -38, i32 21, i32 49, i32 28, i32 20, i32 -56, i32 -89, i32 16, i32 -71, i32 -44, i32 -80, i32 27, i32 34, i32 -50, i32 87, i32 74, i32 42, i32 81, i32 -8, i32 -8, i32 54, i32 -67, i32 -25, i32 -85, i32 -86, i32 6, i32 87, i32 89, i32 37, i32 -92, i32 3, i32 95, i32 85, i32 90, i32 -7, i32 -72, i32 -83, i32 -16, i32 95, i32 -62, i32 9, i32 29, i32 -64, i32 87, i32 -10, i32 56, i32 -21, i32 2, i32 -8, i32 -1, i32 -27, i32 -23, i32 8, i32 -76, i32 39, i32 -47, i32 -83, i32 -48, i32 -67, i32 -17, i32 -11, i32 48, i32 -99, i32 -45, i32 -93, i32 87, i32 -39, i32 11, i32 -47, i32 60, i32 -64, i32 26, i32 -100, i32 98, i32 2, i32 -72, i32 -85, i32 35, i32 -66, i32 -31, i32 -75, i32 -56, i32 3, i32 88, i32 -29, i32 68, i32 50, i32 37, i32 14, i32 -59, i32 2, i32 -59, i32 87, i32 66, i32 57, i32 -35, i32 19, i32 49, i32 -20, i32 93, i32 19, i32 -51, i32 57, i32 4, i32 -80, i32 -4, i32 -67, i32 -85, i32 21, i32 -82, i32 -91, i32 -82, i32 43, i32 -40, i32 46, i32 -95, i32 55, i32 -41, i32 -45, i32 -17, i32 92, i32 -22, i32 87, i32 16, i32 -72, i32 -19, i32 6, i32 -47, i32 -96, i32 21, i32 -86, i32 32, i32 -76, i32 11, i32 -4, i32 -15, i32 30, i32 -21, i32 -11, i32 45, i32 -85, i32 -73, i32 99, i32 -35, i32 32, i32 -55, i32 54, i32 -69, i32 9, i32 28, i32 83, i32 -61, i32 34, i32 -8, i32 91, i32 -57, i32 57, i32 -97, i32 94, i32 7, i32 33, i32 59, i32 -14, i32 19, i32 19, i32 57, i32 -80, i32 56, i32 -69, i32 -68, i32 7, i32 -84, i32 -16, i32 -74, i32 -94, i32 68, i32 -15, i32 -85, i32 11, i32 31, i32 -61, i32 -16, i32 38, i32 -29, i32 8, i32 19, i32 -15, i32 -42, i32 78, i32 41, i32 68, i32 -21, i32 45, i32 81, i32 -28, i32 94, i32 -96, i32 74, i32 -42, i32 15, i32 81, i32 68, i32 -38, i32 -66, i32 -83, i32 74, i32 22, i32 -1, i32 -68, i32 -4, i32 83, i32 65, i32 31, i32 -43, i32 -76, i32 42, i32 83, i32 31, i32 -63, i32 -15, i32 28, i32 -53, i32 74, i32 80, i32 31, i32 -86, i32 -60, i32 -92, i32 -53, i32 -68, i32 -8, i32 -58, i32 -24, i32 -67, i32 -15, i32 -53, i32 94, i32 -14, i32 53, i32 -94, i32 26, i32 -80, i32 21, i32 -18, i32 57, i32 99, i32 89, i32 48, i32 51, i32 -49, i32 -84, i32 1, i32 79, i32 -85, i32 85, i32 -100, i32 -52, i32 -49, i32 -84, i32 37, i32 12, i32 -10, i32 -6, i32 59, i32 -73, i32 90, i32 -77, i32 7, i32 -5, i32 -75, i32 62], align 4
@"\01?e1@?1??Blink@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 7, i32 5, i32 8, i32 5, i32 9, i32 7, i32 6, i32 1, i32 5, i32 7, i32 9, i32 1, i32 3, i32 3, i32 3, i32 6, i32 4, i32 7, i32 9, i32 5, i32 2, i32 9, i32 1, i32 3, i32 2, i32 3, i32 3, i32 3, i32 1, i32 7, i32 8, i32 7, i32 1, i32 1, i32 7, i32 9, i32 2, i32 2, i32 5, i32 3, i32 6, i32 1, i32 4, i32 7, i32 3, i32 6, i32 1, i32 2, i32 3, i32 4, i32 6, i32 7, i32 1, i32 5, i32 6, i32 4, i32 2, i32 5, i32 9, i32 8, i32 3, i32 8, i32 9, i32 4, i32 4, i32 8, i32 9, i32 4, i32 4, i32 8, i32 6, i32 7, i32 8, i32 4, i32 2, i32 6, i32 7, i32 8, i32 6, i32 2, i32 2, i32 3, i32 1, i32 2, i32 8, i32 1, i32 6, i32 9, i32 3, i32 6, i32 5, i32 8, i32 7, i32 6, i32 8, i32 1, i32 9, i32 6, i32 5, i32 6, i32 7, i32 1, i32 4, i32 9, i32 4, i32 3, i32 2, i32 1, i32 6, i32 6, i32 8, i32 8, i32 7, i32 3, i32 5, i32 6, i32 4, i32 4, i32 1, i32 2, i32 5, i32 3, i32 3, i32 9, i32 2, i32 4, i32 5, i32 3, i32 4, i32 2, i32 1, i32 6, i32 4, i32 5, i32 7, i32 8, i32 6, i32 2, i32 2, i32 5, i32 5, i32 2, i32 1, i32 4, i32 6, i32 7, i32 8, i32 3, i32 9, i32 1, i32 7, i32 8, i32 8, i32 3, i32 2, i32 4, i32 4, i32 6, i32 2, i32 9, i32 1, i32 8, i32 3, i32 9, i32 6, i32 9, i32 1, i32 1, i32 4, i32 9, i32 6, i32 8, i32 5, i32 9, i32 9, i32 5, i32 9, i32 5, i32 4, i32 7, i32 8, i32 5, i32 3, i32 3, i32 2, i32 8, i32 8, i32 7, i32 3, i32 7, i32 1, i32 7, i32 9, i32 7, i32 4, i32 3, i32 8, i32 3, i32 8, i32 3, i32 2, i32 4, i32 4, i32 1, i32 7, i32 6, i32 1, i32 2, i32 5, i32 5, i32 1, i32 4, i32 4, i32 2, i32 2, i32 1, i32 8, i32 5, i32 3, i32 8, i32 4, i32 5, i32 7, i32 4, i32 3, i32 6, i32 2, i32 6, i32 8, i32 7, i32 7, i32 3, i32 9, i32 8, i32 7, i32 1, i32 1, i32 8, i32 1, i32 9, i32 6, i32 5, i32 5, i32 7, i32 3, i32 5, i32 8, i32 3, i32 8, i32 3, i32 4, i32 3, i32 1, i32 8, i32 1, i32 8, i32 6, i32 6, i32 7, i32 3, i32 9, i32 5, i32 6, i32 1, i32 5, i32 7, i32 3, i32 4, i32 5, i32 3, i32 1, i32 8, i32 9, i32 5, i32 7, i32 9, i32 2, i32 6, i32 4, i32 3, i32 7, i32 4, i32 1, i32 5, i32 4, i32 2, i32 8, i32 2, i32 1, i32 7, i32 6, i32 5, i32 1, i32 8, i32 7, i32 9, i32 3, i32 1, i32 2, i32 7, i32 3, i32 2, i32 5, i32 4, i32 5, i32 8, i32 9, i32 2, i32 4, i32 2, i32 8, i32 9, i32 8, i32 2, i32 6, i32 5, i32 1, i32 3, i32 1, i32 8, i32 6, i32 2, i32 8, i32 7, i32 6, i32 4, i32 8, i32 5, i32 9, i32 2, i32 1, i32 1, i32 6, i32 7, i32 6, i32 6, i32 6, i32 2, i32 7, i32 8, i32 2, i32 1, i32 1, i32 4, i32 9, i32 7, i32 2, i32 5, i32 7, i32 8, i32 2, i32 1, i32 1, i32 4, i32 3, i32 4, i32 6, i32 5, i32 6, i32 2, i32 3, i32 5, i32 5, i32 5, i32 3, i32 7, i32 4, i32 5, i32 9, i32 3, i32 6, i32 1, i32 1, i32 7, i32 3, i32 2, i32 2, i32 3, i32 4, i32 8, i32 6, i32 5, i32 7, i32 6, i32 6, i32 5, i32 1, i32 7, i32 5, i32 5, i32 8, i32 2, i32 9, i32 9, i32 8, i32 9, i32 4, i32 1, i32 4, i32 8, i32 8, i32 2, i32 2, i32 1, i32 7, i32 1, i32 3, i32 4, i32 4, i32 5, i32 1, i32 3, i32 6, i32 1, i32 3, i32 9, i32 5, i32 8, i32 6, i32 9, i32 2, i32 9, i32 4, i32 3, i32 7, i32 3, i32 4, i32 5, i32 9, i32 4, i32 3, i32 5, i32 6, i32 8, i32 9, i32 9, i32 5, i32 3, i32 4, i32 1, i32 5, i32 9, i32 5, i32 8, i32 2, i32 1, i32 7, i32 5, i32 9, i32 8, i32 4, i32 6, i32 7, i32 3, i32 4, i32 4, i32 7, i32 8, i32 5, i32 2, i32 8, i32 8, i32 3, i32 2, i32 7, i32 5, i32 8, i32 7, i32 5, i32 8, i32 4, i32 8, i32 3, i32 7, i32 4, i32 5, i32 6, i32 1, i32 9, i32 1, i32 3, i32 8, i32 7, i32 8, i32 6, i32 7, i32 7, i32 2, i32 7, i32 9, i32 8, i32 2, i32 6, i32 3, i32 3, i32 5, i32 4, i32 4, i32 9, i32 9, i32 6, i32 2, i32 7, i32 3, i32 2, i32 9, i32 3, i32 9, i32 4, i32 4, i32 8, i32 6, i32 8, i32 9, i32 7, i32 2, i32 9, i32 4, i32 4, i32 6, i32 1, i32 8, i32 7, i32 1, i32 4, i32 9, i32 6, i32 4, i32 2, i32 3, i32 5, i32 9, i32 4, i32 6, i32 5, i32 1, i32 1, i32 3, i32 3, i32 4, i32 5, i32 6, i32 3, i32 8, i32 3, i32 8, i32 7, i32 3, i32 2, i32 5, i32 1, i32 8, i32 8, i32 2, i32 9, i32 5, i32 8, i32 2, i32 5, i32 3, i32 5, i32 5, i32 8, i32 6, i32 7, i32 9, i32 2, i32 6, i32 9, i32 6, i32 7, i32 2, i32 5, i32 6, i32 2, i32 4, i32 4, i32 3, i32 2, i32 3, i32 4, i32 8, i32 8, i32 5, i32 5, i32 5, i32 8, i32 7, i32 3, i32 8, i32 3, i32 3, i32 9, i32 7, i32 8, i32 4, i32 6, i32 1, i32 8, i32 8, i32 3, i32 7, i32 5, i32 6, i32 9, i32 6, i32 9, i32 7, i32 9, i32 4, i32 1, i32 8, i32 4, i32 1, i32 7, i32 7, i32 3, i32 9, i32 2, i32 7, i32 4, i32 2, i32 8, i32 6, i32 6, i32 5, i32 5, i32 7, i32 5, i32 1, i32 4, i32 3, i32 4, i32 7, i32 6, i32 4, i32 9, i32 9, i32 1, i32 6, i32 6, i32 7, i32 5, i32 8, i32 4, i32 6, i32 7, i32 4, i32 8, i32 6, i32 4, i32 8, i32 9, i32 4, i32 3, i32 4, i32 7, i32 3, i32 6, i32 3, i32 7, i32 3, i32 1, i32 6, i32 7, i32 7, i32 9, i32 4, i32 9, i32 2, i32 9, i32 1, i32 6, i32 2, i32 9, i32 3, i32 3, i32 5, i32 6, i32 6, i32 9, i32 9, i32 9, i32 4, i32 7, i32 7, i32 1, i32 9, i32 9, i32 7, i32 9, i32 5, i32 4, i32 6, i32 4, i32 4, i32 6, i32 6, i32 7, i32 9, i32 5, i32 4, i32 5, i32 4, i32 7, i32 9, i32 9, i32 6, i32 4, i32 7, i32 5, i32 3, i32 3, i32 9, i32 3, i32 7, i32 8, i32 6, i32 6, i32 7, i32 5, i32 6, i32 4, i32 5, i32 1, i32 4, i32 3, i32 5, i32 3, i32 4, i32 5, i32 6, i32 2, i32 2, i32 3, i32 5, i32 4, i32 3, i32 5, i32 6, i32 3, i32 7, i32 9, i32 8, i32 6, i32 1, i32 4, i32 9, i32 1, i32 3, i32 7, i32 6, i32 6, i32 2, i32 4, i32 3, i32 4, i32 7, i32 3, i32 7, i32 8, i32 4, i32 5, i32 2, i32 4, i32 4, i32 6, i32 3, i32 8, i32 1, i32 4, i32 1, i32 4, i32 8, i32 8, i32 9, i32 2, i32 3, i32 6, i32 9, i32 5, i32 9, i32 2, i32 6, i32 7, i32 1, i32 9, i32 1, i32 9, i32 5, i32 5, i32 4, i32 1, i32 3, i32 2, i32 4, i32 6, i32 9, i32 1, i32 7, i32 8, i32 1, i32 8, i32 6, i32 8, i32 4, i32 7, i32 4, i32 3, i32 1, i32 7, i32 7, i32 4, i32 7, i32 8, i32 1, i32 8, i32 5, i32 7, i32 4, i32 1, i32 5, i32 2, i32 8, i32 9, i32 6, i32 4, i32 6, i32 3, i32 7, i32 1, i32 4, i32 3, i32 3, i32 9, i32 7, i32 2, i32 5, i32 2, i32 2, i32 3, i32 5, i32 9, i32 8, i32 2, i32 1, i32 3, i32 8, i32 6, i32 7, i32 8, i32 3, i32 1, i32 9, i32 3, i32 3, i32 8, i32 6, i32 8, i32 8, i32 8, i32 7, i32 1, i32 8, i32 8, i32 2, i32 9, i32 9, i32 3, i32 6, i32 6, i32 5, i32 2, i32 8, i32 7, i32 8, i32 2, i32 3, i32 5, i32 4, i32 3, i32 3, i32 1, i32 4, i32 6, i32 1, i32 3, i32 9, i32 4, i32 2, i32 6, i32 7, i32 9, i32 5, i32 7, i32 3, i32 4, i32 1, i32 3, i32 9, i32 5, i32 2, i32 6, i32 1, i32 9, i32 6, i32 7, i32 8, i32 2, i32 5, i32 4, i32 4, i32 8, i32 1, i32 4, i32 4, i32 6, i32 3, i32 6, i32 1, i32 9, i32 8, i32 7, i32 2, i32 7, i32 1, i32 4, i32 3, i32 1, i32 5, i32 7, i32 2, i32 3, i32 1, i32 8, i32 7, i32 8, i32 4, i32 2, i32 5, i32 1, i32 9, i32 4, i32 3, i32 6, i32 1, i32 6, i32 2, i32 4, i32 9, i32 1, i32 6, i32 3, i32 8, i32 4, i32 1, i32 2, i32 2, i32 7, i32 4, i32 6, i32 6, i32 8, i32 1, i32 1, i32 7, i32 8, i32 6, i32 3, i32 8, i32 7, i32 3, i32 3, i32 8, i32 5, i32 9, i32 2, i32 3, i32 9, i32 7, i32 7, i32 9, i32 5, i32 6, i32 7, i32 6, i32 9, i32 9, i32 1, i32 4, i32 2, i32 9, i32 5, i32 5, i32 5, i32 4, i32 6, i32 3, i32 4, i32 9, i32 8, i32 5, i32 5, i32 1, i32 7, i32 2, i32 1, i32 5, i32 7], align 4
@"\01?ez1@?1??Blink@@YAHH@Z@3PADA" = private unnamed_addr constant [1010 x i8] c"LRLRRLLLRRLRLRLRRRRLRRRLRLRLLLRRLRRLRLRRRRRLRLLLLRLRRLLLRRRLRLLLLRRRRLRLLRRRRLLRRRRRRRLLRRRLLLRLRLLLLLLRLRRRLLRLRLLRLLRLLRRLLLRLLRLRLRLLRRRRLRRLRRLLRLLRRLLRRLRRLRRRLRRLLRRLLRRLLLRLLLLRRRRRLRRRLRRRRLRRLRRLLRLLLRLLRRLRRRRRRRLRRRRLRRLRRRRRRLLRLRRLRLLLRLRRLRRLLLRRLRLRLLRLLRRLRRRLRRLLLRLRLRRLRLLRRRLRLRRLLLLLLLRLLLRLRLRLRLRLLLRRLLLRRRRLRRRRLLRRRLLLRRRRLLLRRRLRLLRLLLRLRLLLLLLRLLLLRRRRLRRRRLLLRRLLLLRLLRLLLRLLRLLLLLRRRRLRRRLLLLRRRRLLLLRRRRRRRRRRLRLLLLRRRRRLRLRLLLLLLRRLRRRLLRLRLRRRLRRRRLLLLLRLRLLLLLLLRLLRRRLRRRRRRLRRRRRRLLRRLRLRLLRLLRLLRLRLLRRRRLRRLLRLLRLLLLRLLLLRRLLRLLLLLRRLRRRRLLLRLLLLRLLLLRRLLRLLRRLLLLRLLLRRRLLRRRLLRLLRRLRLLLLLRLRRLLLLLRRRLRLLLLLLLLLRRLLRLRLRLLLLRRLRLLRRRRRLLRRLRRRLRLRRRLRLLRLRLRRRLRRRRLRLRRRLRRLRLLRLRRRRLLRLRLRRRRRLRRLLRLRRLLRLLRRLRRRLRLLRRRLRRLLLRRRLRRLLRRLLLLRLRLRRRLRLRLLLRLRLRLRLRRLLRRLLRRLRLLRLRRRRRRRRRLLRRLLLRLLLLLLLLRRRRLLLLLRRRRLRLLRRLLRLLLRLLRLRLLRLRRRLLLLLRLRLLLLLRLRRRRRRRRLLRRLRLRRRRRLLLRLLLRLLLRRRRRRLRRRLRRLLRRLLRRRLLRRRLRLLLLLLLRRLLRLRRLLLRLRRLRRRLLRLLLLLLLRRRLL\00\00\00\00\00\00\00\00\00\00\00", align 1
@"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A" = internal global [20010 x %struct.node_hay] zeroinitializer, align 4
@"\01?sb1@?1??good_feel@@YAHH@Z@3PAHA" = private unnamed_addr constant [1009 x i32] [i32 10, i32 32, i32 83, i32 63, i32 95, i32 26, i32 15, i32 81, i32 47, i32 90, i32 68, i32 63, i32 58, i32 83, i32 46, i32 13, i32 1, i32 40, i32 75, i32 97, i32 75, i32 33, i32 57, i32 3, i32 44, i32 48, i32 81, i32 41, i32 75, i32 20, i32 8, i32 28, i32 34, i32 56, i32 54, i32 34, i32 68, i32 81, i32 42, i32 16, i32 72, i32 66, i32 5, i32 68, i32 62, i32 82, i32 97, i32 35, i32 27, i32 8, i32 51, i32 9, i32 39, i32 66, i32 33, i32 5, i32 88, i32 56, i32 8, i32 4, i32 63, i32 16, i32 64, i32 50, i32 58, i32 26, i32 56, i32 44, i32 13, i32 27, i32 91, i32 24, i32 38, i32 23, i32 75, i32 91, i32 75, i32 63, i32 83, i32 68, i32 50, i32 78, i32 37, i32 67, i32 79, i32 55, i32 83, i32 57, i32 88, i32 59, i32 29, i32 24, i32 48, i32 93, i32 67, i32 77, i32 87, i32 51, i32 42, i32 34, i32 88, i32 67, i32 57, i32 48, i32 59, i32 63, i32 91, i32 53, i32 58, i32 96, i32 1, i32 89, i32 58, i32 94, i32 58, i32 29, i32 7, i32 77, i32 99, i32 59, i32 45, i32 46, i32 67, i32 4, i32 4, i32 72, i32 5, i32 92, i32 55, i32 94, i32 21, i32 63, i32 30, i32 25, i32 20, i32 72, i32 98, i32 7, i32 60, i32 90, i32 60, i32 99, i32 66, i32 77, i32 36, i32 40, i32 22, i32 52, i32 91, i32 6, i32 93, i32 28, i32 58, i32 72, i32 43, i32 79, i32 62, i32 23, i32 92, i32 43, i32 96, i32 48, i32 25, i32 26, i32 4, i32 36, i32 55, i32 82, i32 11, i32 44, i32 47, i32 85, i32 19, i32 67, i32 35, i32 10, i32 21, i32 78, i32 52, i32 64, i32 14, i32 68, i32 43, i32 16, i32 43, i32 94, i32 4, i32 42, i32 45, i32 2, i32 62, i32 44, i32 8, i32 41, i32 72, i32 11, i32 32, i32 96, i32 91, i32 71, i32 71, i32 2, i32 60, i32 85, i32 7, i32 57, i32 13, i32 65, i32 2, i32 47, i32 41, i32 90, i32 7, i32 82, i32 42, i32 25, i32 27, i32 84, i32 25, i32 23, i32 48, i32 27, i32 9, i32 61, i32 16, i32 33, i32 33, i32 35, i32 41, i32 62, i32 63, i32 47, i32 69, i32 76, i32 31, i32 80, i32 68, i32 43, i32 55, i32 5, i32 25, i32 98, i32 37, i32 86, i32 84, i32 6, i32 53, i32 87, i32 96, i32 50, i32 4, i32 75, i32 98, i32 76, i32 57, i32 24, i32 1, i32 60, i32 19, i32 37, i32 48, i32 87, i32 61, i32 40, i32 47, i32 44, i32 16, i32 72, i32 7, i32 98, i32 40, i32 72, i32 53, i32 56, i32 99, i32 82, i32 54, i32 13, i32 10, i32 44, i32 16, i32 58, i32 74, i32 12, i32 34, i32 52, i32 96, i32 79, i32 36, i32 59, i32 47, i32 33, i32 48, i32 23, i32 27, i32 23, i32 87, i32 96, i32 37, i32 34, i32 32, i32 88, i32 53, i32 89, i32 14, i32 95, i32 98, i32 67, i32 89, i32 18, i32 74, i32 67, i32 68, i32 42, i32 69, i32 22, i32 1, i32 14, i32 59, i32 92, i32 27, i32 73, i32 35, i32 36, i32 52, i32 35, i32 29, i32 36, i32 83, i32 13, i32 13, i32 56, i32 75, i32 93, i32 84, i32 81, i32 50, i32 53, i32 49, i32 22, i32 27, i32 1, i32 7, i32 38, i32 50, i32 29, i32 56, i32 37, i32 51, i32 52, i32 99, i32 24, i32 81, i32 16, i32 1, i32 53, i32 87, i32 3, i32 16, i32 67, i32 32, i32 62, i32 86, i32 25, i32 59, i32 63, i32 44, i32 21, i32 9, i32 54, i32 77, i32 22, i32 87, i32 7, i32 58, i32 32, i32 58, i32 18, i32 76, i32 88, i32 41, i32 75, i32 12, i32 75, i32 77, i32 7, i32 96, i32 18, i32 15, i32 54, i32 93, i32 65, i32 43, i32 81, i32 96, i32 54, i32 97, i32 88, i32 20, i32 23, i32 38, i32 14, i32 98, i32 29, i32 51, i32 93, i32 15, i32 47, i32 86, i32 91, i32 67, i32 92, i32 57, i32 80, i32 59, i32 46, i32 1, i32 78, i32 15, i32 49, i32 38, i32 33, i32 83, i32 88, i32 71, i32 10, i32 73, i32 63, i32 37, i32 19, i32 24, i32 73, i32 66, i32 55, i32 22, i32 50, i32 24, i32 4, i32 1, i32 87, i32 85, i32 94, i32 69, i32 16, i32 71, i32 83, i32 5, i32 50, i32 65, i32 90, i32 85, i32 19, i32 6, i32 95, i32 16, i32 75, i32 49, i32 13, i32 21, i32 21, i32 77, i32 62, i32 77, i32 2, i32 74, i32 77, i32 11, i32 16, i32 45, i32 79, i32 11, i32 34, i32 21, i32 93, i32 92, i32 65, i32 49, i32 78, i32 23, i32 56, i32 75, i32 84, i32 5, i32 2, i32 86, i32 42, i32 95, i32 96, i32 54, i32 16, i32 41, i32 32, i32 80, i32 59, i32 32, i32 8, i32 36, i32 66, i32 61, i32 25, i32 18, i32 77, i32 54, i32 73, i32 76, i32 37, i32 8, i32 31, i32 19, i32 99, i32 14, i32 34, i32 81, i32 49, i32 70, i32 11, i32 23, i32 86, i32 25, i32 45, i32 39, i32 33, i32 17, i32 32, i32 27, i32 82, i32 61, i32 31, i32 32, i32 39, i32 7, i32 16, i32 33, i32 75, i32 85, i32 35, i32 81, i32 14, i32 4, i32 56, i32 63, i32 68, i32 20, i32 21, i32 17, i32 74, i32 38, i32 87, i32 73, i32 42, i32 49, i32 33, i32 11, i32 31, i32 42, i32 86, i32 10, i32 46, i32 14, i32 37, i32 16, i32 63, i32 35, i32 72, i32 15, i32 90, i32 98, i32 57, i32 85, i32 38, i32 45, i32 96, i32 25, i32 55, i32 53, i32 5, i32 54, i32 87, i32 71, i32 41, i32 30, i32 26, i32 3, i32 67, i32 81, i32 34, i32 71, i32 13, i32 95, i32 62, i32 99, i32 3, i32 55, i32 70, i32 51, i32 36, i32 55, i32 15, i32 31, i32 16, i32 75, i32 94, i32 87, i32 66, i32 92, i32 2, i32 14, i32 58, i32 11, i32 29, i32 56, i32 89, i32 93, i32 83, i32 79, i32 74, i32 71, i32 46, i32 68, i32 13, i32 24, i32 73, i32 43, i32 68, i32 64, i32 16, i32 38, i32 71, i32 51, i32 84, i32 32, i32 10, i32 15, i32 50, i32 80, i32 18, i32 92, i32 5, i32 70, i32 89, i32 57, i32 62, i32 87, i32 58, i32 6, i32 88, i32 82, i32 58, i32 33, i32 22, i32 29, i32 21, i32 94, i32 13, i32 16, i32 12, i32 10, i32 84, i32 23, i32 90, i32 31, i32 9, i32 14, i32 35, i32 31, i32 5, i32 71, i32 90, i32 21, i32 57, i32 35, i32 11, i32 29, i32 47, i32 88, i32 57, i32 67, i32 8, i32 58, i32 73, i32 30, i32 81, i32 89, i32 4, i32 91, i32 97, i32 33, i32 66, i32 80, i32 93, i32 64, i32 45, i32 70, i32 7, i32 20, i32 80, i32 44, i32 19, i32 85, i32 68, i32 13, i32 99, i32 46, i32 32, i32 88, i32 73, i32 34, i32 32, i32 19, i32 12, i32 98, i32 29, i32 97, i32 42, i32 44, i32 87, i32 66, i32 11, i32 62, i32 5, i32 56, i32 1, i32 7, i32 72, i32 39, i32 43, i32 86, i32 50, i32 24, i32 30, i32 54, i32 89, i32 30, i32 68, i32 97, i32 47, i32 14, i32 51, i32 57, i32 13, i32 14, i32 53, i32 78, i32 43, i32 89, i32 35, i32 17, i32 80, i32 10, i32 36, i32 45, i32 80, i32 95, i32 91, i32 11, i32 13, i32 34, i32 88, i32 15, i32 87, i32 15, i32 74, i32 92, i32 98, i32 53, i32 32, i32 79, i32 78, i32 4, i32 36, i32 51, i32 82, i32 52, i32 37, i32 54, i32 69, i32 29, i32 67, i32 65, i32 9, i32 67, i32 43, i32 11, i32 9, i32 27, i32 90, i32 52, i32 38, i32 11, i32 80, i32 46, i32 41, i32 62, i32 86, i32 56, i32 42, i32 42, i32 98, i32 20, i32 59, i32 58, i32 68, i32 20, i32 85, i32 10, i32 1, i32 97, i32 40, i32 10, i32 50, i32 84, i32 7, i32 91, i32 38, i32 78, i32 28, i32 63, i32 7, i32 43, i32 23, i32 48, i32 36, i32 87, i32 70, i32 21, i32 82, i32 64, i32 35, i32 35, i32 51, i32 79, i32 89, i32 32, i32 16, i32 32, i32 31, i32 49, i32 38, i32 38, i32 48, i32 62, i32 77, i32 8, i32 87, i32 53, i32 33, i32 8, i32 30, i32 85, i32 14, i32 70, i32 45, i32 50, i32 72, i32 4, i32 14, i32 41, i32 21, i32 53, i32 24, i32 68, i32 16, i32 33, i32 90, i32 77, i32 93, i32 76, i32 49, i32 3, i32 95, i32 81, i32 43, i32 4, i32 38, i32 60, i32 92, i32 78, i32 5, i32 17, i32 32, i32 59, i32 90, i32 48, i32 85, i32 71, i32 73, i32 49, i32 34, i32 28, i32 69, i32 64, i32 27, i32 48, i32 27, i32 3, i32 14, i32 28, i32 67, i32 69, i32 48, i32 51, i32 92, i32 71, i32 16, i32 15, i32 95, i32 5, i32 63, i32 20, i32 40, i32 24, i32 22, i32 38, i32 5, i32 28, i32 29, i32 69, i32 91, i32 77, i32 36, i32 53, i32 7, i32 71, i32 14, i32 6, i32 25, i32 21, i32 47, i32 34, i32 4, i32 88, i32 75, i32 62, i32 61, i32 42, i32 99, i32 68, i32 22, i32 37, i32 82, i32 36, i32 29, i32 61, i32 11, i32 57, i32 62, i32 72, i32 66, i32 15, i32 7, i32 99, i32 92, i32 32, i32 24, i32 74, i32 48, i32 66, i32 99, i32 51, i32 32, i32 23, i32 59, i32 47, i32 31, i32 53, i32 84, i32 99, i32 3, i32 96, i32 37, i32 38, i32 66, i32 58, i32 5, i32 26, i32 43, i32 87, i32 55, i32 63, i32 73, i32 68, i32 34, i32 62, i32 98, i32 58, i32 22, i32 40, i32 55, i32 15, i32 33, i32 6, i32 42, i32 62, i32 12, i32 75, i32 10, i32 21, i32 80, i32 98, i32 79, i32 56, i32 43, i32 9, i32 35, i32 38, i32 4, i32 4, i32 63, i32 12], align 4
@"\01?ez@?1??main@@9@3PAY02DA" = private unnamed_addr constant [3 x [3 x i8]] [[3 x i8] c"as\00", [3 x i8] c"sd\00", [3 x i8] c"ds\00"], align 1
@"\01??_C@_05NAIFAAEC@asdsd?$AA@" = linkonce_odr unnamed_addr constant [6 x i8] c"asdsd\00", comdat, align 1

; Function Attrs: noinline nounwind
define i32 @"\01?snow_ai@@YAHQAHH@Z"(i32* %sb1, i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %sb1.addr = alloca i32*, align 4
  %q1 = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %p = alloca i32, align 4
  %q = alloca i32, align 4
  %tot = alloca i32, align 4
  %sum = alloca i32, align 4
  %b = alloca [20010 x i32], align 4
  %a = alloca [10010 x %struct.node_snow], align 4
  %q2 = alloca i32, align 4
  %k = alloca i32, align 4
  %xx = alloca i32, align 4
  %yy = alloca i32, align 4
  %temp = alloca i32, align 4
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  %k23 = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %an1 = alloca i32, align 4
  %i92 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  store i32* %sb1, i32** %sb1.addr, align 4
  store i32 0, i32* %q1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc101, %entry
  %0 = load i32, i32* %q1, align 4
  %1 = load i32, i32* %mn.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end103

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %tot, align 4
  store i32 0, i32* %sum, align 4
  %2 = bitcast [20010 x i32]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 80040, i1 false)
  store i32 0, i32* %q2, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %q2, align 4
  %cmp2 = icmp slt i32 %3, 10010
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %q2, align 4
  %arrayidx = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %4
  %l = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx, i32 0, i32 0
  store i32 0, i32* %l, align 4
  %5 = load i32, i32* %q2, align 4
  %arrayidx4 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %5
  %r = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx4, i32 0, i32 1
  store i32 0, i32* %r, align 4
  %6 = load i32, i32* %q2, align 4
  %arrayidx5 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %6
  %va = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx5, i32 0, i32 2
  store i32 0, i32* %va, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %q2, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %q2, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %8 = load i32, i32* %q1, align 4
  %9 = load i32*, i32** %sb1.addr, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %9, i32 %8
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %n, align 4
  store i32 3, i32* %m, align 4
  store i32 2, i32* %p, align 4
  store i32 4, i32* %q, align 4
  %11 = load i32, i32* %m, align 4
  store i32 %11, i32* %k, align 4
  %12 = load i32, i32* %m, align 4
  %13 = load i32, i32* %p, align 4
  %mul = mul nsw i32 %12, %13
  %14 = load i32, i32* %q, align 4
  %add = add nsw i32 %mul, %14
  %15 = load i32, i32* %n, align 4
  %rem = srem i32 %add, %15
  %add7 = add nsw i32 %rem, 1
  store i32 %add7, i32* %xx, align 4
  %16 = load i32, i32* %m, align 4
  %17 = load i32, i32* %q, align 4
  %mul8 = mul nsw i32 %16, %17
  %18 = load i32, i32* %p, align 4
  %add9 = add nsw i32 %mul8, %18
  %19 = load i32, i32* %n, align 4
  %rem10 = srem i32 %add9, %19
  %add11 = add nsw i32 %rem10, 1
  store i32 %add11, i32* %yy, align 4
  %20 = load i32, i32* %xx, align 4
  %21 = load i32, i32* %yy, align 4
  %cmp12 = icmp sgt i32 %20, %21
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %22 = load i32, i32* %xx, align 4
  store i32 %22, i32* %temp, align 4
  %23 = load i32, i32* %yy, align 4
  store i32 %23, i32* %xx, align 4
  %24 = load i32, i32* %temp, align 4
  store i32 %24, i32* %yy, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %25 = load i32, i32* %sum, align 4
  %26 = load i32, i32* %yy, align 4
  %27 = load i32, i32* %xx, align 4
  %sub = sub nsw i32 %26, %27
  %add13 = add nsw i32 %sub, 1
  %add14 = add nsw i32 %25, %add13
  store i32 %add14, i32* %sum, align 4
  %28 = load i32, i32* %xx, align 4
  %29 = load i32, i32* %tot, align 4
  %inc15 = add nsw i32 %29, 1
  store i32 %inc15, i32* %tot, align 4
  %arrayidx16 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %inc15
  %l17 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx16, i32 0, i32 0
  store i32 %28, i32* %l17, align 4
  %30 = load i32, i32* %yy, align 4
  %31 = load i32, i32* %tot, align 4
  %arrayidx18 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %31
  %r19 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx18, i32 0, i32 1
  store i32 %30, i32* %r19, align 4
  %32 = load i32, i32* %m, align 4
  %33 = load i32, i32* %tot, align 4
  %arrayidx20 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %33
  %va21 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx20, i32 0, i32 2
  store i32 %32, i32* %va21, align 4
  %34 = load i32, i32* %m, align 4
  %sub22 = sub nsw i32 %34, 1
  store i32 %sub22, i32* %k, align 4
  %35 = load i32, i32* %xx, align 4
  store i32 %35, i32* %left, align 4
  %36 = load i32, i32* %yy, align 4
  store i32 %36, i32* %right, align 4
  %37 = load i32, i32* %m, align 4
  %sub24 = sub nsw i32 %37, 1
  store i32 %sub24, i32* %k23, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc71, %if.end
  %38 = load i32, i32* %k23, align 4
  %cmp26 = icmp sge i32 %38, 1
  br i1 %cmp26, label %for.body27, label %for.end72

for.body27:                                       ; preds = %for.cond25
  %39 = load i32, i32* %k23, align 4
  %40 = load i32, i32* %p, align 4
  %mul28 = mul nsw i32 %39, %40
  %41 = load i32, i32* %q, align 4
  %add29 = add nsw i32 %mul28, %41
  %42 = load i32, i32* %n, align 4
  %rem30 = srem i32 %add29, %42
  %add31 = add nsw i32 %rem30, 1
  store i32 %add31, i32* %x, align 4
  %43 = load i32, i32* %k23, align 4
  %44 = load i32, i32* %q, align 4
  %mul32 = mul nsw i32 %43, %44
  %45 = load i32, i32* %p, align 4
  %add33 = add nsw i32 %mul32, %45
  %46 = load i32, i32* %n, align 4
  %rem34 = srem i32 %add33, %46
  %add35 = add nsw i32 %rem34, 1
  store i32 %add35, i32* %y, align 4
  %47 = load i32, i32* %x, align 4
  %48 = load i32, i32* %y, align 4
  %cmp36 = icmp sgt i32 %47, %48
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.body27
  %49 = load i32, i32* %x, align 4
  store i32 %49, i32* %temp1, align 4
  %50 = load i32, i32* %y, align 4
  store i32 %50, i32* %x, align 4
  %51 = load i32, i32* %temp1, align 4
  store i32 %51, i32* %y, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %for.body27
  %52 = load i32, i32* %x, align 4
  %53 = load i32, i32* %left, align 4
  %cmp39 = icmp slt i32 %52, %53
  br i1 %cmp39, label %if.then40, label %if.end54

if.then40:                                        ; preds = %if.end38
  %54 = load i32, i32* %x, align 4
  %55 = load i32, i32* %tot, align 4
  %inc41 = add nsw i32 %55, 1
  store i32 %inc41, i32* %tot, align 4
  %arrayidx42 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %inc41
  %l43 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx42, i32 0, i32 0
  store i32 %54, i32* %l43, align 4
  %56 = load i32, i32* %left, align 4
  %sub44 = sub nsw i32 %56, 1
  %57 = load i32, i32* %tot, align 4
  %arrayidx45 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %57
  %r46 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx45, i32 0, i32 1
  store i32 %sub44, i32* %r46, align 4
  %58 = load i32, i32* %k23, align 4
  %59 = load i32, i32* %tot, align 4
  %arrayidx47 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %59
  %va48 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx47, i32 0, i32 2
  store i32 %58, i32* %va48, align 4
  %60 = load i32, i32* %k23, align 4
  %61 = load i32, i32* %m, align 4
  %cmp49 = icmp ne i32 %60, %61
  br i1 %cmp49, label %if.then50, label %if.end53

if.then50:                                        ; preds = %if.then40
  %62 = load i32, i32* %sum, align 4
  %63 = load i32, i32* %left, align 4
  %64 = load i32, i32* %x, align 4
  %sub51 = sub nsw i32 %63, %64
  %add52 = add nsw i32 %62, %sub51
  store i32 %add52, i32* %sum, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then50, %if.then40
  %65 = load i32, i32* %x, align 4
  store i32 %65, i32* %left, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end38
  %66 = load i32, i32* %y, align 4
  %67 = load i32, i32* %right, align 4
  %cmp55 = icmp sgt i32 %66, %67
  br i1 %cmp55, label %if.then56, label %if.end70

if.then56:                                        ; preds = %if.end54
  %68 = load i32, i32* %right, align 4
  %add57 = add nsw i32 %68, 1
  %69 = load i32, i32* %tot, align 4
  %inc58 = add nsw i32 %69, 1
  store i32 %inc58, i32* %tot, align 4
  %arrayidx59 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %inc58
  %l60 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx59, i32 0, i32 0
  store i32 %add57, i32* %l60, align 4
  %70 = load i32, i32* %y, align 4
  %71 = load i32, i32* %tot, align 4
  %arrayidx61 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %71
  %r62 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx61, i32 0, i32 1
  store i32 %70, i32* %r62, align 4
  %72 = load i32, i32* %k23, align 4
  %73 = load i32, i32* %tot, align 4
  %arrayidx63 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %73
  %va64 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx63, i32 0, i32 2
  store i32 %72, i32* %va64, align 4
  %74 = load i32, i32* %k23, align 4
  %75 = load i32, i32* %m, align 4
  %cmp65 = icmp ne i32 %74, %75
  br i1 %cmp65, label %if.then66, label %if.end69

if.then66:                                        ; preds = %if.then56
  %76 = load i32, i32* %sum, align 4
  %77 = load i32, i32* %y, align 4
  %78 = load i32, i32* %right, align 4
  %sub67 = sub nsw i32 %77, %78
  %add68 = add nsw i32 %76, %sub67
  store i32 %add68, i32* %sum, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.then66, %if.then56
  %79 = load i32, i32* %y, align 4
  store i32 %79, i32* %right, align 4
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.end54
  br label %for.inc71

for.inc71:                                        ; preds = %if.end70
  %80 = load i32, i32* %k23, align 4
  %dec = add nsw i32 %80, -1
  store i32 %dec, i32* %k23, align 4
  br label %for.cond25

for.end72:                                        ; preds = %for.cond25
  store i32 1, i32* %i, align 4
  br label %for.cond73

for.cond73:                                       ; preds = %for.inc89, %for.end72
  %81 = load i32, i32* %i, align 4
  %82 = load i32, i32* %tot, align 4
  %cmp74 = icmp sle i32 %81, %82
  br i1 %cmp74, label %for.body75, label %for.end91

for.body75:                                       ; preds = %for.cond73
  %83 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %83
  %l77 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx76, i32 0, i32 0
  %84 = load i32, i32* %l77, align 4
  store i32 %84, i32* %j, align 4
  br label %for.cond78

for.cond78:                                       ; preds = %for.inc86, %for.body75
  %85 = load i32, i32* %j, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx79 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %86
  %r80 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx79, i32 0, i32 1
  %87 = load i32, i32* %r80, align 4
  %cmp81 = icmp sle i32 %85, %87
  br i1 %cmp81, label %for.body82, label %for.end88

for.body82:                                       ; preds = %for.cond78
  %88 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds [10010 x %struct.node_snow], [10010 x %struct.node_snow]* %a, i32 0, i32 %88
  %va84 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx83, i32 0, i32 2
  %89 = load i32, i32* %va84, align 4
  %90 = load i32, i32* %j, align 4
  %arrayidx85 = getelementptr inbounds [20010 x i32], [20010 x i32]* %b, i32 0, i32 %90
  store i32 %89, i32* %arrayidx85, align 4
  br label %for.inc86

for.inc86:                                        ; preds = %for.body82
  %91 = load i32, i32* %j, align 4
  %inc87 = add nsw i32 %91, 1
  store i32 %inc87, i32* %j, align 4
  br label %for.cond78

for.end88:                                        ; preds = %for.cond78
  br label %for.inc89

for.inc89:                                        ; preds = %for.end88
  %92 = load i32, i32* %i, align 4
  %inc90 = add nsw i32 %92, 1
  store i32 %inc90, i32* %i, align 4
  br label %for.cond73

for.end91:                                        ; preds = %for.cond73
  store i32 0, i32* %an1, align 4
  store i32 1, i32* %i92, align 4
  br label %for.cond93

for.cond93:                                       ; preds = %for.inc98, %for.end91
  %93 = load i32, i32* %i92, align 4
  %94 = load i32, i32* %n, align 4
  %cmp94 = icmp sle i32 %93, %94
  br i1 %cmp94, label %for.body95, label %for.end100

for.body95:                                       ; preds = %for.cond93
  %95 = load i32, i32* %i92, align 4
  %arrayidx96 = getelementptr inbounds [20010 x i32], [20010 x i32]* %b, i32 0, i32 %95
  %96 = load i32, i32* %arrayidx96, align 4
  store i32 %96, i32* %an1, align 4
  %97 = load i32, i32* %an1, align 4
  %inc97 = add nsw i32 %97, 1
  store i32 %inc97, i32* %an1, align 4
  br label %for.inc98

for.inc98:                                        ; preds = %for.body95
  %98 = load i32, i32* %i92, align 4
  %inc99 = add nsw i32 %98, 1
  store i32 %inc99, i32* %i92, align 4
  br label %for.cond93

for.end100:                                       ; preds = %for.cond93
  br label %for.inc101

for.inc101:                                       ; preds = %for.end100
  %99 = load i32, i32* %q1, align 4
  %inc102 = add nsw i32 %99, 1
  store i32 %inc102, i32* %q1, align 4
  br label %for.cond

for.end103:                                       ; preds = %for.cond
  ret i32 0
}

; Function Attrs: noinline nounwind
define i32 @"\01?nim_game@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %e1 = alloca [509 x i32], align 4
  %n = alloca i32, align 4
  %x = alloca i32, align 4
  %tt = alloca i32, align 4
  %ans = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [509 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([509 x i32]* @"\01?e1@?1??nim_game@@YAHH@Z@3PAHA" to i8*), i32 2036, i1 false)
  store i32 0, i32* %ans, align 4
  store i32 1, i32* %tt, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then, %entry
  %1 = load i32, i32* %tt, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %tt, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end5

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %ans, align 4
  store i32 500, i32* %n, align 4
  br label %while.cond1

while.cond1:                                      ; preds = %while.body4, %while.body
  %2 = load i32, i32* %n, align 4
  %dec2 = add nsw i32 %2, -1
  store i32 %dec2, i32* %n, align 4
  %tobool3 = icmp ne i32 %2, 0
  br i1 %tobool3, label %while.body4, label %while.end

while.body4:                                      ; preds = %while.cond1
  %3 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [509 x i32], [509 x i32]* %e1, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  store i32 %4, i32* %x, align 4
  %5 = load i32, i32* %x, align 4
  %6 = load i32, i32* %ans, align 4
  %xor = xor i32 %6, %5
  store i32 %xor, i32* %ans, align 4
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %7 = load i32, i32* %ans, align 4
  %cmp = icmp ne i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.cond

if.end:                                           ; preds = %while.end
  br label %while.cond

while.end5:                                       ; preds = %while.cond
  %8 = load i32, i32* %ans, align 4
  %9 = load i32, i32* %mn.addr, align 4
  %cmp6 = icmp sgt i32 %8, %9
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.end5
  %10 = load i32, i32* %mn.addr, align 4
  store i32 %10, i32* %ans, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %while.end5
  %11 = load i32, i32* %ans, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind
define void @"\01?dfs_hay@@YAXHHPAHHPAUnode_hay@@0QAY0P@H0@Z"(i32 %x, i32 %zhi, i32* %xuanxue, i32 %n, %struct.node_hay* %f, i32* %k, [15 x i32]* %l, i32* %ans) #0 {
entry:
  %ans.addr = alloca i32*, align 4
  %l.addr = alloca [15 x i32]*, align 4
  %k.addr = alloca i32*, align 4
  %f.addr = alloca %struct.node_hay*, align 4
  %n.addr = alloca i32, align 4
  %xuanxue.addr = alloca i32*, align 4
  %zhi.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %bbb = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %ans, i32** %ans.addr, align 4
  store [15 x i32]* %l, [15 x i32]** %l.addr, align 4
  store i32* %k, i32** %k.addr, align 4
  store %struct.node_hay* %f, %struct.node_hay** %f.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %xuanxue, i32** %xuanxue.addr, align 4
  store i32 %zhi, i32* %zhi.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %zhi.addr, align 4
  %1 = load i32*, i32** %ans.addr, align 4
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sge i32 %0, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end42

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %4, 1
  %cmp1 = icmp eq i32 %3, %add
  br i1 %cmp1, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  %5 = load i32*, i32** %ans.addr, align 4
  %6 = load i32, i32* %5, align 4
  %7 = load i32, i32* %zhi.addr, align 4
  %cmp3 = icmp sgt i32 %6, %7
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.then2
  %8 = load i32, i32* %zhi.addr, align 4
  %9 = load i32*, i32** %ans.addr, align 4
  store i32 %8, i32* %9, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.then2
  br label %for.end42

if.end6:                                          ; preds = %if.end
  %10 = load i32, i32* %zhi.addr, align 4
  %11 = load i32, i32* %x.addr, align 4
  %12 = load i32*, i32** %xuanxue.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %12, i32 %11
  %13 = load i32, i32* %arrayidx, align 4
  %cmp7 = icmp slt i32 %10, %13
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  br label %for.end42

if.end9:                                          ; preds = %if.end6
  %14 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx10 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %14, i32 0
  %son = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx10, i32 0, i32 1
  %15 = load i32, i32* %son, align 4
  store i32 %15, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %if.end9
  %16 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %16, 0
  br i1 %tobool, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %i, align 4
  %18 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx11 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %18, i32 %17
  %son12 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx11, i32 0, i32 1
  %19 = load i32, i32* %son12, align 4
  %20 = load i32, i32* %i, align 4
  %21 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %21, i32 %20
  %fa = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx13, i32 0, i32 0
  %22 = load i32, i32* %fa, align 4
  %23 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx14 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %23, i32 %22
  %son15 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx14, i32 0, i32 1
  store i32 %19, i32* %son15, align 4
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %25, i32 %24
  %fa17 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx16, i32 0, i32 0
  %26 = load i32, i32* %fa17, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx18 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %28, i32 %27
  %son19 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx18, i32 0, i32 1
  %29 = load i32, i32* %son19, align 4
  %30 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx20 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %30, i32 %29
  %fa21 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx20, i32 0, i32 0
  store i32 %26, i32* %fa21, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %x.addr, align 4
  %33 = load i32*, i32** %k.addr, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %33, i32 %32
  store i32 %31, i32* %arrayidx22, align 4
  %34 = load i32, i32* %zhi.addr, align 4
  store i32 %34, i32* %bbb, align 4
  store i32 1, i32* %j, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc, %for.body
  %35 = load i32, i32* %j, align 4
  %36 = load i32, i32* %x.addr, align 4
  %cmp24 = icmp slt i32 %35, %36
  br i1 %cmp24, label %for.body25, label %for.end

for.body25:                                       ; preds = %for.cond23
  %37 = load i32, i32* %bbb, align 4
  %38 = load i32, i32* %x.addr, align 4
  %39 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %38, %39
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %j, align 4
  %42 = load i32*, i32** %k.addr, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %42, i32 %41
  %43 = load i32, i32* %arrayidx26, align 4
  %44 = load [15 x i32]*, [15 x i32]** %l.addr, align 4
  %arrayidx27 = getelementptr inbounds [15 x i32], [15 x i32]* %44, i32 %43
  %arrayidx28 = getelementptr inbounds [15 x i32], [15 x i32]* %arrayidx27, i32 0, i32 %40
  %45 = load i32, i32* %arrayidx28, align 4
  %mul = mul nsw i32 %sub, %45
  %add29 = add nsw i32 %37, %mul
  store i32 %add29, i32* %bbb, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body25
  %46 = load i32, i32* %j, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond23

for.end:                                          ; preds = %for.cond23
  %47 = load i32*, i32** %ans.addr, align 4
  %48 = load [15 x i32]*, [15 x i32]** %l.addr, align 4
  %49 = load i32*, i32** %k.addr, align 4
  %50 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %51 = load i32, i32* %n.addr, align 4
  %52 = load i32*, i32** %xuanxue.addr, align 4
  %53 = load i32, i32* %bbb, align 4
  %54 = load i32, i32* %x.addr, align 4
  %add30 = add nsw i32 %54, 1
  call void @"\01?dfs_hay@@YAXHHPAHHPAUnode_hay@@0QAY0P@H0@Z"(i32 %add30, i32 %53, i32* %52, i32 %51, %struct.node_hay* %50, i32* %49, [15 x i32]* %48, i32* %47)
  %55 = load i32, i32* %i, align 4
  %56 = load i32, i32* %i, align 4
  %57 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx31 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %57, i32 %56
  %fa32 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx31, i32 0, i32 0
  %58 = load i32, i32* %fa32, align 4
  %59 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx33 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %59, i32 %58
  %son34 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx33, i32 0, i32 1
  store i32 %55, i32* %son34, align 4
  %60 = load i32, i32* %i, align 4
  %61 = load i32, i32* %i, align 4
  %62 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx35 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %62, i32 %61
  %son36 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx35, i32 0, i32 1
  %63 = load i32, i32* %son36, align 4
  %64 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx37 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %64, i32 %63
  %fa38 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx37, i32 0, i32 0
  store i32 %60, i32* %fa38, align 4
  br label %for.inc39

for.inc39:                                        ; preds = %for.end
  %65 = load i32, i32* %i, align 4
  %66 = load %struct.node_hay*, %struct.node_hay** %f.addr, align 4
  %arrayidx40 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %66, i32 %65
  %son41 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx40, i32 0, i32 1
  %67 = load i32, i32* %son41, align 4
  store i32 %67, i32* %i, align 4
  br label %for.cond

for.end42:                                        ; preds = %for.cond, %if.then8, %if.end5, %if.then
  ret void
}

; Function Attrs: noinline nounwind
define i32 @"\01?Haywire@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %e1 = alloca [12 x [3 x i32]], align 4
  %n = alloca i32, align 4
  %k = alloca [15 x i32], align 4
  %ans = alloca i32, align 4
  %l = alloca [15 x [15 x i32]], align 4
  %xuanxue = alloca [15 x i32], align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k4 = alloca i32, align 4
  %i14 = alloca i32, align 4
  %i40 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [12 x [3 x i32]]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([12 x [3 x i32]]* @"\01?e1@?1??Haywire@@YAHH@Z@3PAY02HA" to i8*), i32 144, i1 false)
  store i32 1000000, i32* %ans, align 4
  %1 = bitcast [15 x [15 x i32]]* %l to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 900, i1 false)
  store i32 12, i32* %n, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %4, 3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %5, 1
  %6 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds [12 x [3 x i32]], [12 x [3 x i32]]* %e1, i32 0, i32 %sub5
  %arrayidx6 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx, i32 0, i32 %sub
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %k4, align 4
  %8 = load i32, i32* %k4, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [15 x [15 x i32]], [15 x [15 x i32]]* %l, i32 0, i32 %9
  %arrayidx8 = getelementptr inbounds [15 x i32], [15 x i32]* %arrayidx7, i32 0, i32 %8
  store i32 1, i32* %arrayidx8, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %k4, align 4
  %arrayidx9 = getelementptr inbounds [15 x [15 x i32]], [15 x [15 x i32]]* %l, i32 0, i32 %11
  %arrayidx10 = getelementptr inbounds [15 x i32], [15 x i32]* %arrayidx9, i32 0, i32 %10
  store i32 1, i32* %arrayidx10, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %13, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  store i32 1, i32* getelementptr inbounds ([15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 0, i32 1), align 4
  %14 = load i32, i32* %n, align 4
  store i32 %14, i32* getelementptr inbounds ([15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 0, i32 0), align 4
  store i32 1, i32* %i14, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc21, %for.end13
  %15 = load i32, i32* %i14, align 4
  %16 = load i32, i32* %n, align 4
  %cmp16 = icmp slt i32 %15, %16
  br i1 %cmp16, label %for.body17, label %for.end23

for.body17:                                       ; preds = %for.cond15
  %17 = load i32, i32* %i14, align 4
  %sub18 = sub nsw i32 %17, 1
  %18 = load i32, i32* %i14, align 4
  %arrayidx19 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %18
  %fa = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx19, i32 0, i32 0
  store i32 %sub18, i32* %fa, align 4
  %19 = load i32, i32* %i14, align 4
  %add = add nsw i32 %19, 1
  %20 = load i32, i32* %i14, align 4
  %arrayidx20 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %20
  %son = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx20, i32 0, i32 1
  store i32 %add, i32* %son, align 4
  br label %for.inc21

for.inc21:                                        ; preds = %for.body17
  %21 = load i32, i32* %i14, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i14, align 4
  br label %for.cond15

for.end23:                                        ; preds = %for.cond15
  %22 = load i32, i32* %n, align 4
  %arrayidx24 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %22
  %son25 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx24, i32 0, i32 1
  store i32 0, i32* %son25, align 4
  %23 = load i32, i32* %n, align 4
  %sub26 = sub nsw i32 %23, 1
  %24 = load i32, i32* %n, align 4
  %arrayidx27 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %24
  %fa28 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx27, i32 0, i32 0
  store i32 %sub26, i32* %fa28, align 4
  %arrayidx29 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 2
  store i32 0, i32* %arrayidx29, align 4
  %arrayidx30 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 3
  store i32 0, i32* %arrayidx30, align 4
  %arrayidx31 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 4
  store i32 2, i32* %arrayidx31, align 4
  %arrayidx32 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 5
  store i32 3, i32* %arrayidx32, align 4
  %arrayidx33 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 6
  store i32 6, i32* %arrayidx33, align 4
  %arrayidx34 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 7
  store i32 11, i32* %arrayidx34, align 4
  %arrayidx35 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 8
  store i32 13, i32* %arrayidx35, align 4
  %arrayidx36 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 9
  store i32 14, i32* %arrayidx36, align 4
  %arrayidx37 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 10
  store i32 15, i32* %arrayidx37, align 4
  %arrayidx38 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 11
  store i32 16, i32* %arrayidx38, align 4
  %arrayidx39 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 12
  store i32 20, i32* %arrayidx39, align 4
  store i32 1, i32* %i40, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc68, %for.end23
  %25 = load i32, i32* %i40, align 4
  %cmp42 = icmp eq i32 %25, 1
  br i1 %cmp42, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond41
  %26 = load i32, i32* %i40, align 4
  %27 = load i32, i32* %n, align 4
  %cmp43 = icmp eq i32 %26, %27
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond41
  %28 = phi i1 [ true, %for.cond41 ], [ %cmp43, %lor.rhs ]
  br i1 %28, label %for.body44, label %for.end71

for.body44:                                       ; preds = %lor.end
  %29 = load i32, i32* %i40, align 4
  %arrayidx45 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %29
  %son46 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx45, i32 0, i32 1
  %30 = load i32, i32* %son46, align 4
  %31 = load i32, i32* %i40, align 4
  %arrayidx47 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %31
  %fa48 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx47, i32 0, i32 0
  %32 = load i32, i32* %fa48, align 4
  %arrayidx49 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %32
  %son50 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx49, i32 0, i32 1
  store i32 %30, i32* %son50, align 4
  %33 = load i32, i32* %i40, align 4
  %arrayidx51 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %33
  %fa52 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx51, i32 0, i32 0
  %34 = load i32, i32* %fa52, align 4
  %35 = load i32, i32* %i40, align 4
  %arrayidx53 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %35
  %son54 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx53, i32 0, i32 1
  %36 = load i32, i32* %son54, align 4
  %arrayidx55 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %36
  %fa56 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx55, i32 0, i32 0
  store i32 %34, i32* %fa56, align 4
  %37 = load i32, i32* %i40, align 4
  %arrayidx57 = getelementptr inbounds [15 x i32], [15 x i32]* %k, i32 0, i32 1
  store i32 %37, i32* %arrayidx57, align 4
  %arraydecay = getelementptr inbounds [15 x [15 x i32]], [15 x [15 x i32]]* %l, i32 0, i32 0
  %arraydecay58 = getelementptr inbounds [15 x i32], [15 x i32]* %k, i32 0, i32 0
  %38 = load i32, i32* %n, align 4
  %arraydecay59 = getelementptr inbounds [15 x i32], [15 x i32]* %xuanxue, i32 0, i32 0
  call void @"\01?dfs_hay@@YAXHHPAHHPAUnode_hay@@0QAY0P@H0@Z"(i32 2, i32 0, i32* %arraydecay59, i32 %38, %struct.node_hay* getelementptr inbounds ([15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 0), i32* %arraydecay58, [15 x i32]* %arraydecay, i32* %ans)
  %39 = load i32, i32* %i40, align 4
  %40 = load i32, i32* %i40, align 4
  %arrayidx60 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %40
  %fa61 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx60, i32 0, i32 0
  %41 = load i32, i32* %fa61, align 4
  %arrayidx62 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %41
  %son63 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx62, i32 0, i32 1
  store i32 %39, i32* %son63, align 4
  %42 = load i32, i32* %i40, align 4
  %43 = load i32, i32* %i40, align 4
  %arrayidx64 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %43
  %son65 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx64, i32 0, i32 1
  %44 = load i32, i32* %son65, align 4
  %arrayidx66 = getelementptr inbounds [15 x %struct.node_hay], [15 x %struct.node_hay]* @"\01?f@?1??Haywire@@YAHH@Z@4PAUnode_hay@@A", i32 0, i32 %44
  %fa67 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx66, i32 0, i32 0
  store i32 %42, i32* %fa67, align 4
  br label %for.inc68

for.inc68:                                        ; preds = %for.body44
  %45 = load i32, i32* %n, align 4
  %sub69 = sub nsw i32 %45, 1
  %46 = load i32, i32* %i40, align 4
  %add70 = add nsw i32 %46, %sub69
  store i32 %add70, i32* %i40, align 4
  br label %for.cond41

for.end71:                                        ; preds = %lor.end
  %47 = load i32, i32* %ans, align 4
  %48 = load i32, i32* %mn.addr, align 4
  %add72 = add nsw i32 %47, %48
  store i32 %add72, i32* %ans, align 4
  %49 = load i32, i32* %ans, align 4
  ret i32 %49
}

; Function Attrs: noinline nounwind
define i32 @"\01?cow_argu@@YAHQAHH@Z"(i32* %sb1, i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %sb1.addr = alloca i32*, align 4
  %P = alloca i32, align 4
  %n = alloca i32, align 4
  %f = alloca [20010 x i32], align 4
  %a = alloca [20010 x i32], align 4
  %s = alloca [20010 x i32], align 4
  %c = alloca [20010 x i32], align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  store i32* %sb1, i32** %sb1.addr, align 4
  store i32 1000000, i32* %P, align 4
  %0 = bitcast [20010 x i32]* %f to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 80040, i1 false)
  %1 = bitcast [20010 x i32]* %a to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 80040, i1 false)
  %2 = bitcast [20010 x i32]* %s to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 80040, i1 false)
  %3 = bitcast [20010 x i32]* %c to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %3, i8 0, i32 80040, i1 false)
  %4 = load i32, i32* %mn.addr, align 4
  %rem = srem i32 %4, 100
  %add = add nsw i32 %rem, 500
  store i32 %add, i32* %n, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %7, 1
  %8 = load i32*, i32** %sb1.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %8, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20010 x i32], [20010 x i32]* %a, i32 0, i32 %10
  store i32 %9, i32* %arrayidx1, align 4
  %11 = load i32, i32* %i, align 4
  %sub2 = sub nsw i32 %11, 1
  %arrayidx3 = getelementptr inbounds [20010 x i32], [20010 x i32]* %s, i32 0, i32 %sub2
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [20010 x i32], [20010 x i32]* %a, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %add5 = add nsw i32 %12, %14
  %15 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [20010 x i32], [20010 x i32]* %s, i32 0, i32 %15
  store i32 %add5, i32* %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx7 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 0
  store i32 1, i32* %arrayidx7, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc35, %for.end
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %n, align 4
  %cmp9 = icmp sle i32 %17, %18
  br i1 %cmp9, label %for.body10, label %for.end37

for.body10:                                       ; preds = %for.cond8
  %19 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds [20010 x i32], [20010 x i32]* %s, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp sge i32 %20, 0
  br i1 %cmp12, label %if.then, label %if.end34

if.then:                                          ; preds = %for.body10
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc31, %if.then
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i, align 4
  %sub14 = sub nsw i32 %22, 1
  %cmp15 = icmp sle i32 %21, %sub14
  br i1 %cmp15, label %for.body16, label %for.end33

for.body16:                                       ; preds = %for.cond13
  %23 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [20010 x i32], [20010 x i32]* %s, i32 0, i32 %23
  %24 = load i32, i32* %arrayidx17, align 4
  %cmp18 = icmp sge i32 %24, 0
  br i1 %cmp18, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body16
  %25 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [20010 x i32], [20010 x i32]* %s, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx19, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds [20010 x i32], [20010 x i32]* %s, i32 0, i32 %27
  %28 = load i32, i32* %arrayidx20, align 4
  %sub21 = sub nsw i32 %26, %28
  %cmp22 = icmp sge i32 %sub21, 0
  br i1 %cmp22, label %if.then23, label %if.end

if.then23:                                        ; preds = %land.lhs.true
  %29 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 %29
  %30 = load i32, i32* %arrayidx24, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx25 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 %31
  %32 = load i32, i32* %arrayidx25, align 4
  %add26 = add nsw i32 %30, %32
  %33 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 %33
  store i32 %add26, i32* %arrayidx27, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 %34
  %35 = load i32, i32* %arrayidx28, align 4
  %36 = load i32, i32* %P, align 4
  %rem29 = srem i32 %35, %36
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 %37
  store i32 %rem29, i32* %arrayidx30, align 4
  br label %if.end

if.end:                                           ; preds = %if.then23, %land.lhs.true, %for.body16
  br label %for.inc31

for.inc31:                                        ; preds = %if.end
  %38 = load i32, i32* %j, align 4
  %inc32 = add nsw i32 %38, 1
  store i32 %inc32, i32* %j, align 4
  br label %for.cond13

for.end33:                                        ; preds = %for.cond13
  br label %if.end34

if.end34:                                         ; preds = %for.end33, %for.body10
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %39 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %39, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond8

for.end37:                                        ; preds = %for.cond8
  %40 = load i32, i32* %n, align 4
  %arrayidx38 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 %40
  %41 = load i32, i32* %arrayidx38, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind
define i32 @"\01?HYZ_card@@YAHH@Z"(i32 %mn) #0 {
entry:
  %retval = alloca i32, align 4
  %mn.addr = alloca i32, align 4
  %e1 = alloca [1009 x i32], align 4
  %N = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca i32, align 4
  %five = alloca i32, align 4
  %zero = alloca i32, align 4
  %sb1_3 = alloca [1278 x i32], align 4
  %sum = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [1009 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([1009 x i32]* @"\01?e1@?1??HYZ_card@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  store i32 0, i32* %temp, align 4
  store i32 0, i32* %five, align 4
  store i32 0, i32* %zero, align 4
  %1 = bitcast [1278 x i32]* %sb1_3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([1278 x i32]* @"\01?sb1_3@?1??HYZ_card@@YAHH@Z@3PAHA" to i8*), i32 5112, i1 false)
  %2 = load i32, i32* %mn.addr, align 4
  store i32 %2, i32* %sum, align 4
  store i32 1000, i32* %N, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %N, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [1009 x i32], [1009 x i32]* %e1, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  store i32 %6, i32* %temp, align 4
  %7 = load i32, i32* %temp, align 4
  %cmp1 = icmp eq i32 %7, 5
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %five, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %five, align 4
  br label %if.end5

if.else:                                          ; preds = %for.body
  %9 = load i32, i32* %temp, align 4
  %cmp2 = icmp eq i32 %9, 0
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %10 = load i32, i32* %zero, align 4
  %inc4 = add nsw i32 %10, 1
  store i32 %inc4, i32* %zero, align 4
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end5
  %11 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %11, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %five, align 4
  %cmp7 = icmp slt i32 %12, 9
  br i1 %cmp7, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %for.end
  %13 = load i32, i32* %zero, align 4
  %cmp8 = icmp ne i32 %13, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i32, i32* %five, align 4
  %arraydecay = getelementptr inbounds [1278 x i32], [1278 x i32]* %sb1_3, i32 0, i32 0
  %call = call i32 @"\01?cow_argu@@YAHQAHH@Z"(i32* %arraydecay, i32 %14)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %land.lhs.true, %for.end
  %15 = load i32, i32* %five, align 4
  %cmp11 = icmp slt i32 %15, 9
  br i1 %cmp11, label %land.lhs.true12, label %lor.lhs.false

land.lhs.true12:                                  ; preds = %if.end10
  %16 = load i32, i32* %zero, align 4
  %cmp13 = icmp eq i32 %16, 0
  br i1 %cmp13, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true12, %if.end10
  %17 = load i32, i32* %zero, align 4
  %cmp14 = icmp eq i32 %17, 0
  br i1 %cmp14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %lor.lhs.false, %land.lhs.true12
  %18 = load i32, i32* %five, align 4
  %arraydecay16 = getelementptr inbounds [1278 x i32], [1278 x i32]* %sb1_3, i32 0, i32 0
  %call17 = call i32 @"\01?snow_ai@@YAHQAHH@Z"(i32* %arraydecay16, i32 %18)
  store i32 %call17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %lor.lhs.false
  %19 = load i32, i32* %five, align 4
  %rem = srem i32 %19, 9
  %cmp19 = icmp eq i32 %rem, 0
  br i1 %cmp19, label %if.then20, label %if.end33

if.then20:                                        ; preds = %if.end18
  store i32 1, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc25, %if.then20
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %five, align 4
  %cmp22 = icmp sle i32 %20, %21
  br i1 %cmp22, label %for.body23, label %for.end27

for.body23:                                       ; preds = %for.cond21
  %22 = load i32, i32* %sum, align 4
  %23 = load i32, i32* %i, align 4
  %call24 = call i32 @"\01?nim_game@@YAHH@Z"(i32 %23)
  %add = add nsw i32 %22, %call24
  store i32 %add, i32* %sum, align 4
  br label %for.inc25

for.inc25:                                        ; preds = %for.body23
  %24 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %24, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond21

for.end27:                                        ; preds = %for.cond21
  %25 = load i32, i32* %sum, align 4
  %26 = load i32, i32* %five, align 4
  %call28 = call i32 @"\01?Haywire@@YAHH@Z"(i32 %26)
  %cmp29 = icmp sgt i32 %25, %call28
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %for.end27
  %27 = load i32, i32* %five, align 4
  %call31 = call i32 @"\01?Haywire@@YAHH@Z"(i32 %27)
  store i32 %call31, i32* %sum, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %for.end27
  store i32 0, i32* %retval, align 4
  br label %return

if.end33:                                         ; preds = %if.end18
  %28 = load i32, i32* %sum, align 4
  store i32 %28, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end33, %if.end32, %if.then15, %if.then9
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

; Function Attrs: noinline nounwind
define i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %x, i32 %y, [25 x i32]* %use, [25 x i32]* %n, i32 %ans) #0 {
entry:
  %retval = alloca i32, align 4
  %ans.addr = alloca i32, align 4
  %n.addr = alloca [25 x i32]*, align 4
  %use.addr = alloca [25 x i32]*, align 4
  %y.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  store i32 %ans, i32* %ans.addr, align 4
  store [25 x i32]* %n, [25 x i32]** %n.addr, align 4
  store [25 x i32]* %use, [25 x i32]** %use.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 20, i32* %a, align 4
  store i32 2, i32* %b, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %2 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %arrayidx = getelementptr inbounds [25 x i32], [25 x i32]* %2, i32 %1
  %arrayidx1 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx, i32 0, i32 %0
  %3 = load i32, i32* %arrayidx1, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %ans.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %y.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %7 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %arrayidx2 = getelementptr inbounds [25 x i32], [25 x i32]* %7, i32 %6
  %arrayidx3 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx2, i32 0, i32 %5
  store i32 1, i32* %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  %8 = load i32, i32* %y.addr, align 4
  %9 = load i32, i32* %x.addr, align 4
  %add = add nsw i32 %9, 1
  %10 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx4 = getelementptr inbounds [25 x i32], [25 x i32]* %10, i32 %add
  %arrayidx5 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx4, i32 0, i32 %8
  %11 = load i32, i32* %arrayidx5, align 4
  %tobool6 = icmp ne i32 %11, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %if.end
  %12 = load i32, i32* %x.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %a, align 4
  %cmp = icmp slt i32 %add7, %13
  br i1 %cmp, label %if.then8, label %if.end10

if.then8:                                         ; preds = %land.lhs.true
  %14 = load i32, i32* %ans.addr, align 4
  %15 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %16 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %17 = load i32, i32* %y.addr, align 4
  %18 = load i32, i32* %x.addr, align 4
  %add9 = add nsw i32 %18, 1
  %call = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %add9, i32 %17, [25 x i32]* %16, [25 x i32]* %15, i32 %14)
  store i32 %call, i32* %ans.addr, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %land.lhs.true, %if.end
  %19 = load i32, i32* %y.addr, align 4
  %add11 = add nsw i32 %19, 1
  %20 = load i32, i32* %x.addr, align 4
  %21 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx12 = getelementptr inbounds [25 x i32], [25 x i32]* %21, i32 %20
  %arrayidx13 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx12, i32 0, i32 %add11
  %22 = load i32, i32* %arrayidx13, align 4
  %tobool14 = icmp ne i32 %22, 0
  br i1 %tobool14, label %land.lhs.true15, label %if.end21

land.lhs.true15:                                  ; preds = %if.end10
  %23 = load i32, i32* %y.addr, align 4
  %add16 = add nsw i32 %23, 1
  %24 = load i32, i32* %b, align 4
  %cmp17 = icmp slt i32 %add16, %24
  br i1 %cmp17, label %if.then18, label %if.end21

if.then18:                                        ; preds = %land.lhs.true15
  %25 = load i32, i32* %ans.addr, align 4
  %26 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %27 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %28 = load i32, i32* %y.addr, align 4
  %add19 = add nsw i32 %28, 1
  %29 = load i32, i32* %x.addr, align 4
  %call20 = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %29, i32 %add19, [25 x i32]* %27, [25 x i32]* %26, i32 %25)
  store i32 %call20, i32* %ans.addr, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %land.lhs.true15, %if.end10
  %30 = load i32, i32* %y.addr, align 4
  %31 = load i32, i32* %x.addr, align 4
  %sub = sub nsw i32 %31, 1
  %32 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx22 = getelementptr inbounds [25 x i32], [25 x i32]* %32, i32 %sub
  %arrayidx23 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx22, i32 0, i32 %30
  %33 = load i32, i32* %arrayidx23, align 4
  %tobool24 = icmp ne i32 %33, 0
  br i1 %tobool24, label %land.lhs.true25, label %if.end31

land.lhs.true25:                                  ; preds = %if.end21
  %34 = load i32, i32* %x.addr, align 4
  %sub26 = sub nsw i32 %34, 1
  %cmp27 = icmp sge i32 %sub26, 0
  br i1 %cmp27, label %if.then28, label %if.end31

if.then28:                                        ; preds = %land.lhs.true25
  %35 = load i32, i32* %ans.addr, align 4
  %36 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %37 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %38 = load i32, i32* %y.addr, align 4
  %39 = load i32, i32* %x.addr, align 4
  %sub29 = sub nsw i32 %39, 1
  %call30 = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %sub29, i32 %38, [25 x i32]* %37, [25 x i32]* %36, i32 %35)
  store i32 %call30, i32* %ans.addr, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then28, %land.lhs.true25, %if.end21
  %40 = load i32, i32* %y.addr, align 4
  %sub32 = sub nsw i32 %40, 1
  %41 = load i32, i32* %x.addr, align 4
  %42 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx33 = getelementptr inbounds [25 x i32], [25 x i32]* %42, i32 %41
  %arrayidx34 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx33, i32 0, i32 %sub32
  %43 = load i32, i32* %arrayidx34, align 4
  %tobool35 = icmp ne i32 %43, 0
  br i1 %tobool35, label %land.lhs.true36, label %if.end42

land.lhs.true36:                                  ; preds = %if.end31
  %44 = load i32, i32* %y.addr, align 4
  %sub37 = sub nsw i32 %44, 1
  %cmp38 = icmp sge i32 %sub37, 0
  br i1 %cmp38, label %if.then39, label %if.end42

if.then39:                                        ; preds = %land.lhs.true36
  %45 = load i32, i32* %ans.addr, align 4
  %46 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %47 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %48 = load i32, i32* %y.addr, align 4
  %sub40 = sub nsw i32 %48, 1
  %49 = load i32, i32* %x.addr, align 4
  %call41 = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %49, i32 %sub40, [25 x i32]* %47, [25 x i32]* %46, i32 %45)
  store i32 %call41, i32* %ans.addr, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %land.lhs.true36, %if.end31
  %50 = load i32, i32* %y.addr, align 4
  %add43 = add nsw i32 %50, 1
  %51 = load i32, i32* %x.addr, align 4
  %add44 = add nsw i32 %51, 1
  %52 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx45 = getelementptr inbounds [25 x i32], [25 x i32]* %52, i32 %add44
  %arrayidx46 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx45, i32 0, i32 %add43
  %53 = load i32, i32* %arrayidx46, align 4
  %tobool47 = icmp ne i32 %53, 0
  br i1 %tobool47, label %land.lhs.true48, label %if.end58

land.lhs.true48:                                  ; preds = %if.end42
  %54 = load i32, i32* %x.addr, align 4
  %add49 = add nsw i32 %54, 1
  %55 = load i32, i32* %a, align 4
  %cmp50 = icmp slt i32 %add49, %55
  br i1 %cmp50, label %land.lhs.true51, label %if.end58

land.lhs.true51:                                  ; preds = %land.lhs.true48
  %56 = load i32, i32* %y.addr, align 4
  %add52 = add nsw i32 %56, 1
  %57 = load i32, i32* %b, align 4
  %cmp53 = icmp slt i32 %add52, %57
  br i1 %cmp53, label %if.then54, label %if.end58

if.then54:                                        ; preds = %land.lhs.true51
  %58 = load i32, i32* %ans.addr, align 4
  %59 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %60 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %61 = load i32, i32* %y.addr, align 4
  %add55 = add nsw i32 %61, 1
  %62 = load i32, i32* %x.addr, align 4
  %add56 = add nsw i32 %62, 1
  %call57 = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %add56, i32 %add55, [25 x i32]* %60, [25 x i32]* %59, i32 %58)
  store i32 %call57, i32* %ans.addr, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then54, %land.lhs.true51, %land.lhs.true48, %if.end42
  %63 = load i32, i32* %y.addr, align 4
  %sub59 = sub nsw i32 %63, 1
  %64 = load i32, i32* %x.addr, align 4
  %add60 = add nsw i32 %64, 1
  %65 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx61 = getelementptr inbounds [25 x i32], [25 x i32]* %65, i32 %add60
  %arrayidx62 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx61, i32 0, i32 %sub59
  %66 = load i32, i32* %arrayidx62, align 4
  %tobool63 = icmp ne i32 %66, 0
  br i1 %tobool63, label %land.lhs.true64, label %if.end74

land.lhs.true64:                                  ; preds = %if.end58
  %67 = load i32, i32* %x.addr, align 4
  %add65 = add nsw i32 %67, 1
  %68 = load i32, i32* %a, align 4
  %cmp66 = icmp slt i32 %add65, %68
  br i1 %cmp66, label %land.lhs.true67, label %if.end74

land.lhs.true67:                                  ; preds = %land.lhs.true64
  %69 = load i32, i32* %y.addr, align 4
  %sub68 = sub nsw i32 %69, 1
  %cmp69 = icmp sge i32 %sub68, 0
  br i1 %cmp69, label %if.then70, label %if.end74

if.then70:                                        ; preds = %land.lhs.true67
  %70 = load i32, i32* %ans.addr, align 4
  %71 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %72 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %73 = load i32, i32* %y.addr, align 4
  %sub71 = sub nsw i32 %73, 1
  %74 = load i32, i32* %x.addr, align 4
  %add72 = add nsw i32 %74, 1
  %call73 = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %add72, i32 %sub71, [25 x i32]* %72, [25 x i32]* %71, i32 %70)
  store i32 %call73, i32* %ans.addr, align 4
  br label %if.end74

if.end74:                                         ; preds = %if.then70, %land.lhs.true67, %land.lhs.true64, %if.end58
  %75 = load i32, i32* %y.addr, align 4
  %add75 = add nsw i32 %75, 1
  %76 = load i32, i32* %x.addr, align 4
  %sub76 = sub nsw i32 %76, 1
  %77 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx77 = getelementptr inbounds [25 x i32], [25 x i32]* %77, i32 %sub76
  %arrayidx78 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx77, i32 0, i32 %add75
  %78 = load i32, i32* %arrayidx78, align 4
  %tobool79 = icmp ne i32 %78, 0
  br i1 %tobool79, label %land.lhs.true80, label %if.end90

land.lhs.true80:                                  ; preds = %if.end74
  %79 = load i32, i32* %y.addr, align 4
  %add81 = add nsw i32 %79, 1
  %80 = load i32, i32* %b, align 4
  %cmp82 = icmp slt i32 %add81, %80
  br i1 %cmp82, label %land.lhs.true83, label %if.end90

land.lhs.true83:                                  ; preds = %land.lhs.true80
  %81 = load i32, i32* %x.addr, align 4
  %sub84 = sub nsw i32 %81, 1
  %cmp85 = icmp sge i32 %sub84, 0
  br i1 %cmp85, label %if.then86, label %if.end90

if.then86:                                        ; preds = %land.lhs.true83
  %82 = load i32, i32* %ans.addr, align 4
  %83 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %84 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %85 = load i32, i32* %y.addr, align 4
  %add87 = add nsw i32 %85, 1
  %86 = load i32, i32* %x.addr, align 4
  %sub88 = sub nsw i32 %86, 1
  %call89 = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %sub88, i32 %add87, [25 x i32]* %84, [25 x i32]* %83, i32 %82)
  store i32 %call89, i32* %ans.addr, align 4
  br label %if.end90

if.end90:                                         ; preds = %if.then86, %land.lhs.true83, %land.lhs.true80, %if.end74
  %87 = load i32, i32* %y.addr, align 4
  %sub91 = sub nsw i32 %87, 1
  %88 = load i32, i32* %x.addr, align 4
  %sub92 = sub nsw i32 %88, 1
  %89 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx93 = getelementptr inbounds [25 x i32], [25 x i32]* %89, i32 %sub92
  %arrayidx94 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx93, i32 0, i32 %sub91
  %90 = load i32, i32* %arrayidx94, align 4
  %tobool95 = icmp ne i32 %90, 0
  br i1 %tobool95, label %land.lhs.true96, label %if.end106

land.lhs.true96:                                  ; preds = %if.end90
  %91 = load i32, i32* %x.addr, align 4
  %sub97 = sub nsw i32 %91, 1
  %cmp98 = icmp sge i32 %sub97, 0
  br i1 %cmp98, label %land.lhs.true99, label %if.end106

land.lhs.true99:                                  ; preds = %land.lhs.true96
  %92 = load i32, i32* %y.addr, align 4
  %sub100 = sub nsw i32 %92, 1
  %cmp101 = icmp sge i32 %sub100, 0
  br i1 %cmp101, label %if.then102, label %if.end106

if.then102:                                       ; preds = %land.lhs.true99
  %93 = load i32, i32* %ans.addr, align 4
  %94 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %95 = load [25 x i32]*, [25 x i32]** %use.addr, align 4
  %96 = load i32, i32* %y.addr, align 4
  %sub103 = sub nsw i32 %96, 1
  %97 = load i32, i32* %x.addr, align 4
  %sub104 = sub nsw i32 %97, 1
  %call105 = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %sub104, i32 %sub103, [25 x i32]* %95, [25 x i32]* %94, i32 %93)
  store i32 %call105, i32* %ans.addr, align 4
  br label %if.end106

if.end106:                                        ; preds = %if.then102, %land.lhs.true99, %land.lhs.true96, %if.end90
  %98 = load i32, i32* %y.addr, align 4
  %99 = load i32, i32* %x.addr, align 4
  %add107 = add nsw i32 %99, 1
  %100 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx108 = getelementptr inbounds [25 x i32], [25 x i32]* %100, i32 %add107
  %arrayidx109 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx108, i32 0, i32 %98
  %101 = load i32, i32* %arrayidx109, align 4
  %tobool110 = icmp ne i32 %101, 0
  br i1 %tobool110, label %lor.lhs.false, label %land.lhs.true111

land.lhs.true111:                                 ; preds = %if.end106
  %102 = load i32, i32* %x.addr, align 4
  %add112 = add nsw i32 %102, 1
  %103 = load i32, i32* %a, align 4
  %cmp113 = icmp slt i32 %add112, %103
  br i1 %cmp113, label %if.then116, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true111, %if.end106
  %104 = load i32, i32* %x.addr, align 4
  %add114 = add nsw i32 %104, 1
  %105 = load i32, i32* %a, align 4
  %cmp115 = icmp slt i32 %add114, %105
  br i1 %cmp115, label %if.end117, label %if.then116

if.then116:                                       ; preds = %lor.lhs.false, %land.lhs.true111
  %106 = load i32, i32* %ans.addr, align 4
  %inc = add nsw i32 %106, 1
  store i32 %inc, i32* %ans.addr, align 4
  br label %if.end117

if.end117:                                        ; preds = %if.then116, %lor.lhs.false
  %107 = load i32, i32* %y.addr, align 4
  %add118 = add nsw i32 %107, 1
  %108 = load i32, i32* %x.addr, align 4
  %109 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx119 = getelementptr inbounds [25 x i32], [25 x i32]* %109, i32 %108
  %arrayidx120 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx119, i32 0, i32 %add118
  %110 = load i32, i32* %arrayidx120, align 4
  %tobool121 = icmp ne i32 %110, 0
  br i1 %tobool121, label %lor.lhs.false125, label %land.lhs.true122

land.lhs.true122:                                 ; preds = %if.end117
  %111 = load i32, i32* %y.addr, align 4
  %add123 = add nsw i32 %111, 1
  %112 = load i32, i32* %b, align 4
  %cmp124 = icmp slt i32 %add123, %112
  br i1 %cmp124, label %if.then128, label %lor.lhs.false125

lor.lhs.false125:                                 ; preds = %land.lhs.true122, %if.end117
  %113 = load i32, i32* %y.addr, align 4
  %add126 = add nsw i32 %113, 1
  %114 = load i32, i32* %b, align 4
  %cmp127 = icmp slt i32 %add126, %114
  br i1 %cmp127, label %if.end130, label %if.then128

if.then128:                                       ; preds = %lor.lhs.false125, %land.lhs.true122
  %115 = load i32, i32* %ans.addr, align 4
  %inc129 = add nsw i32 %115, 1
  store i32 %inc129, i32* %ans.addr, align 4
  br label %if.end130

if.end130:                                        ; preds = %if.then128, %lor.lhs.false125
  %116 = load i32, i32* %y.addr, align 4
  %117 = load i32, i32* %x.addr, align 4
  %sub131 = sub nsw i32 %117, 1
  %118 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx132 = getelementptr inbounds [25 x i32], [25 x i32]* %118, i32 %sub131
  %arrayidx133 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx132, i32 0, i32 %116
  %119 = load i32, i32* %arrayidx133, align 4
  %tobool134 = icmp ne i32 %119, 0
  br i1 %tobool134, label %lor.lhs.false138, label %land.lhs.true135

land.lhs.true135:                                 ; preds = %if.end130
  %120 = load i32, i32* %x.addr, align 4
  %sub136 = sub nsw i32 %120, 1
  %cmp137 = icmp sge i32 %sub136, 0
  br i1 %cmp137, label %if.then141, label %lor.lhs.false138

lor.lhs.false138:                                 ; preds = %land.lhs.true135, %if.end130
  %121 = load i32, i32* %x.addr, align 4
  %sub139 = sub nsw i32 %121, 1
  %cmp140 = icmp sge i32 %sub139, 0
  br i1 %cmp140, label %if.end143, label %if.then141

if.then141:                                       ; preds = %lor.lhs.false138, %land.lhs.true135
  %122 = load i32, i32* %ans.addr, align 4
  %inc142 = add nsw i32 %122, 1
  store i32 %inc142, i32* %ans.addr, align 4
  br label %if.end143

if.end143:                                        ; preds = %if.then141, %lor.lhs.false138
  %123 = load i32, i32* %y.addr, align 4
  %sub144 = sub nsw i32 %123, 1
  %124 = load i32, i32* %x.addr, align 4
  %125 = load [25 x i32]*, [25 x i32]** %n.addr, align 4
  %arrayidx145 = getelementptr inbounds [25 x i32], [25 x i32]* %125, i32 %124
  %arrayidx146 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx145, i32 0, i32 %sub144
  %126 = load i32, i32* %arrayidx146, align 4
  %tobool147 = icmp ne i32 %126, 0
  br i1 %tobool147, label %lor.lhs.false151, label %land.lhs.true148

land.lhs.true148:                                 ; preds = %if.end143
  %127 = load i32, i32* %y.addr, align 4
  %sub149 = sub nsw i32 %127, 1
  %cmp150 = icmp sge i32 %sub149, 0
  br i1 %cmp150, label %if.then154, label %lor.lhs.false151

lor.lhs.false151:                                 ; preds = %land.lhs.true148, %if.end143
  %128 = load i32, i32* %y.addr, align 4
  %sub152 = sub nsw i32 %128, 1
  %cmp153 = icmp sge i32 %sub152, 0
  br i1 %cmp153, label %if.end156, label %if.then154

if.then154:                                       ; preds = %lor.lhs.false151, %land.lhs.true148
  %129 = load i32, i32* %ans.addr, align 4
  %inc155 = add nsw i32 %129, 1
  store i32 %inc155, i32* %ans.addr, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then154, %lor.lhs.false151
  %130 = load i32, i32* %ans.addr, align 4
  store i32 %130, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end156, %if.then
  %131 = load i32, i32* %retval, align 4
  ret i32 %131
}

; Function Attrs: noinline nounwind
define i32 @"\01?cal_zhou@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %ez = alloca [29 x [3 x i8]], align 1
  %n = alloca [25 x [25 x i32]], align 4
  %use = alloca [25 x [25 x i32]], align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %ans = alloca i32, align 4
  %sa = alloca i32, align 4
  %sb = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i8 = alloca i32, align 4
  %j12 = alloca i32, align 4
  %op = alloca i8, align 1
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [29 x [3 x i8]]* %ez to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([29 x [3 x i8]], [29 x [3 x i8]]* @"\01?ez@?1??cal_zhou@@YAHH@Z@3PAY02DA", i32 0, i32 0, i32 0), i32 87, i1 false)
  %1 = bitcast [25 x [25 x i32]]* %n to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 2500, i1 false)
  %2 = bitcast [25 x [25 x i32]]* %use to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 2500, i1 false)
  store i32 0, i32* %ans, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 20
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %4, 20
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [25 x [25 x i32]], [25 x [25 x i32]]* %use, i32 0, i32 %6
  %arrayidx4 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx, i32 0, i32 %5
  store i32 0, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %8, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 20, i32* %a, align 4
  store i32 2, i32* %b, align 4
  store i32 10, i32* %sa, align 4
  store i32 2, i32* %sb, align 4
  store i32 0, i32* %i8, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc30, %for.end7
  %9 = load i32, i32* %i8, align 4
  %10 = load i32, i32* %a, align 4
  %cmp10 = icmp slt i32 %9, %10
  br i1 %cmp10, label %for.body11, label %for.end32

for.body11:                                       ; preds = %for.cond9
  store i32 0, i32* %j12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc27, %for.body11
  %11 = load i32, i32* %j12, align 4
  %12 = load i32, i32* %b, align 4
  %cmp14 = icmp slt i32 %11, %12
  br i1 %cmp14, label %for.body15, label %for.end29

for.body15:                                       ; preds = %for.cond13
  %13 = load i32, i32* %j12, align 4
  %14 = load i32, i32* %i8, align 4
  %arrayidx16 = getelementptr inbounds [29 x [3 x i8]], [29 x [3 x i8]]* %ez, i32 0, i32 %14
  %arrayidx17 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx16, i32 0, i32 %13
  %15 = load i8, i8* %arrayidx17, align 1
  store i8 %15, i8* %op, align 1
  %16 = load i8, i8* %op, align 1
  %conv = sext i8 %16 to i32
  %cmp18 = icmp eq i32 %conv, 46
  br i1 %cmp18, label %if.then, label %if.else

if.then:                                          ; preds = %for.body15
  %17 = load i32, i32* %j12, align 4
  %18 = load i32, i32* %i8, align 4
  %arrayidx19 = getelementptr inbounds [25 x [25 x i32]], [25 x [25 x i32]]* %n, i32 0, i32 %18
  %arrayidx20 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx19, i32 0, i32 %17
  store i32 0, i32* %arrayidx20, align 4
  br label %if.end26

if.else:                                          ; preds = %for.body15
  %19 = load i8, i8* %op, align 1
  %conv21 = sext i8 %19 to i32
  %cmp22 = icmp eq i32 %conv21, 88
  br i1 %cmp22, label %if.then23, label %if.end

if.then23:                                        ; preds = %if.else
  %20 = load i32, i32* %j12, align 4
  %21 = load i32, i32* %i8, align 4
  %arrayidx24 = getelementptr inbounds [25 x [25 x i32]], [25 x [25 x i32]]* %n, i32 0, i32 %21
  %arrayidx25 = getelementptr inbounds [25 x i32], [25 x i32]* %arrayidx24, i32 0, i32 %20
  store i32 1, i32* %arrayidx25, align 4
  br label %if.end

if.end:                                           ; preds = %if.then23, %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %22 = load i32, i32* %j12, align 4
  %inc28 = add nsw i32 %22, 1
  store i32 %inc28, i32* %j12, align 4
  br label %for.cond13

for.end29:                                        ; preds = %for.cond13
  br label %for.inc30

for.inc30:                                        ; preds = %for.end29
  %23 = load i32, i32* %i8, align 4
  %inc31 = add nsw i32 %23, 1
  store i32 %inc31, i32* %i8, align 4
  br label %for.cond9

for.end32:                                        ; preds = %for.cond9
  %24 = load i32, i32* %ans, align 4
  %arraydecay = getelementptr inbounds [25 x [25 x i32]], [25 x [25 x i32]]* %n, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [25 x [25 x i32]], [25 x [25 x i32]]* %use, i32 0, i32 0
  %25 = load i32, i32* %sb, align 4
  %sub = sub nsw i32 %25, 1
  %26 = load i32, i32* %sa, align 4
  %sub34 = sub nsw i32 %26, 1
  %call = call i32 @"\01?run_zhou@@YAHHHQAY0BJ@H0H@Z"(i32 %sub34, i32 %sub, [25 x i32]* %arraydecay33, [25 x i32]* %arraydecay, i32 %24)
  %27 = load i32, i32* %mn.addr, align 4
  %add = add nsw i32 %call, %27
  store i32 %add, i32* %ans, align 4
  %28 = load i32, i32* %ans, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind
define i32 @"\01?tarjan_coww@@YAHHPAH0000H@Z"(i32 %u, i32* %head, i32* %next, i32* %col, i32* %to, i32* %si, i32 %co) #0 {
entry:
  %co.addr = alloca i32, align 4
  %si.addr = alloca i32*, align 4
  %to.addr = alloca i32*, align 4
  %col.addr = alloca i32*, align 4
  %next.addr = alloca i32*, align 4
  %head.addr = alloca i32*, align 4
  %u.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %v = alloca i32, align 4
  store i32 %co, i32* %co.addr, align 4
  store i32* %si, i32** %si.addr, align 4
  store i32* %to, i32** %to.addr, align 4
  store i32* %col, i32** %col.addr, align 4
  store i32* %next, i32** %next.addr, align 4
  store i32* %head, i32** %head.addr, align 4
  store i32 %u, i32* %u.addr, align 4
  %0 = load i32, i32* @"\01?ti@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @"\01?ti@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  %1 = load i32, i32* %u.addr, align 4
  %arrayidx = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %1
  store i32 %inc, i32* %arrayidx, align 4
  %2 = load i32, i32* %u.addr, align 4
  %arrayidx1 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?dfn@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %2
  store i32 %inc, i32* %arrayidx1, align 4
  %3 = load i32, i32* %u.addr, align 4
  %4 = load i32, i32* @"\01?top@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  %inc2 = add nsw i32 %4, 1
  store i32 %inc2, i32* @"\01?top@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  %arrayidx3 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?stack@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %inc2
  store i32 %3, i32* %arrayidx3, align 4
  %5 = load i32, i32* %u.addr, align 4
  %6 = load i32*, i32** %head.addr, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %6, i32 %5
  %7 = load i32, i32* %arrayidx4, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %10 = load i32*, i32** %to.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %10, i32 %9
  %11 = load i32, i32* %arrayidx5, align 4
  store i32 %11, i32* %v, align 4
  %12 = load i32, i32* %v, align 4
  %arrayidx6 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?dfn@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %12
  %13 = load i32, i32* %arrayidx6, align 4
  %tobool7 = icmp ne i32 %13, 0
  br i1 %tobool7, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %14 = load i32, i32* %co.addr, align 4
  %15 = load i32*, i32** %si.addr, align 4
  %16 = load i32*, i32** %to.addr, align 4
  %17 = load i32*, i32** %col.addr, align 4
  %18 = load i32*, i32** %next.addr, align 4
  %19 = load i32*, i32** %head.addr, align 4
  %20 = load i32, i32* %v, align 4
  %call = call i32 @"\01?tarjan_coww@@YAHHPAH0000H@Z"(i32 %20, i32* %19, i32* %18, i32* %17, i32* %16, i32* %15, i32 %14)
  store i32 %call, i32* %co.addr, align 4
  %21 = load i32, i32* %u.addr, align 4
  %arrayidx8 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %21
  %22 = load i32, i32* %arrayidx8, align 4
  %23 = load i32, i32* %v, align 4
  %arrayidx9 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %23
  %24 = load i32, i32* %arrayidx9, align 4
  %cmp = icmp slt i32 %22, %24
  br i1 %cmp, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %25 = load i32, i32* %v, align 4
  %arrayidx11 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %25
  %26 = load i32, i32* %arrayidx11, align 4
  %27 = load i32, i32* %u.addr, align 4
  %arrayidx12 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %27
  store i32 %26, i32* %arrayidx12, align 4
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then
  br label %if.end24

if.else:                                          ; preds = %for.body
  %28 = load i32, i32* %v, align 4
  %29 = load i32*, i32** %col.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %29, i32 %28
  %30 = load i32, i32* %arrayidx13, align 4
  %tobool14 = icmp ne i32 %30, 0
  br i1 %tobool14, label %if.end23, label %if.then15

if.then15:                                        ; preds = %if.else
  %31 = load i32, i32* %u.addr, align 4
  %arrayidx16 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %31
  %32 = load i32, i32* %arrayidx16, align 4
  %33 = load i32, i32* %v, align 4
  %arrayidx17 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?dfn@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %33
  %34 = load i32, i32* %arrayidx17, align 4
  %cmp18 = icmp slt i32 %32, %34
  br i1 %cmp18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %if.then15
  %35 = load i32, i32* %v, align 4
  %arrayidx20 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?dfn@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %35
  %36 = load i32, i32* %arrayidx20, align 4
  %37 = load i32, i32* %u.addr, align 4
  %arrayidx21 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %37
  store i32 %36, i32* %arrayidx21, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then19, %if.then15
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.else
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end24
  %38 = load i32, i32* %i, align 4
  %39 = load i32*, i32** %next.addr, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %39, i32 %38
  %40 = load i32, i32* %arrayidx25, align 4
  store i32 %40, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %41 = load i32, i32* %u.addr, align 4
  %arrayidx26 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %41
  %42 = load i32, i32* %arrayidx26, align 4
  %43 = load i32, i32* %u.addr, align 4
  %arrayidx27 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?dfn@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %43
  %44 = load i32, i32* %arrayidx27, align 4
  %cmp28 = icmp eq i32 %42, %44
  br i1 %cmp28, label %if.then29, label %if.end41

if.then29:                                        ; preds = %for.end
  %45 = load i32, i32* %co.addr, align 4
  %inc30 = add nsw i32 %45, 1
  store i32 %inc30, i32* %co.addr, align 4
  %46 = load i32, i32* %u.addr, align 4
  %47 = load i32*, i32** %col.addr, align 4
  %arrayidx31 = getelementptr inbounds i32, i32* %47, i32 %46
  store i32 %inc30, i32* %arrayidx31, align 4
  %48 = load i32, i32* %co.addr, align 4
  %49 = load i32*, i32** %si.addr, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %49, i32 %48
  %50 = load i32, i32* %arrayidx32, align 4
  %inc33 = add nsw i32 %50, 1
  store i32 %inc33, i32* %arrayidx32, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then29
  %51 = load i32, i32* @"\01?top@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  %arrayidx34 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?stack@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %51
  %52 = load i32, i32* %arrayidx34, align 4
  %53 = load i32, i32* %u.addr, align 4
  %cmp35 = icmp ne i32 %52, %53
  br i1 %cmp35, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %54 = load i32, i32* %co.addr, align 4
  %55 = load i32, i32* @"\01?top@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  %dec = add nsw i32 %55, -1
  store i32 %dec, i32* @"\01?top@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  %arrayidx36 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?stack@?1??tarjan_coww@@YAHHPAH0000H@Z@4PAHA", i32 0, i32 %55
  %56 = load i32, i32* %arrayidx36, align 4
  %57 = load i32*, i32** %col.addr, align 4
  %arrayidx37 = getelementptr inbounds i32, i32* %57, i32 %56
  store i32 %54, i32* %arrayidx37, align 4
  %58 = load i32, i32* %co.addr, align 4
  %59 = load i32*, i32** %si.addr, align 4
  %arrayidx38 = getelementptr inbounds i32, i32* %59, i32 %58
  %60 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %60, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %61 = load i32, i32* @"\01?top@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  %dec40 = add nsw i32 %61, -1
  store i32 %dec40, i32* @"\01?top@?1??tarjan_coww@@YAHHPAH0000H@Z@4HA", align 4
  br label %if.end41

if.end41:                                         ; preds = %while.end, %for.end
  %62 = load i32, i32* %co.addr, align 4
  ret i32 %62
}

; Function Attrs: noinline nounwind
define i32 @"\01?welcome_cow@@YAHH@Z"(i32 %mn) #0 {
entry:
  %retval = alloca i32, align 4
  %mn.addr = alloca i32, align 4
  %head = alloca [10010 x i32], align 4
  %to = alloca [10010 x i32], align 4
  %next = alloca [10010 x i32], align 4
  %col = alloca [10010 x i32], align 4
  %col_out = alloca [10010 x i32], align 4
  %co = alloca i32, align 4
  %si = alloca [10010 x i32], align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %e1 = alloca [509 x i32], align 4
  %e2 = alloca [509 x i32], align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %i7 = alloca i32, align 4
  %i19 = alloca i32, align 4
  %j = alloca i32, align 4
  %ans = alloca i32, align 4
  %i42 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [10010 x i32]* %head to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 40040, i1 false)
  %1 = bitcast [10010 x i32]* %to to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 40040, i1 false)
  %2 = bitcast [10010 x i32]* %next to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 40040, i1 false)
  %3 = bitcast [10010 x i32]* %col to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %3, i8 0, i32 40040, i1 false)
  %4 = bitcast [10010 x i32]* %col_out to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %4, i8 0, i32 40040, i1 false)
  store i32 0, i32* %co, align 4
  %5 = bitcast [10010 x i32]* %si to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %5, i8 0, i32 40040, i1 false)
  %6 = bitcast [509 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 bitcast ([509 x i32]* @"\01?e1@?1??welcome_cow@@YAHH@Z@3PAHA" to i8*), i32 2036, i1 false)
  %7 = bitcast [509 x i32]* %e2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %7, i8* align 4 bitcast ([509 x i32]* @"\01?e2@?1??welcome_cow@@YAHH@Z@3PAHA" to i8*), i32 2036, i1 false)
  store i32 500, i32* %n, align 4
  store i32 50, i32* %m, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %m, align 4
  %cmp = icmp sle i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  %arrayidx = getelementptr inbounds [509 x i32], [509 x i32]* %e1, i32 0, i32 %sub
  %11 = load i32, i32* %arrayidx, align 4
  store i32 %11, i32* %a, align 4
  %12 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %12, 1
  %arrayidx2 = getelementptr inbounds [509 x i32], [509 x i32]* %e2, i32 0, i32 %sub1
  %13 = load i32, i32* %arrayidx2, align 4
  store i32 %13, i32* %b, align 4
  %14 = load i32, i32* %b, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [10010 x i32], [10010 x i32]* %to, i32 0, i32 %15
  store i32 %14, i32* %arrayidx3, align 4
  %16 = load i32, i32* %a, align 4
  %arrayidx4 = getelementptr inbounds [10010 x i32], [10010 x i32]* %head, i32 0, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [10010 x i32], [10010 x i32]* %next, i32 0, i32 %18
  store i32 %17, i32* %arrayidx5, align 4
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %a, align 4
  %arrayidx6 = getelementptr inbounds [10010 x i32], [10010 x i32]* %head, i32 0, i32 %20
  store i32 %19, i32* %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i7, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc16, %for.end
  %22 = load i32, i32* %i7, align 4
  %23 = load i32, i32* %n, align 4
  %cmp9 = icmp sle i32 %22, %23
  br i1 %cmp9, label %for.body10, label %for.end18

for.body10:                                       ; preds = %for.cond8
  %24 = load i32, i32* %i7, align 4
  %arrayidx11 = getelementptr inbounds [10010 x i32], [10010 x i32]* %col, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx11, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body10
  br label %for.inc16

if.end:                                           ; preds = %for.body10
  %26 = load i32, i32* %co, align 4
  %arraydecay = getelementptr inbounds [10010 x i32], [10010 x i32]* %si, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [10010 x i32], [10010 x i32]* %to, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [10010 x i32], [10010 x i32]* %col, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [10010 x i32], [10010 x i32]* %next, i32 0, i32 0
  %arraydecay15 = getelementptr inbounds [10010 x i32], [10010 x i32]* %head, i32 0, i32 0
  %27 = load i32, i32* %i7, align 4
  %call = call i32 @"\01?tarjan_coww@@YAHHPAH0000H@Z"(i32 %27, i32* %arraydecay15, i32* %arraydecay14, i32* %arraydecay13, i32* %arraydecay12, i32* %arraydecay, i32 %26)
  store i32 %call, i32* %co, align 4
  br label %for.inc16

for.inc16:                                        ; preds = %if.end, %if.then
  %28 = load i32, i32* %i7, align 4
  %inc17 = add nsw i32 %28, 1
  store i32 %inc17, i32* %i7, align 4
  br label %for.cond8

for.end18:                                        ; preds = %for.cond8
  store i32 1, i32* %i19, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc39, %for.end18
  %29 = load i32, i32* %i19, align 4
  %30 = load i32, i32* %n, align 4
  %cmp21 = icmp sle i32 %29, %30
  br i1 %cmp21, label %for.body22, label %for.end41

for.body22:                                       ; preds = %for.cond20
  %31 = load i32, i32* %i19, align 4
  %arrayidx23 = getelementptr inbounds [10010 x i32], [10010 x i32]* %head, i32 0, i32 %31
  %32 = load i32, i32* %arrayidx23, align 4
  store i32 %32, i32* %j, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc36, %for.body22
  %33 = load i32, i32* %j, align 4
  %tobool25 = icmp ne i32 %33, 0
  br i1 %tobool25, label %for.body26, label %for.end38

for.body26:                                       ; preds = %for.cond24
  %34 = load i32, i32* %i19, align 4
  %arrayidx27 = getelementptr inbounds [10010 x i32], [10010 x i32]* %col, i32 0, i32 %34
  %35 = load i32, i32* %arrayidx27, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx28 = getelementptr inbounds [10010 x i32], [10010 x i32]* %to, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx28, align 4
  %arrayidx29 = getelementptr inbounds [10010 x i32], [10010 x i32]* %col, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx29, align 4
  %cmp30 = icmp eq i32 %35, %38
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %for.body26
  br label %for.inc36

if.end32:                                         ; preds = %for.body26
  %39 = load i32, i32* %i19, align 4
  %arrayidx33 = getelementptr inbounds [10010 x i32], [10010 x i32]* %col, i32 0, i32 %39
  %40 = load i32, i32* %arrayidx33, align 4
  %arrayidx34 = getelementptr inbounds [10010 x i32], [10010 x i32]* %col_out, i32 0, i32 %40
  %41 = load i32, i32* %arrayidx34, align 4
  %inc35 = add nsw i32 %41, 1
  store i32 %inc35, i32* %arrayidx34, align 4
  br label %for.inc36

for.inc36:                                        ; preds = %if.end32, %if.then31
  %42 = load i32, i32* %j, align 4
  %arrayidx37 = getelementptr inbounds [10010 x i32], [10010 x i32]* %next, i32 0, i32 %42
  %43 = load i32, i32* %arrayidx37, align 4
  store i32 %43, i32* %j, align 4
  br label %for.cond24

for.end38:                                        ; preds = %for.cond24
  br label %for.inc39

for.inc39:                                        ; preds = %for.end38
  %44 = load i32, i32* %i19, align 4
  %inc40 = add nsw i32 %44, 1
  store i32 %inc40, i32* %i19, align 4
  br label %for.cond20

for.end41:                                        ; preds = %for.cond20
  %45 = load i32, i32* %mn.addr, align 4
  store i32 %45, i32* %ans, align 4
  store i32 1, i32* %i42, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc55, %for.end41
  %46 = load i32, i32* %i42, align 4
  %47 = load i32, i32* %co, align 4
  %cmp44 = icmp sle i32 %46, %47
  br i1 %cmp44, label %for.body45, label %for.end57

for.body45:                                       ; preds = %for.cond43
  %48 = load i32, i32* %i42, align 4
  %arrayidx46 = getelementptr inbounds [10010 x i32], [10010 x i32]* %col_out, i32 0, i32 %48
  %49 = load i32, i32* %arrayidx46, align 4
  %cmp47 = icmp eq i32 %49, 0
  br i1 %cmp47, label %if.then48, label %if.end54

if.then48:                                        ; preds = %for.body45
  %50 = load i32, i32* %ans, align 4
  %cmp49 = icmp eq i32 %50, 0
  br i1 %cmp49, label %if.then50, label %if.else

if.then50:                                        ; preds = %if.then48
  %51 = load i32, i32* %i42, align 4
  %arrayidx51 = getelementptr inbounds [10010 x i32], [10010 x i32]* %si, i32 0, i32 %51
  %52 = load i32, i32* %arrayidx51, align 4
  store i32 %52, i32* %ans, align 4
  br label %if.end53

if.else:                                          ; preds = %if.then48
  %53 = load i32, i32* %i42, align 4
  %call52 = call i32 @"\01?cal_zhou@@YAHH@Z"(i32 %53)
  store i32 %call52, i32* %retval, align 4
  br label %return

if.end53:                                         ; preds = %if.then50
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %for.body45
  br label %for.inc55

for.inc55:                                        ; preds = %if.end54
  %54 = load i32, i32* %i42, align 4
  %inc56 = add nsw i32 %54, 1
  store i32 %inc56, i32* %i42, align 4
  br label %for.cond43

for.end57:                                        ; preds = %for.cond43
  %55 = load i32, i32* %ans, align 4
  store i32 %55, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end57, %if.else
  %56 = load i32, i32* %retval, align 4
  ret i32 %56
}

; Function Attrs: noinline nounwind
define i32 @"\01?play_mice@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %a = alloca [110 x [100 x i32]], align 4
  %c = alloca [110 x [110 x i32]], align 4
  %p = alloca [110 x [110 x i32]], align 4
  %sum = alloca i32, align 4
  %e1 = alloca [2 x [50 x i32]], align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i16 = alloca i32, align 4
  %i30 = alloca i32, align 4
  %i45 = alloca i32, align 4
  %j49 = alloca i32, align 4
  %ans = alloca i32, align 4
  %R = alloca i32, align 4
  %C = alloca i32, align 4
  %ret = alloca i32, align 4
  %able = alloca i32, align 4
  %i85 = alloca i32, align 4
  %j89 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [110 x [100 x i32]]* %a to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 44000, i1 false)
  %1 = bitcast [110 x [110 x i32]]* %c to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 48400, i1 false)
  %2 = bitcast [110 x [110 x i32]]* %p to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 48400, i1 false)
  store i32 0, i32* %sum, align 4
  %3 = bitcast [2 x [50 x i32]]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([2 x [50 x i32]]* @"\01?e1@?1??play_mice@@YAHH@Z@3PAY0DC@HA" to i8*), i32 400, i1 false)
  store i32 2, i32* %m, align 4
  store i32 50, i32* %n, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %m, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %n, align 4
  %cmp2 = icmp slt i32 %6, %7
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [2 x [50 x i32]], [2 x [50 x i32]]* %e1, i32 0, i32 %9
  %arrayidx4 = getelementptr inbounds [50 x i32], [50 x i32]* %arrayidx, i32 0, i32 %8
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 %12
  %arrayidx6 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx5, i32 0, i32 %11
  store i32 %10, i32* %arrayidx6, align 4
  %13 = load i32, i32* %sum, align 4
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 %15
  %arrayidx8 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx7, i32 0, i32 %14
  %16 = load i32, i32* %arrayidx8, align 4
  %add = add nsw i32 %13, %16
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  %arrayidx12 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx12, i32 0, i32 0
  %19 = load i32, i32* %arrayidx13, align 4
  %arrayidx14 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %c, i32 0, i32 0
  %arrayidx15 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx14, i32 0, i32 0
  store i32 %19, i32* %arrayidx15, align 4
  store i32 1, i32* %i16, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc27, %for.end11
  %20 = load i32, i32* %i16, align 4
  %21 = load i32, i32* %m, align 4
  %cmp18 = icmp slt i32 %20, %21
  br i1 %cmp18, label %for.body19, label %for.end29

for.body19:                                       ; preds = %for.cond17
  %22 = load i32, i32* %i16, align 4
  %arrayidx20 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 %22
  %arrayidx21 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx20, i32 0, i32 0
  %23 = load i32, i32* %arrayidx21, align 4
  %24 = load i32, i32* %i16, align 4
  %sub = sub nsw i32 %24, 1
  %arrayidx22 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 %sub
  %arrayidx23 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx22, i32 0, i32 0
  %25 = load i32, i32* %arrayidx23, align 4
  %sub24 = sub nsw i32 %23, %25
  %26 = load i32, i32* %i16, align 4
  %arrayidx25 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %c, i32 0, i32 %26
  %arrayidx26 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx25, i32 0, i32 0
  store i32 %sub24, i32* %arrayidx26, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %for.body19
  %27 = load i32, i32* %i16, align 4
  %inc28 = add nsw i32 %27, 1
  store i32 %inc28, i32* %i16, align 4
  br label %for.cond17

for.end29:                                        ; preds = %for.cond17
  store i32 1, i32* %i30, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.end29
  %28 = load i32, i32* %i30, align 4
  %29 = load i32, i32* %n, align 4
  %cmp32 = icmp slt i32 %28, %29
  br i1 %cmp32, label %for.body33, label %for.end44

for.body33:                                       ; preds = %for.cond31
  %30 = load i32, i32* %i30, align 4
  %arrayidx34 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx34, i32 0, i32 %30
  %31 = load i32, i32* %arrayidx35, align 4
  %32 = load i32, i32* %i30, align 4
  %sub36 = sub nsw i32 %32, 1
  %arrayidx37 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx37, i32 0, i32 %sub36
  %33 = load i32, i32* %arrayidx38, align 4
  %sub39 = sub nsw i32 %31, %33
  %34 = load i32, i32* %i30, align 4
  %arrayidx40 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %c, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx40, i32 0, i32 %34
  store i32 %sub39, i32* %arrayidx41, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %for.body33
  %35 = load i32, i32* %i30, align 4
  %inc43 = add nsw i32 %35, 1
  store i32 %inc43, i32* %i30, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  store i32 1, i32* %i45, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc73, %for.end44
  %36 = load i32, i32* %i45, align 4
  %37 = load i32, i32* %m, align 4
  %cmp47 = icmp slt i32 %36, %37
  br i1 %cmp47, label %for.body48, label %for.end75

for.body48:                                       ; preds = %for.cond46
  store i32 1, i32* %j49, align 4
  br label %for.cond50

for.cond50:                                       ; preds = %for.inc70, %for.body48
  %38 = load i32, i32* %j49, align 4
  %39 = load i32, i32* %n, align 4
  %cmp51 = icmp slt i32 %38, %39
  br i1 %cmp51, label %for.body52, label %for.end72

for.body52:                                       ; preds = %for.cond50
  %40 = load i32, i32* %j49, align 4
  %41 = load i32, i32* %i45, align 4
  %arrayidx53 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 %41
  %arrayidx54 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx53, i32 0, i32 %40
  %42 = load i32, i32* %arrayidx54, align 4
  %43 = load i32, i32* %j49, align 4
  %sub55 = sub nsw i32 %43, 1
  %44 = load i32, i32* %i45, align 4
  %sub56 = sub nsw i32 %44, 1
  %arrayidx57 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 %sub56
  %arrayidx58 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx57, i32 0, i32 %sub55
  %45 = load i32, i32* %arrayidx58, align 4
  %add59 = add nsw i32 %42, %45
  %46 = load i32, i32* %j49, align 4
  %47 = load i32, i32* %i45, align 4
  %sub60 = sub nsw i32 %47, 1
  %arrayidx61 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 %sub60
  %arrayidx62 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx61, i32 0, i32 %46
  %48 = load i32, i32* %arrayidx62, align 4
  %sub63 = sub nsw i32 %add59, %48
  %49 = load i32, i32* %j49, align 4
  %sub64 = sub nsw i32 %49, 1
  %50 = load i32, i32* %i45, align 4
  %arrayidx65 = getelementptr inbounds [110 x [100 x i32]], [110 x [100 x i32]]* %a, i32 0, i32 %50
  %arrayidx66 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx65, i32 0, i32 %sub64
  %51 = load i32, i32* %arrayidx66, align 4
  %sub67 = sub nsw i32 %sub63, %51
  %52 = load i32, i32* %j49, align 4
  %53 = load i32, i32* %i45, align 4
  %arrayidx68 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %c, i32 0, i32 %53
  %arrayidx69 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx68, i32 0, i32 %52
  store i32 %sub67, i32* %arrayidx69, align 4
  br label %for.inc70

for.inc70:                                        ; preds = %for.body52
  %54 = load i32, i32* %j49, align 4
  %inc71 = add nsw i32 %54, 1
  store i32 %inc71, i32* %j49, align 4
  br label %for.cond50

for.end72:                                        ; preds = %for.cond50
  br label %for.inc73

for.inc73:                                        ; preds = %for.end72
  %55 = load i32, i32* %i45, align 4
  %inc74 = add nsw i32 %55, 1
  store i32 %inc74, i32* %i45, align 4
  br label %for.cond46

for.end75:                                        ; preds = %for.cond46
  %56 = load i32, i32* %mn.addr, align 4
  %and = and i32 %56, 20
  store i32 %and, i32* %ans, align 4
  %57 = load i32, i32* %m, align 4
  store i32 %57, i32* %R, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc152, %for.end75
  %58 = load i32, i32* %R, align 4
  %cmp77 = icmp sge i32 %58, 1
  br i1 %cmp77, label %for.body78, label %for.end154

for.body78:                                       ; preds = %for.cond76
  %59 = load i32, i32* %n, align 4
  store i32 %59, i32* %C, align 4
  br label %for.cond79

for.cond79:                                       ; preds = %for.inc150, %for.body78
  %60 = load i32, i32* %C, align 4
  %cmp80 = icmp sge i32 %60, 1
  br i1 %cmp80, label %for.body81, label %for.end151

for.body81:                                       ; preds = %for.cond79
  %61 = load i32, i32* %R, align 4
  %62 = load i32, i32* %C, align 4
  %mul = mul nsw i32 %61, %62
  store i32 %mul, i32* %ret, align 4
  %63 = load i32, i32* %sum, align 4
  %64 = load i32, i32* %ret, align 4
  %rem = srem i32 %63, %64
  %cmp82 = icmp ne i32 %rem, 0
  br i1 %cmp82, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body81
  %65 = load i32, i32* %ret, align 4
  %66 = load i32, i32* %ans, align 4
  %cmp83 = icmp sle i32 %65, %66
  br i1 %cmp83, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body81
  br label %for.inc150

if.end:                                           ; preds = %lor.lhs.false
  store i32 1, i32* %able, align 4
  %arraydecay = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 0
  %67 = bitcast [110 x i32]* %arraydecay to i8*
  %arraydecay84 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %c, i32 0, i32 0
  %68 = bitcast [110 x i32]* %arraydecay84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %67, i8* align 4 %68, i32 48400, i1 false)
  store i32 0, i32* %i85, align 4
  br label %for.cond86

for.cond86:                                       ; preds = %for.inc142, %if.end
  %69 = load i32, i32* %i85, align 4
  %70 = load i32, i32* %m, align 4
  %cmp87 = icmp slt i32 %69, %70
  br i1 %cmp87, label %for.body88, label %for.end144

for.body88:                                       ; preds = %for.cond86
  store i32 0, i32* %j89, align 4
  br label %for.cond90

for.cond90:                                       ; preds = %for.inc139, %for.body88
  %71 = load i32, i32* %j89, align 4
  %72 = load i32, i32* %n, align 4
  %cmp91 = icmp slt i32 %71, %72
  br i1 %cmp91, label %for.body92, label %for.end141

for.body92:                                       ; preds = %for.cond90
  %73 = load i32, i32* %j89, align 4
  %74 = load i32, i32* %i85, align 4
  %arrayidx93 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %74
  %arrayidx94 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx93, i32 0, i32 %73
  %75 = load i32, i32* %arrayidx94, align 4
  %cmp95 = icmp slt i32 %75, 0
  br i1 %cmp95, label %if.then96, label %if.end97

if.then96:                                        ; preds = %for.body92
  store i32 0, i32* %able, align 4
  br label %for.end141

if.end97:                                         ; preds = %for.body92
  %76 = load i32, i32* %j89, align 4
  %77 = load i32, i32* %i85, align 4
  %arrayidx98 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %77
  %arrayidx99 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx98, i32 0, i32 %76
  %78 = load i32, i32* %arrayidx99, align 4
  %cmp100 = icmp eq i32 %78, 0
  br i1 %cmp100, label %if.then101, label %if.end102

if.then101:                                       ; preds = %if.end97
  br label %for.inc139

if.end102:                                        ; preds = %if.end97
  %79 = load i32, i32* %i85, align 4
  %80 = load i32, i32* %R, align 4
  %add103 = add nsw i32 %79, %80
  %81 = load i32, i32* %m, align 4
  %cmp104 = icmp sgt i32 %add103, %81
  br i1 %cmp104, label %if.then108, label %lor.lhs.false105

lor.lhs.false105:                                 ; preds = %if.end102
  %82 = load i32, i32* %j89, align 4
  %83 = load i32, i32* %C, align 4
  %add106 = add nsw i32 %82, %83
  %84 = load i32, i32* %n, align 4
  %cmp107 = icmp sgt i32 %add106, %84
  br i1 %cmp107, label %if.then108, label %if.end109

if.then108:                                       ; preds = %lor.lhs.false105, %if.end102
  store i32 0, i32* %able, align 4
  br label %for.end141

if.end109:                                        ; preds = %lor.lhs.false105
  %85 = load i32, i32* %j89, align 4
  %86 = load i32, i32* %C, align 4
  %add110 = add nsw i32 %85, %86
  %87 = load i32, i32* %i85, align 4
  %arrayidx111 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %87
  %arrayidx112 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx111, i32 0, i32 %add110
  %88 = load i32, i32* %arrayidx112, align 4
  %89 = load i32, i32* %j89, align 4
  %90 = load i32, i32* %i85, align 4
  %arrayidx113 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %90
  %arrayidx114 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx113, i32 0, i32 %89
  %91 = load i32, i32* %arrayidx114, align 4
  %add115 = add nsw i32 %88, %91
  %92 = load i32, i32* %j89, align 4
  %93 = load i32, i32* %C, align 4
  %add116 = add nsw i32 %92, %93
  %94 = load i32, i32* %i85, align 4
  %arrayidx117 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %94
  %arrayidx118 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx117, i32 0, i32 %add116
  store i32 %add115, i32* %arrayidx118, align 4
  %95 = load i32, i32* %j89, align 4
  %96 = load i32, i32* %i85, align 4
  %97 = load i32, i32* %R, align 4
  %add119 = add nsw i32 %96, %97
  %arrayidx120 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %add119
  %arrayidx121 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx120, i32 0, i32 %95
  %98 = load i32, i32* %arrayidx121, align 4
  %99 = load i32, i32* %j89, align 4
  %100 = load i32, i32* %i85, align 4
  %arrayidx122 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %100
  %arrayidx123 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx122, i32 0, i32 %99
  %101 = load i32, i32* %arrayidx123, align 4
  %add124 = add nsw i32 %98, %101
  %102 = load i32, i32* %j89, align 4
  %103 = load i32, i32* %i85, align 4
  %104 = load i32, i32* %R, align 4
  %add125 = add nsw i32 %103, %104
  %arrayidx126 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %add125
  %arrayidx127 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx126, i32 0, i32 %102
  store i32 %add124, i32* %arrayidx127, align 4
  %105 = load i32, i32* %j89, align 4
  %106 = load i32, i32* %C, align 4
  %add128 = add nsw i32 %105, %106
  %107 = load i32, i32* %i85, align 4
  %108 = load i32, i32* %R, align 4
  %add129 = add nsw i32 %107, %108
  %arrayidx130 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %add129
  %arrayidx131 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx130, i32 0, i32 %add128
  %109 = load i32, i32* %arrayidx131, align 4
  %110 = load i32, i32* %j89, align 4
  %111 = load i32, i32* %i85, align 4
  %arrayidx132 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %111
  %arrayidx133 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx132, i32 0, i32 %110
  %112 = load i32, i32* %arrayidx133, align 4
  %sub134 = sub nsw i32 %109, %112
  %113 = load i32, i32* %j89, align 4
  %114 = load i32, i32* %C, align 4
  %add135 = add nsw i32 %113, %114
  %115 = load i32, i32* %i85, align 4
  %116 = load i32, i32* %R, align 4
  %add136 = add nsw i32 %115, %116
  %arrayidx137 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %p, i32 0, i32 %add136
  %arrayidx138 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx137, i32 0, i32 %add135
  store i32 %sub134, i32* %arrayidx138, align 4
  br label %for.inc139

for.inc139:                                       ; preds = %if.end109, %if.then101
  %117 = load i32, i32* %j89, align 4
  %inc140 = add nsw i32 %117, 1
  store i32 %inc140, i32* %j89, align 4
  br label %for.cond90

for.end141:                                       ; preds = %if.then108, %if.then96, %for.cond90
  br label %for.inc142

for.inc142:                                       ; preds = %for.end141
  %118 = load i32, i32* %i85, align 4
  %inc143 = add nsw i32 %118, 1
  store i32 %inc143, i32* %i85, align 4
  br label %for.cond86

for.end144:                                       ; preds = %for.cond86
  %119 = load i32, i32* %able, align 4
  %tobool = icmp ne i32 %119, 0
  br i1 %tobool, label %if.end146, label %if.then145

if.then145:                                       ; preds = %for.end144
  br label %for.inc150

if.end146:                                        ; preds = %for.end144
  %120 = load i32, i32* %ans, align 4
  %121 = load i32, i32* %ret, align 4
  %cmp147 = icmp slt i32 %120, %121
  br i1 %cmp147, label %if.then148, label %if.end149

if.then148:                                       ; preds = %if.end146
  %122 = load i32, i32* %ret, align 4
  store i32 %122, i32* %ans, align 4
  br label %if.end149

if.end149:                                        ; preds = %if.then148, %if.end146
  br label %for.inc150

for.inc150:                                       ; preds = %if.end149, %if.then145, %if.then
  %123 = load i32, i32* %C, align 4
  %dec = add nsw i32 %123, -1
  store i32 %dec, i32* %C, align 4
  br label %for.cond79

for.end151:                                       ; preds = %for.cond79
  br label %for.inc152

for.inc152:                                       ; preds = %for.end151
  %124 = load i32, i32* %R, align 4
  %dec153 = add nsw i32 %124, -1
  store i32 %dec153, i32* %R, align 4
  br label %for.cond76

for.end154:                                       ; preds = %for.cond76
  %125 = load i32, i32* %sum, align 4
  %126 = load i32, i32* %ans, align 4
  %div = sdiv i32 %125, %126
  ret i32 %div
}

; Function Attrs: noinline nounwind
define i32 @"\01?max_ziju@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %e1 = alloca [109 x i32], align 4
  %e2 = alloca [109 x i32], align 4
  %N = alloca i32, align 4
  %M = alloca i32, align 4
  %K = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %sum = alloca [105 x i32], align 4
  %s1 = alloca [105 x i32], align 4
  %s2 = alloca [105 x i32], align 4
  %f = alloca [105 x [105 x [5 x i32]]], align 4
  %dp = alloca [105 x [105 x i32]], align 4
  %ta2 = alloca i32, align 4
  %i = alloca i32, align 4
  %i5 = alloca i32, align 4
  %j = alloca i32, align 4
  %k17 = alloca i32, align 4
  %ta1 = alloca i32, align 4
  %i53 = alloca i32, align 4
  %i72 = alloca i32, align 4
  %j76 = alloca i32, align 4
  %k80 = alloca i32, align 4
  %l = alloca i32, align 4
  %l142 = alloca i32, align 4
  %l177 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [109 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([109 x i32]* @"\01?e1@?1??max_ziju@@YAHH@Z@3PAHA" to i8*), i32 436, i1 false)
  %1 = bitcast [109 x i32]* %e2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([109 x i32]* @"\01?e2@?1??max_ziju@@YAHH@Z@3PAHA" to i8*), i32 436, i1 false)
  %2 = bitcast [105 x i32]* %sum to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 420, i1 false)
  %3 = bitcast [105 x i32]* %s1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %3, i8 0, i32 420, i1 false)
  %4 = bitcast [105 x i32]* %s2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %4, i8 0, i32 420, i1 false)
  %5 = bitcast [105 x [105 x [5 x i32]]]* %f to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %5, i8 0, i32 220500, i1 false)
  %6 = bitcast [105 x [105 x i32]]* %dp to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %6, i8 0, i32 44100, i1 false)
  store i32 100, i32* %N, align 4
  store i32 2, i32* %M, align 4
  store i32 2, i32* %K, align 4
  %7 = load i32, i32* %mn.addr, align 4
  store i32 %7, i32* %ta2, align 4
  %8 = load i32, i32* %M, align 4
  %cmp = icmp eq i32 %8, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %N, align 4
  %cmp1 = icmp sle i32 %9, %10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx = getelementptr inbounds [109 x i32], [109 x i32]* %e1, i32 0, i32 %sub
  %12 = load i32, i32* %arrayidx, align 4
  store i32 %12, i32* %k, align 4
  %13 = load i32, i32* %i, align 4
  %sub2 = sub nsw i32 %13, 1
  %arrayidx3 = getelementptr inbounds [105 x i32], [105 x i32]* %sum, i32 0, i32 %sub2
  %14 = load i32, i32* %arrayidx3, align 4
  %15 = load i32, i32* %k, align 4
  %add = add nsw i32 %14, %15
  %16 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [105 x i32], [105 x i32]* %sum, i32 0, i32 %16
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i5, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc48, %for.end
  %18 = load i32, i32* %i5, align 4
  %19 = load i32, i32* %N, align 4
  %cmp7 = icmp sle i32 %18, %19
  br i1 %cmp7, label %for.body8, label %for.end50

for.body8:                                        ; preds = %for.cond6
  store i32 1, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc45, %for.body8
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %K, align 4
  %cmp10 = icmp sle i32 %20, %21
  br i1 %cmp10, label %for.body11, label %for.end47

for.body11:                                       ; preds = %for.cond9
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %i5, align 4
  %sub12 = sub nsw i32 %23, 1
  %arrayidx13 = getelementptr inbounds [105 x [105 x i32]], [105 x [105 x i32]]* %dp, i32 0, i32 %sub12
  %arrayidx14 = getelementptr inbounds [105 x i32], [105 x i32]* %arrayidx13, i32 0, i32 %22
  %24 = load i32, i32* %arrayidx14, align 4
  %25 = load i32, i32* %j, align 4
  %26 = load i32, i32* %i5, align 4
  %arrayidx15 = getelementptr inbounds [105 x [105 x i32]], [105 x [105 x i32]]* %dp, i32 0, i32 %26
  %arrayidx16 = getelementptr inbounds [105 x i32], [105 x i32]* %arrayidx15, i32 0, i32 %25
  store i32 %24, i32* %arrayidx16, align 4
  store i32 0, i32* %k17, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc42, %for.body11
  %27 = load i32, i32* %k17, align 4
  %28 = load i32, i32* %i5, align 4
  %sub19 = sub nsw i32 %28, 1
  %cmp20 = icmp sle i32 %27, %sub19
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond18
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i5, align 4
  %arrayidx22 = getelementptr inbounds [105 x [105 x i32]], [105 x [105 x i32]]* %dp, i32 0, i32 %30
  %arrayidx23 = getelementptr inbounds [105 x i32], [105 x i32]* %arrayidx22, i32 0, i32 %29
  %31 = load i32, i32* %arrayidx23, align 4
  %32 = load i32, i32* %j, align 4
  %sub24 = sub nsw i32 %32, 1
  %33 = load i32, i32* %k17, align 4
  %arrayidx25 = getelementptr inbounds [105 x [105 x i32]], [105 x [105 x i32]]* %dp, i32 0, i32 %33
  %arrayidx26 = getelementptr inbounds [105 x i32], [105 x i32]* %arrayidx25, i32 0, i32 %sub24
  %34 = load i32, i32* %arrayidx26, align 4
  %35 = load i32, i32* %i5, align 4
  %arrayidx27 = getelementptr inbounds [105 x i32], [105 x i32]* %sum, i32 0, i32 %35
  %36 = load i32, i32* %arrayidx27, align 4
  %add28 = add nsw i32 %34, %36
  %37 = load i32, i32* %k17, align 4
  %arrayidx29 = getelementptr inbounds [105 x i32], [105 x i32]* %sum, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx29, align 4
  %sub30 = sub nsw i32 %add28, %38
  %cmp31 = icmp slt i32 %31, %sub30
  br i1 %cmp31, label %if.then32, label %if.end

if.then32:                                        ; preds = %for.body21
  %39 = load i32, i32* %j, align 4
  %sub33 = sub nsw i32 %39, 1
  %40 = load i32, i32* %k17, align 4
  %arrayidx34 = getelementptr inbounds [105 x [105 x i32]], [105 x [105 x i32]]* %dp, i32 0, i32 %40
  %arrayidx35 = getelementptr inbounds [105 x i32], [105 x i32]* %arrayidx34, i32 0, i32 %sub33
  %41 = load i32, i32* %arrayidx35, align 4
  %42 = load i32, i32* %i5, align 4
  %arrayidx36 = getelementptr inbounds [105 x i32], [105 x i32]* %sum, i32 0, i32 %42
  %43 = load i32, i32* %arrayidx36, align 4
  %add37 = add nsw i32 %41, %43
  %44 = load i32, i32* %k17, align 4
  %arrayidx38 = getelementptr inbounds [105 x i32], [105 x i32]* %sum, i32 0, i32 %44
  %45 = load i32, i32* %arrayidx38, align 4
  %sub39 = sub nsw i32 %add37, %45
  %46 = load i32, i32* %j, align 4
  %47 = load i32, i32* %i5, align 4
  %arrayidx40 = getelementptr inbounds [105 x [105 x i32]], [105 x [105 x i32]]* %dp, i32 0, i32 %47
  %arrayidx41 = getelementptr inbounds [105 x i32], [105 x i32]* %arrayidx40, i32 0, i32 %46
  store i32 %sub39, i32* %arrayidx41, align 4
  br label %if.end

if.end:                                           ; preds = %if.then32, %for.body21
  br label %for.inc42

for.inc42:                                        ; preds = %if.end
  %48 = load i32, i32* %k17, align 4
  %inc43 = add nsw i32 %48, 1
  store i32 %inc43, i32* %k17, align 4
  br label %for.cond18

for.end44:                                        ; preds = %for.cond18
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %49 = load i32, i32* %j, align 4
  %inc46 = add nsw i32 %49, 1
  store i32 %inc46, i32* %j, align 4
  br label %for.cond9

for.end47:                                        ; preds = %for.cond9
  br label %for.inc48

for.inc48:                                        ; preds = %for.end47
  %50 = load i32, i32* %i5, align 4
  %inc49 = add nsw i32 %50, 1
  store i32 %inc49, i32* %i5, align 4
  br label %for.cond6

for.end50:                                        ; preds = %for.cond6
  %51 = load i32, i32* %K, align 4
  %52 = load i32, i32* %N, align 4
  %arrayidx51 = getelementptr inbounds [105 x [105 x i32]], [105 x [105 x i32]]* %dp, i32 0, i32 %52
  %arrayidx52 = getelementptr inbounds [105 x i32], [105 x i32]* %arrayidx51, i32 0, i32 %51
  %53 = load i32, i32* %arrayidx52, align 4
  store i32 %53, i32* %ta1, align 4
  br label %if.end223

if.else:                                          ; preds = %entry
  store i32 1, i32* %i53, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc69, %if.else
  %54 = load i32, i32* %i53, align 4
  %55 = load i32, i32* %N, align 4
  %cmp55 = icmp sle i32 %54, %55
  br i1 %cmp55, label %for.body56, label %for.end71

for.body56:                                       ; preds = %for.cond54
  %56 = load i32, i32* %i53, align 4
  %sub57 = sub nsw i32 %56, 1
  %arrayidx58 = getelementptr inbounds [109 x i32], [109 x i32]* %e1, i32 0, i32 %sub57
  %57 = load i32, i32* %arrayidx58, align 4
  store i32 %57, i32* %x, align 4
  %58 = load i32, i32* %i53, align 4
  %sub59 = sub nsw i32 %58, 1
  %arrayidx60 = getelementptr inbounds [109 x i32], [109 x i32]* %e2, i32 0, i32 %sub59
  %59 = load i32, i32* %arrayidx60, align 4
  store i32 %59, i32* %y, align 4
  %60 = load i32, i32* %i53, align 4
  %sub61 = sub nsw i32 %60, 1
  %arrayidx62 = getelementptr inbounds [105 x i32], [105 x i32]* %s1, i32 0, i32 %sub61
  %61 = load i32, i32* %arrayidx62, align 4
  %62 = load i32, i32* %x, align 4
  %add63 = add nsw i32 %61, %62
  %63 = load i32, i32* %i53, align 4
  %arrayidx64 = getelementptr inbounds [105 x i32], [105 x i32]* %s1, i32 0, i32 %63
  store i32 %add63, i32* %arrayidx64, align 4
  %64 = load i32, i32* %i53, align 4
  %sub65 = sub nsw i32 %64, 1
  %arrayidx66 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %sub65
  %65 = load i32, i32* %arrayidx66, align 4
  %66 = load i32, i32* %y, align 4
  %add67 = add nsw i32 %65, %66
  %67 = load i32, i32* %i53, align 4
  %arrayidx68 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %67
  store i32 %add67, i32* %arrayidx68, align 4
  br label %for.inc69

for.inc69:                                        ; preds = %for.body56
  %68 = load i32, i32* %i53, align 4
  %inc70 = add nsw i32 %68, 1
  store i32 %inc70, i32* %i53, align 4
  br label %for.cond54

for.end71:                                        ; preds = %for.cond54
  store i32 1, i32* %i72, align 4
  br label %for.cond73

for.cond73:                                       ; preds = %for.inc217, %for.end71
  %69 = load i32, i32* %i72, align 4
  %70 = load i32, i32* %K, align 4
  %cmp74 = icmp sle i32 %69, %70
  br i1 %cmp74, label %for.body75, label %for.end219

for.body75:                                       ; preds = %for.cond73
  store i32 1, i32* %j76, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc214, %for.body75
  %71 = load i32, i32* %j76, align 4
  %72 = load i32, i32* %N, align 4
  %cmp78 = icmp sle i32 %71, %72
  br i1 %cmp78, label %for.body79, label %for.end216

for.body79:                                       ; preds = %for.cond77
  store i32 1, i32* %k80, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc211, %for.body79
  %73 = load i32, i32* %k80, align 4
  %74 = load i32, i32* %N, align 4
  %cmp82 = icmp sle i32 %73, %74
  br i1 %cmp82, label %for.body83, label %for.end213

for.body83:                                       ; preds = %for.cond81
  %75 = load i32, i32* %i72, align 4
  %76 = load i32, i32* %k80, align 4
  %77 = load i32, i32* %j76, align 4
  %sub84 = sub nsw i32 %77, 1
  %arrayidx85 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %sub84
  %arrayidx86 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx85, i32 0, i32 %76
  %arrayidx87 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx86, i32 0, i32 %75
  %78 = load i32, i32* %arrayidx87, align 4
  %79 = load i32, i32* %i72, align 4
  %80 = load i32, i32* %k80, align 4
  %sub88 = sub nsw i32 %80, 1
  %81 = load i32, i32* %j76, align 4
  %arrayidx89 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %81
  %arrayidx90 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx89, i32 0, i32 %sub88
  %arrayidx91 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx90, i32 0, i32 %79
  %82 = load i32, i32* %arrayidx91, align 4
  %cmp92 = icmp sgt i32 %78, %82
  br i1 %cmp92, label %if.then93, label %if.else101

if.then93:                                        ; preds = %for.body83
  %83 = load i32, i32* %i72, align 4
  %84 = load i32, i32* %k80, align 4
  %85 = load i32, i32* %j76, align 4
  %sub94 = sub nsw i32 %85, 1
  %arrayidx95 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %sub94
  %arrayidx96 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx95, i32 0, i32 %84
  %arrayidx97 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx96, i32 0, i32 %83
  %86 = load i32, i32* %arrayidx97, align 4
  %87 = load i32, i32* %i72, align 4
  %88 = load i32, i32* %k80, align 4
  %89 = load i32, i32* %j76, align 4
  %arrayidx98 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %89
  %arrayidx99 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx98, i32 0, i32 %88
  %arrayidx100 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx99, i32 0, i32 %87
  store i32 %86, i32* %arrayidx100, align 4
  br label %if.end109

if.else101:                                       ; preds = %for.body83
  %90 = load i32, i32* %i72, align 4
  %91 = load i32, i32* %k80, align 4
  %sub102 = sub nsw i32 %91, 1
  %92 = load i32, i32* %j76, align 4
  %arrayidx103 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %92
  %arrayidx104 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx103, i32 0, i32 %sub102
  %arrayidx105 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx104, i32 0, i32 %90
  %93 = load i32, i32* %arrayidx105, align 4
  %94 = load i32, i32* %i72, align 4
  %95 = load i32, i32* %k80, align 4
  %96 = load i32, i32* %j76, align 4
  %arrayidx106 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %96
  %arrayidx107 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx106, i32 0, i32 %95
  %arrayidx108 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx107, i32 0, i32 %94
  store i32 %93, i32* %arrayidx108, align 4
  br label %if.end109

if.end109:                                        ; preds = %if.else101, %if.then93
  store i32 0, i32* %l, align 4
  br label %for.cond110

for.cond110:                                      ; preds = %for.inc139, %if.end109
  %97 = load i32, i32* %l, align 4
  %98 = load i32, i32* %j76, align 4
  %sub111 = sub nsw i32 %98, 1
  %cmp112 = icmp sle i32 %97, %sub111
  br i1 %cmp112, label %for.body113, label %for.end141

for.body113:                                      ; preds = %for.cond110
  %99 = load i32, i32* %i72, align 4
  %100 = load i32, i32* %k80, align 4
  %101 = load i32, i32* %j76, align 4
  %arrayidx114 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %101
  %arrayidx115 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx114, i32 0, i32 %100
  %arrayidx116 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx115, i32 0, i32 %99
  %102 = load i32, i32* %arrayidx116, align 4
  %103 = load i32, i32* %i72, align 4
  %sub117 = sub nsw i32 %103, 1
  %104 = load i32, i32* %k80, align 4
  %105 = load i32, i32* %l, align 4
  %arrayidx118 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %105
  %arrayidx119 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx118, i32 0, i32 %104
  %arrayidx120 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx119, i32 0, i32 %sub117
  %106 = load i32, i32* %arrayidx120, align 4
  %107 = load i32, i32* %j76, align 4
  %arrayidx121 = getelementptr inbounds [105 x i32], [105 x i32]* %s1, i32 0, i32 %107
  %108 = load i32, i32* %arrayidx121, align 4
  %add122 = add nsw i32 %106, %108
  %109 = load i32, i32* %l, align 4
  %arrayidx123 = getelementptr inbounds [105 x i32], [105 x i32]* %s1, i32 0, i32 %109
  %110 = load i32, i32* %arrayidx123, align 4
  %sub124 = sub nsw i32 %add122, %110
  %cmp125 = icmp slt i32 %102, %sub124
  br i1 %cmp125, label %if.then126, label %if.end138

if.then126:                                       ; preds = %for.body113
  %111 = load i32, i32* %i72, align 4
  %sub127 = sub nsw i32 %111, 1
  %112 = load i32, i32* %k80, align 4
  %113 = load i32, i32* %l, align 4
  %arrayidx128 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %113
  %arrayidx129 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx128, i32 0, i32 %112
  %arrayidx130 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx129, i32 0, i32 %sub127
  %114 = load i32, i32* %arrayidx130, align 4
  %115 = load i32, i32* %j76, align 4
  %arrayidx131 = getelementptr inbounds [105 x i32], [105 x i32]* %s1, i32 0, i32 %115
  %116 = load i32, i32* %arrayidx131, align 4
  %add132 = add nsw i32 %114, %116
  %117 = load i32, i32* %l, align 4
  %arrayidx133 = getelementptr inbounds [105 x i32], [105 x i32]* %s1, i32 0, i32 %117
  %118 = load i32, i32* %arrayidx133, align 4
  %sub134 = sub nsw i32 %add132, %118
  %119 = load i32, i32* %i72, align 4
  %120 = load i32, i32* %k80, align 4
  %121 = load i32, i32* %j76, align 4
  %arrayidx135 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %121
  %arrayidx136 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx135, i32 0, i32 %120
  %arrayidx137 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx136, i32 0, i32 %119
  store i32 %sub134, i32* %arrayidx137, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then126, %for.body113
  br label %for.inc139

for.inc139:                                       ; preds = %if.end138
  %122 = load i32, i32* %l, align 4
  %inc140 = add nsw i32 %122, 1
  store i32 %inc140, i32* %l, align 4
  br label %for.cond110

for.end141:                                       ; preds = %for.cond110
  store i32 0, i32* %l142, align 4
  br label %for.cond143

for.cond143:                                      ; preds = %for.inc172, %for.end141
  %123 = load i32, i32* %l142, align 4
  %124 = load i32, i32* %k80, align 4
  %sub144 = sub nsw i32 %124, 1
  %cmp145 = icmp sle i32 %123, %sub144
  br i1 %cmp145, label %for.body146, label %for.end174

for.body146:                                      ; preds = %for.cond143
  %125 = load i32, i32* %i72, align 4
  %126 = load i32, i32* %k80, align 4
  %127 = load i32, i32* %j76, align 4
  %arrayidx147 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %127
  %arrayidx148 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx147, i32 0, i32 %126
  %arrayidx149 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx148, i32 0, i32 %125
  %128 = load i32, i32* %arrayidx149, align 4
  %129 = load i32, i32* %i72, align 4
  %sub150 = sub nsw i32 %129, 1
  %130 = load i32, i32* %l142, align 4
  %131 = load i32, i32* %j76, align 4
  %arrayidx151 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %131
  %arrayidx152 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx151, i32 0, i32 %130
  %arrayidx153 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx152, i32 0, i32 %sub150
  %132 = load i32, i32* %arrayidx153, align 4
  %133 = load i32, i32* %k80, align 4
  %arrayidx154 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %133
  %134 = load i32, i32* %arrayidx154, align 4
  %add155 = add nsw i32 %132, %134
  %135 = load i32, i32* %l142, align 4
  %arrayidx156 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %135
  %136 = load i32, i32* %arrayidx156, align 4
  %sub157 = sub nsw i32 %add155, %136
  %cmp158 = icmp slt i32 %128, %sub157
  br i1 %cmp158, label %if.then159, label %if.end171

if.then159:                                       ; preds = %for.body146
  %137 = load i32, i32* %i72, align 4
  %sub160 = sub nsw i32 %137, 1
  %138 = load i32, i32* %l142, align 4
  %139 = load i32, i32* %j76, align 4
  %arrayidx161 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %139
  %arrayidx162 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx161, i32 0, i32 %138
  %arrayidx163 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx162, i32 0, i32 %sub160
  %140 = load i32, i32* %arrayidx163, align 4
  %141 = load i32, i32* %k80, align 4
  %arrayidx164 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %141
  %142 = load i32, i32* %arrayidx164, align 4
  %add165 = add nsw i32 %140, %142
  %143 = load i32, i32* %l142, align 4
  %arrayidx166 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx166, align 4
  %sub167 = sub nsw i32 %add165, %144
  %145 = load i32, i32* %i72, align 4
  %146 = load i32, i32* %k80, align 4
  %147 = load i32, i32* %j76, align 4
  %arrayidx168 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %147
  %arrayidx169 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx168, i32 0, i32 %146
  %arrayidx170 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx169, i32 0, i32 %145
  store i32 %sub167, i32* %arrayidx170, align 4
  br label %if.end171

if.end171:                                        ; preds = %if.then159, %for.body146
  br label %for.inc172

for.inc172:                                       ; preds = %if.end171
  %148 = load i32, i32* %l142, align 4
  %inc173 = add nsw i32 %148, 1
  store i32 %inc173, i32* %l142, align 4
  br label %for.cond143

for.end174:                                       ; preds = %for.cond143
  %149 = load i32, i32* %j76, align 4
  %150 = load i32, i32* %k80, align 4
  %cmp175 = icmp eq i32 %149, %150
  br i1 %cmp175, label %if.then176, label %if.end210

if.then176:                                       ; preds = %for.end174
  store i32 0, i32* %l177, align 4
  br label %for.cond178

for.cond178:                                      ; preds = %for.inc207, %if.then176
  %151 = load i32, i32* %l177, align 4
  %152 = load i32, i32* %j76, align 4
  %sub179 = sub nsw i32 %152, 1
  %cmp180 = icmp sle i32 %151, %sub179
  br i1 %cmp180, label %for.body181, label %for.end209

for.body181:                                      ; preds = %for.cond178
  %153 = load i32, i32* %i72, align 4
  %154 = load i32, i32* %k80, align 4
  %155 = load i32, i32* %j76, align 4
  %arrayidx182 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %155
  %arrayidx183 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx182, i32 0, i32 %154
  %arrayidx184 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx183, i32 0, i32 %153
  %156 = load i32, i32* %arrayidx184, align 4
  %157 = load i32, i32* %i72, align 4
  %sub185 = sub nsw i32 %157, 1
  %158 = load i32, i32* %l177, align 4
  %159 = load i32, i32* %j76, align 4
  %arrayidx186 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %159
  %arrayidx187 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx186, i32 0, i32 %158
  %arrayidx188 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx187, i32 0, i32 %sub185
  %160 = load i32, i32* %arrayidx188, align 4
  %161 = load i32, i32* %k80, align 4
  %arrayidx189 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %161
  %162 = load i32, i32* %arrayidx189, align 4
  %add190 = add nsw i32 %160, %162
  %163 = load i32, i32* %l177, align 4
  %arrayidx191 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %163
  %164 = load i32, i32* %arrayidx191, align 4
  %sub192 = sub nsw i32 %add190, %164
  %cmp193 = icmp slt i32 %156, %sub192
  br i1 %cmp193, label %if.then194, label %if.end206

if.then194:                                       ; preds = %for.body181
  %165 = load i32, i32* %i72, align 4
  %sub195 = sub nsw i32 %165, 1
  %166 = load i32, i32* %l177, align 4
  %167 = load i32, i32* %j76, align 4
  %arrayidx196 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %167
  %arrayidx197 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx196, i32 0, i32 %166
  %arrayidx198 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx197, i32 0, i32 %sub195
  %168 = load i32, i32* %arrayidx198, align 4
  %169 = load i32, i32* %k80, align 4
  %arrayidx199 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %169
  %170 = load i32, i32* %arrayidx199, align 4
  %add200 = add nsw i32 %168, %170
  %171 = load i32, i32* %l177, align 4
  %arrayidx201 = getelementptr inbounds [105 x i32], [105 x i32]* %s2, i32 0, i32 %171
  %172 = load i32, i32* %arrayidx201, align 4
  %sub202 = sub nsw i32 %add200, %172
  %173 = load i32, i32* %i72, align 4
  %174 = load i32, i32* %k80, align 4
  %175 = load i32, i32* %j76, align 4
  %arrayidx203 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %175
  %arrayidx204 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx203, i32 0, i32 %174
  %arrayidx205 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx204, i32 0, i32 %173
  store i32 %sub202, i32* %arrayidx205, align 4
  br label %if.end206

if.end206:                                        ; preds = %if.then194, %for.body181
  br label %for.inc207

for.inc207:                                       ; preds = %if.end206
  %176 = load i32, i32* %l177, align 4
  %inc208 = add nsw i32 %176, 1
  store i32 %inc208, i32* %l177, align 4
  br label %for.cond178

for.end209:                                       ; preds = %for.cond178
  br label %if.end210

if.end210:                                        ; preds = %for.end209, %for.end174
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %177 = load i32, i32* %k80, align 4
  %inc212 = add nsw i32 %177, 1
  store i32 %inc212, i32* %k80, align 4
  br label %for.cond81

for.end213:                                       ; preds = %for.cond81
  br label %for.inc214

for.inc214:                                       ; preds = %for.end213
  %178 = load i32, i32* %j76, align 4
  %inc215 = add nsw i32 %178, 1
  store i32 %inc215, i32* %j76, align 4
  br label %for.cond77

for.end216:                                       ; preds = %for.cond77
  br label %for.inc217

for.inc217:                                       ; preds = %for.end216
  %179 = load i32, i32* %i72, align 4
  %inc218 = add nsw i32 %179, 1
  store i32 %inc218, i32* %i72, align 4
  br label %for.cond73

for.end219:                                       ; preds = %for.cond73
  %180 = load i32, i32* %K, align 4
  %181 = load i32, i32* %N, align 4
  %182 = load i32, i32* %N, align 4
  %arrayidx220 = getelementptr inbounds [105 x [105 x [5 x i32]]], [105 x [105 x [5 x i32]]]* %f, i32 0, i32 %182
  %arrayidx221 = getelementptr inbounds [105 x [5 x i32]], [105 x [5 x i32]]* %arrayidx220, i32 0, i32 %181
  %arrayidx222 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx221, i32 0, i32 %180
  %183 = load i32, i32* %arrayidx222, align 4
  store i32 %183, i32* %ta2, align 4
  store i32 %183, i32* %ta2, align 4
  br label %if.end223

if.end223:                                        ; preds = %for.end219, %for.end50
  %184 = load i32, i32* %ta2, align 4
  ret i32 %184
}

; Function Attrs: noinline nounwind
define i32 @"\01?yyy_qi@@YAHH@Z"(i32 %mn) #0 {
entry:
  %retval = alloca i32, align 4
  %mn.addr = alloca i32, align 4
  %f = alloca [20 x [20 x i32]], align 4
  %e1 = alloca [59 x i32], align 4
  %e2 = alloca [59 x i32], align 4
  %e3 = alloca [59 x i32], align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %sum = alloca i32, align 4
  %k = alloca i32, align 4
  %ta = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i15 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [20 x [20 x i32]]* %f to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 1600, i1 false)
  %1 = bitcast [59 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([59 x i32]* @"\01?e1@?1??yyy_qi@@YAHH@Z@3PAHA" to i8*), i32 236, i1 false)
  %2 = bitcast [59 x i32]* %e2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([59 x i32]* @"\01?e2@?1??yyy_qi@@YAHH@Z@3PAHA" to i8*), i32 236, i1 false)
  %3 = bitcast [59 x i32]* %e3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([59 x i32]* @"\01?e3@?1??yyy_qi@@YAHH@Z@3PAHA" to i8*), i32 236, i1 false)
  store i32 9, i32* %a, align 4
  store i32 9, i32* %b, align 4
  store i32 0, i32* %sum, align 4
  %4 = load i32, i32* %a, align 4
  %5 = load i32, i32* %b, align 4
  %mul = mul nsw i32 %4, %5
  store i32 %mul, i32* %k, align 4
  %6 = load i32, i32* %k, align 4
  %rem = srem i32 %6, 2
  %cmp = icmp eq i32 %rem, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %mn.addr, align 4
  %call = call i32 @"\01?max_ziju@@YAHH@Z"(i32 %7)
  store i32 %call, i32* %sum, align 4
  %8 = load i32, i32* %b, align 4
  %div = sdiv i32 %8, 2
  %add = add nsw i32 %div, 1
  %9 = load i32, i32* %a, align 4
  %div1 = sdiv i32 %9, 2
  %add2 = add nsw i32 %div1, 1
  %arrayidx = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %add2
  %arrayidx3 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx, i32 0, i32 %add
  store i32 1, i32* %arrayidx3, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load i32, i32* %mn.addr, align 4
  %call4 = call i32 @"\01?play_mice@@YAHH@Z"(i32 %10)
  store i32 %call4, i32* %sum, align 4
  store i32 30, i32* %ta, align 4
  %11 = load i32, i32* %ta, align 4
  %add5 = add nsw i32 %11, 2
  store i32 %add5, i32* %ta, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %if.end
  %12 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %12, 20
  br i1 %cmp6, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %cmp8 = icmp slt i32 %13, 20
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %15
  %arrayidx11 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx10, i32 0, i32 %14
  store i32 -1, i32* %arrayidx11, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %17, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  store i32 1, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc74, %for.end14
  %18 = load i32, i32* %i15, align 4
  %cmp17 = icmp sle i32 %18, 50
  br i1 %cmp17, label %for.body18, label %for.end76

for.body18:                                       ; preds = %for.cond16
  %19 = load i32, i32* %i15, align 4
  %sub = sub nsw i32 %19, 1
  %arrayidx19 = getelementptr inbounds [59 x i32], [59 x i32]* %e2, i32 0, i32 %sub
  %20 = load i32, i32* %arrayidx19, align 4
  store i32 %20, i32* %x, align 4
  %21 = load i32, i32* %i15, align 4
  %sub20 = sub nsw i32 %21, 1
  %arrayidx21 = getelementptr inbounds [59 x i32], [59 x i32]* %e1, i32 0, i32 %sub20
  %22 = load i32, i32* %arrayidx21, align 4
  store i32 %22, i32* %y, align 4
  %23 = load i32, i32* %i15, align 4
  %sub22 = sub nsw i32 %23, 1
  %arrayidx23 = getelementptr inbounds [59 x i32], [59 x i32]* %e3, i32 0, i32 %sub22
  %24 = load i32, i32* %arrayidx23, align 4
  store i32 %24, i32* %c, align 4
  %25 = load i32, i32* %y, align 4
  %26 = load i32, i32* %x, align 4
  %sub24 = sub nsw i32 %26, 1
  %arrayidx25 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %sub24
  %arrayidx26 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx25, i32 0, i32 %25
  %27 = load i32, i32* %arrayidx26, align 4
  %28 = load i32, i32* %c, align 4
  %cmp27 = icmp eq i32 %27, %28
  br i1 %cmp27, label %if.then42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body18
  %29 = load i32, i32* %y, align 4
  %30 = load i32, i32* %x, align 4
  %add28 = add nsw i32 %30, 1
  %arrayidx29 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %add28
  %arrayidx30 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx29, i32 0, i32 %29
  %31 = load i32, i32* %arrayidx30, align 4
  %32 = load i32, i32* %c, align 4
  %cmp31 = icmp eq i32 %31, %32
  br i1 %cmp31, label %if.then42, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %lor.lhs.false
  %33 = load i32, i32* %y, align 4
  %sub33 = sub nsw i32 %33, 1
  %34 = load i32, i32* %x, align 4
  %arrayidx34 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %34
  %arrayidx35 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx34, i32 0, i32 %sub33
  %35 = load i32, i32* %arrayidx35, align 4
  %36 = load i32, i32* %c, align 4
  %cmp36 = icmp eq i32 %35, %36
  br i1 %cmp36, label %if.then42, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %lor.lhs.false32
  %37 = load i32, i32* %y, align 4
  %add38 = add nsw i32 %37, 1
  %38 = load i32, i32* %x, align 4
  %arrayidx39 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %38
  %arrayidx40 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx39, i32 0, i32 %add38
  %39 = load i32, i32* %arrayidx40, align 4
  %40 = load i32, i32* %c, align 4
  %cmp41 = icmp eq i32 %39, %40
  br i1 %cmp41, label %if.then42, label %if.end44

if.then42:                                        ; preds = %lor.lhs.false37, %lor.lhs.false32, %lor.lhs.false, %for.body18
  %41 = load i32, i32* %sum, align 4
  %call43 = call i32 @"\01?welcome_cow@@YAHH@Z"(i32 %41)
  store i32 %call43, i32* %sum, align 4
  %42 = load i32, i32* %sum, align 4
  store i32 %42, i32* %retval, align 4
  br label %return

if.end44:                                         ; preds = %lor.lhs.false37
  %43 = load i32, i32* %c, align 4
  %44 = load i32, i32* %y, align 4
  %45 = load i32, i32* %x, align 4
  %arrayidx45 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %45
  %arrayidx46 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx45, i32 0, i32 %44
  store i32 %43, i32* %arrayidx46, align 4
  %46 = load i32, i32* %k, align 4
  %rem47 = srem i32 %46, 2
  %cmp48 = icmp eq i32 %rem47, 1
  br i1 %cmp48, label %if.then49, label %if.else56

if.then49:                                        ; preds = %if.end44
  %47 = load i32, i32* %c, align 4
  %48 = load i32, i32* %b, align 4
  %49 = load i32, i32* %y, align 4
  %sub50 = sub nsw i32 %48, %49
  %add51 = add nsw i32 %sub50, 1
  %50 = load i32, i32* %a, align 4
  %51 = load i32, i32* %x, align 4
  %sub52 = sub nsw i32 %50, %51
  %add53 = add nsw i32 %sub52, 1
  %arrayidx54 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %add53
  %arrayidx55 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx54, i32 0, i32 %add51
  store i32 %47, i32* %arrayidx55, align 4
  br label %if.end73

if.else56:                                        ; preds = %if.end44
  %52 = load i32, i32* %c, align 4
  %cmp57 = icmp eq i32 %52, 1
  br i1 %cmp57, label %if.then58, label %if.else65

if.then58:                                        ; preds = %if.else56
  %53 = load i32, i32* %b, align 4
  %54 = load i32, i32* %y, align 4
  %sub59 = sub nsw i32 %53, %54
  %add60 = add nsw i32 %sub59, 1
  %55 = load i32, i32* %a, align 4
  %56 = load i32, i32* %x, align 4
  %sub61 = sub nsw i32 %55, %56
  %add62 = add nsw i32 %sub61, 1
  %arrayidx63 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %add62
  %arrayidx64 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx63, i32 0, i32 %add60
  store i32 0, i32* %arrayidx64, align 4
  br label %if.end72

if.else65:                                        ; preds = %if.else56
  %57 = load i32, i32* %b, align 4
  %58 = load i32, i32* %y, align 4
  %sub66 = sub nsw i32 %57, %58
  %add67 = add nsw i32 %sub66, 1
  %59 = load i32, i32* %a, align 4
  %60 = load i32, i32* %x, align 4
  %sub68 = sub nsw i32 %59, %60
  %add69 = add nsw i32 %sub68, 1
  %arrayidx70 = getelementptr inbounds [20 x [20 x i32]], [20 x [20 x i32]]* %f, i32 0, i32 %add69
  %arrayidx71 = getelementptr inbounds [20 x i32], [20 x i32]* %arrayidx70, i32 0, i32 %add67
  store i32 1, i32* %arrayidx71, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.else65, %if.then58
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then49
  br label %for.inc74

for.inc74:                                        ; preds = %if.end73
  %61 = load i32, i32* %i15, align 4
  %inc75 = add nsw i32 %61, 1
  store i32 %inc75, i32* %i15, align 4
  br label %for.cond16

for.end76:                                        ; preds = %for.cond16
  %62 = load i32, i32* %sum, align 4
  store i32 %62, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end76, %if.then42
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: noinline nounwind
define void @"\01?Tarjan_maxzi@@YAXHPAH000000@Z"(i32 %x, i32* %dfn, i32* %Head, i32* %Next, i32* %ver, i32* %belong, i32* %size, i32* %scc) #0 {
entry:
  %scc.addr = alloca i32*, align 4
  %size.addr = alloca i32*, align 4
  %belong.addr = alloca i32*, align 4
  %ver.addr = alloca i32*, align 4
  %Next.addr = alloca i32*, align 4
  %Head.addr = alloca i32*, align 4
  %dfn.addr = alloca i32*, align 4
  %x.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %y = alloca i32, align 4
  %k = alloca i32, align 4
  store i32* %scc, i32** %scc.addr, align 4
  store i32* %size, i32** %size.addr, align 4
  store i32* %belong, i32** %belong.addr, align 4
  store i32* %ver, i32** %ver.addr, align 4
  store i32* %Next, i32** %Next.addr, align 4
  store i32* %Head, i32** %Head.addr, align 4
  store i32* %dfn, i32** %dfn.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* @"\01?num@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4HA", align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @"\01?num@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4HA", align 4
  %1 = load i32, i32* %x.addr, align 4
  %arrayidx = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %1
  store i32 %inc, i32* %arrayidx, align 4
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32*, i32** %dfn.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %3, i32 %2
  store i32 %inc, i32* %arrayidx1, align 4
  %4 = load i32, i32* %x.addr, align 4
  %5 = load i32, i32* @"\01?top@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4HA", align 4
  %inc2 = add nsw i32 %5, 1
  store i32 %inc2, i32* @"\01?top@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4HA", align 4
  %arrayidx3 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?Stack@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %inc2
  store i32 %4, i32* %arrayidx3, align 4
  %6 = load i32, i32* %x.addr, align 4
  %arrayidx4 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?instack@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %6
  store i32 1, i32* %arrayidx4, align 4
  %7 = load i32, i32* %x.addr, align 4
  %8 = load i32*, i32** %Head.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %7
  %9 = load i32, i32* %arrayidx5, align 4
  store i32 %9, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %12 = load i32*, i32** %ver.addr, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i32 %11
  %13 = load i32, i32* %arrayidx6, align 4
  store i32 %13, i32* %y, align 4
  %14 = load i32, i32* %y, align 4
  %15 = load i32*, i32** %dfn.addr, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %15, i32 %14
  %16 = load i32, i32* %arrayidx7, align 4
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %17 = load i32*, i32** %scc.addr, align 4
  %18 = load i32*, i32** %size.addr, align 4
  %19 = load i32*, i32** %belong.addr, align 4
  %20 = load i32*, i32** %ver.addr, align 4
  %21 = load i32*, i32** %Next.addr, align 4
  %22 = load i32*, i32** %Head.addr, align 4
  %23 = load i32*, i32** %dfn.addr, align 4
  %24 = load i32, i32* %y, align 4
  call void @"\01?Tarjan_maxzi@@YAXHPAH000000@Z"(i32 %24, i32* %23, i32* %22, i32* %21, i32* %20, i32* %19, i32* %18, i32* %17)
  %25 = load i32, i32* %x.addr, align 4
  %arrayidx9 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %25
  %26 = load i32, i32* %arrayidx9, align 4
  %27 = load i32, i32* %y, align 4
  %arrayidx10 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %27
  %28 = load i32, i32* %arrayidx10, align 4
  %cmp = icmp sgt i32 %26, %28
  br i1 %cmp, label %if.then11, label %if.end

if.then11:                                        ; preds = %if.then
  %29 = load i32, i32* %y, align 4
  %arrayidx12 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %29
  %30 = load i32, i32* %arrayidx12, align 4
  %31 = load i32, i32* %x.addr, align 4
  %arrayidx13 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %31
  store i32 %30, i32* %arrayidx13, align 4
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.then
  br label %if.end25

if.else:                                          ; preds = %for.body
  %32 = load i32, i32* %y, align 4
  %arrayidx14 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?instack@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %32
  %33 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %33, 0
  br i1 %tobool15, label %if.then16, label %if.end24

if.then16:                                        ; preds = %if.else
  %34 = load i32, i32* %x.addr, align 4
  %arrayidx17 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %34
  %35 = load i32, i32* %arrayidx17, align 4
  %36 = load i32, i32* %y, align 4
  %arrayidx18 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %36
  %37 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp sgt i32 %35, %37
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.then16
  %38 = load i32, i32* %y, align 4
  %arrayidx21 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %38
  %39 = load i32, i32* %arrayidx21, align 4
  %40 = load i32, i32* %x.addr, align 4
  %arrayidx22 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %40
  store i32 %39, i32* %arrayidx22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.then16
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end25
  %41 = load i32, i32* %i, align 4
  %42 = load i32*, i32** %Next.addr, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %42, i32 %41
  %43 = load i32, i32* %arrayidx26, align 4
  store i32 %43, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %44 = load i32, i32* %x.addr, align 4
  %45 = load i32*, i32** %dfn.addr, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %45, i32 %44
  %46 = load i32, i32* %arrayidx27, align 4
  %47 = load i32, i32* %x.addr, align 4
  %arrayidx28 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?low@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %47
  %48 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp eq i32 %46, %48
  br i1 %cmp29, label %if.then30, label %if.end38

if.then30:                                        ; preds = %for.end
  %49 = load i32*, i32** %scc.addr, align 4
  %50 = load i32, i32* %49, align 4
  %inc31 = add nsw i32 %50, 1
  store i32 %inc31, i32* %49, align 4
  store i32 -1, i32* %k, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then30
  %51 = load i32, i32* %k, align 4
  %52 = load i32, i32* %x.addr, align 4
  %cmp32 = icmp ne i32 %51, %52
  br i1 %cmp32, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %53 = load i32, i32* @"\01?top@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4HA", align 4
  %dec = add nsw i32 %53, -1
  store i32 %dec, i32* @"\01?top@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4HA", align 4
  %arrayidx33 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?Stack@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %53
  %54 = load i32, i32* %arrayidx33, align 4
  store i32 %54, i32* %k, align 4
  %55 = load i32*, i32** %scc.addr, align 4
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* %k, align 4
  %58 = load i32*, i32** %belong.addr, align 4
  %arrayidx34 = getelementptr inbounds i32, i32* %58, i32 %57
  store i32 %56, i32* %arrayidx34, align 4
  %59 = load i32*, i32** %scc.addr, align 4
  %60 = load i32, i32* %59, align 4
  %61 = load i32*, i32** %size.addr, align 4
  %arrayidx35 = getelementptr inbounds i32, i32* %61, i32 %60
  %62 = load i32, i32* %arrayidx35, align 4
  %inc36 = add nsw i32 %62, 1
  store i32 %inc36, i32* %arrayidx35, align 4
  %63 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds [10010 x i32], [10010 x i32]* @"\01?instack@?1??Tarjan_maxzi@@YAXHPAH000000@Z@4PAHA", i32 0, i32 %63
  store i32 0, i32* %arrayidx37, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end38

if.end38:                                         ; preds = %while.end, %for.end
  ret void
}

; Function Attrs: noinline nounwind
define i32 @"\01?max_zitu@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %tot = alloca i32, align 4
  %MOD = alloca i32, align 4
  %top = alloca i32, align 4
  %scc = alloca i32, align 4
  %TOT = alloca i32, align 4
  %Head = alloca [10010 x i32], align 4
  %ver = alloca [10010 x i32], align 4
  %Next = alloca [10010 x i32], align 4
  %dfn = alloca [10010 x i32], align 4
  %belong = alloca [10010 x i32], align 4
  %size = alloca [10010 x i32], align 4
  %HEAD = alloca [10010 x i32], align 4
  %VER = alloca [10010 x i32], align 4
  %NEXT = alloca [10010 x i32], align 4
  %f = alloca [10010 x i32], align 4
  %g = alloca [10010 x i32], align 4
  %used = alloca [10010 x i32], align 4
  %e1 = alloca [109 x i32], align 4
  %e2 = alloca [109 x i32], align 4
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %i8 = alloca i32, align 4
  %x21 = alloca i32, align 4
  %i28 = alloca i32, align 4
  %y33 = alloca i32, align 4
  %x54 = alloca i32, align 4
  %i58 = alloca i32, align 4
  %y63 = alloca i32, align 4
  %ans = alloca i32, align 4
  %tmp = alloca i32, align 4
  %i101 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  store i32 0, i32* %tot, align 4
  store i32 0, i32* %top, align 4
  store i32 0, i32* %scc, align 4
  store i32 0, i32* %TOT, align 4
  %0 = bitcast [10010 x i32]* %Head to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 40040, i1 false)
  %1 = bitcast [10010 x i32]* %ver to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 40040, i1 false)
  %2 = bitcast [10010 x i32]* %Next to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 40040, i1 false)
  %3 = bitcast [10010 x i32]* %dfn to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %3, i8 0, i32 40040, i1 false)
  %4 = bitcast [10010 x i32]* %belong to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %4, i8 0, i32 40040, i1 false)
  %5 = bitcast [10010 x i32]* %size to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %5, i8 0, i32 40040, i1 false)
  %6 = bitcast [10010 x i32]* %HEAD to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %6, i8 0, i32 40040, i1 false)
  %7 = bitcast [10010 x i32]* %VER to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %7, i8 0, i32 40040, i1 false)
  %8 = bitcast [10010 x i32]* %NEXT to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %8, i8 0, i32 40040, i1 false)
  %9 = bitcast [10010 x i32]* %f to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %9, i8 0, i32 40040, i1 false)
  %10 = bitcast [10010 x i32]* %g to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %10, i8 0, i32 40040, i1 false)
  %11 = bitcast [10010 x i32]* %used to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %11, i8 0, i32 40040, i1 false)
  %12 = bitcast [109 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %12, i8* align 4 bitcast ([109 x i32]* @"\01?e1@?1??max_zitu@@YAHH@Z@3PAHA" to i8*), i32 436, i1 false)
  %13 = bitcast [109 x i32]* %e2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 bitcast ([109 x i32]* @"\01?e2@?1??max_zitu@@YAHH@Z@3PAHA" to i8*), i32 436, i1 false)
  store i32 100, i32* %n, align 4
  store i32 100, i32* %m, align 4
  store i32 1000000, i32* %MOD, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %cmp = icmp sle i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %16, 1
  %arrayidx = getelementptr inbounds [109 x i32], [109 x i32]* %e1, i32 0, i32 %sub
  %17 = load i32, i32* %arrayidx, align 4
  store i32 %17, i32* %x, align 4
  %18 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %18, 1
  %arrayidx2 = getelementptr inbounds [109 x i32], [109 x i32]* %e2, i32 0, i32 %sub1
  %19 = load i32, i32* %arrayidx2, align 4
  store i32 %19, i32* %y, align 4
  %20 = load i32, i32* %y, align 4
  %21 = load i32, i32* %tot, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %tot, align 4
  %arrayidx3 = getelementptr inbounds [10010 x i32], [10010 x i32]* %ver, i32 0, i32 %inc
  store i32 %20, i32* %arrayidx3, align 4
  %22 = load i32, i32* %x, align 4
  %arrayidx4 = getelementptr inbounds [10010 x i32], [10010 x i32]* %Head, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx4, align 4
  %24 = load i32, i32* %tot, align 4
  %arrayidx5 = getelementptr inbounds [10010 x i32], [10010 x i32]* %Next, i32 0, i32 %24
  store i32 %23, i32* %arrayidx5, align 4
  %25 = load i32, i32* %tot, align 4
  %26 = load i32, i32* %x, align 4
  %arrayidx6 = getelementptr inbounds [10010 x i32], [10010 x i32]* %Head, i32 0, i32 %26
  store i32 %25, i32* %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %27, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i8, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.end
  %28 = load i32, i32* %i8, align 4
  %29 = load i32, i32* %n, align 4
  %cmp10 = icmp sle i32 %28, %29
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond9
  %30 = load i32, i32* %i8, align 4
  %arrayidx12 = getelementptr inbounds [10010 x i32], [10010 x i32]* %dfn, i32 0, i32 %30
  %31 = load i32, i32* %arrayidx12, align 4
  %tobool = icmp ne i32 %31, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body11
  %arraydecay = getelementptr inbounds [10010 x i32], [10010 x i32]* %size, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [10010 x i32], [10010 x i32]* %belong, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [10010 x i32], [10010 x i32]* %ver, i32 0, i32 0
  %arraydecay15 = getelementptr inbounds [10010 x i32], [10010 x i32]* %Next, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [10010 x i32], [10010 x i32]* %Head, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [10010 x i32], [10010 x i32]* %dfn, i32 0, i32 0
  %32 = load i32, i32* %i8, align 4
  call void @"\01?Tarjan_maxzi@@YAXHPAH000000@Z"(i32 %32, i32* %arraydecay17, i32* %arraydecay16, i32* %arraydecay15, i32* %arraydecay14, i32* %arraydecay13, i32* %arraydecay, i32* %scc)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %33 = load i32, i32* %i8, align 4
  %inc19 = add nsw i32 %33, 1
  store i32 %inc19, i32* %i8, align 4
  br label %for.cond9

for.end20:                                        ; preds = %for.cond9
  store i32 1, i32* %x21, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc51, %for.end20
  %34 = load i32, i32* %x21, align 4
  %35 = load i32, i32* %n, align 4
  %cmp23 = icmp sle i32 %34, %35
  br i1 %cmp23, label %for.body24, label %for.end53

for.body24:                                       ; preds = %for.cond22
  %36 = load i32, i32* %x21, align 4
  %arrayidx25 = getelementptr inbounds [10010 x i32], [10010 x i32]* %size, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx25, align 4
  %38 = load i32, i32* %x21, align 4
  %arrayidx26 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %38
  store i32 %37, i32* %arrayidx26, align 4
  %39 = load i32, i32* %x21, align 4
  %arrayidx27 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %39
  store i32 1, i32* %arrayidx27, align 4
  %40 = load i32, i32* %x21, align 4
  %arrayidx29 = getelementptr inbounds [10010 x i32], [10010 x i32]* %Head, i32 0, i32 %40
  %41 = load i32, i32* %arrayidx29, align 4
  store i32 %41, i32* %i28, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc48, %for.body24
  %42 = load i32, i32* %i28, align 4
  %tobool31 = icmp ne i32 %42, 0
  br i1 %tobool31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond30
  %43 = load i32, i32* %i28, align 4
  %arrayidx34 = getelementptr inbounds [10010 x i32], [10010 x i32]* %ver, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx34, align 4
  store i32 %44, i32* %y33, align 4
  %45 = load i32, i32* %x21, align 4
  %arrayidx35 = getelementptr inbounds [10010 x i32], [10010 x i32]* %belong, i32 0, i32 %45
  %46 = load i32, i32* %arrayidx35, align 4
  %47 = load i32, i32* %y33, align 4
  %arrayidx36 = getelementptr inbounds [10010 x i32], [10010 x i32]* %belong, i32 0, i32 %47
  %48 = load i32, i32* %arrayidx36, align 4
  %cmp37 = icmp eq i32 %46, %48
  br i1 %cmp37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %for.body32
  br label %for.inc48

if.end39:                                         ; preds = %for.body32
  %49 = load i32, i32* %y33, align 4
  %arrayidx40 = getelementptr inbounds [10010 x i32], [10010 x i32]* %belong, i32 0, i32 %49
  %50 = load i32, i32* %arrayidx40, align 4
  %51 = load i32, i32* %TOT, align 4
  %inc41 = add nsw i32 %51, 1
  store i32 %inc41, i32* %TOT, align 4
  %arrayidx42 = getelementptr inbounds [10010 x i32], [10010 x i32]* %VER, i32 0, i32 %inc41
  store i32 %50, i32* %arrayidx42, align 4
  %52 = load i32, i32* %x21, align 4
  %arrayidx43 = getelementptr inbounds [10010 x i32], [10010 x i32]* %belong, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx43, align 4
  %arrayidx44 = getelementptr inbounds [10010 x i32], [10010 x i32]* %HEAD, i32 0, i32 %53
  %54 = load i32, i32* %arrayidx44, align 4
  %55 = load i32, i32* %TOT, align 4
  %arrayidx45 = getelementptr inbounds [10010 x i32], [10010 x i32]* %NEXT, i32 0, i32 %55
  store i32 %54, i32* %arrayidx45, align 4
  %56 = load i32, i32* %TOT, align 4
  %57 = load i32, i32* %x21, align 4
  %arrayidx46 = getelementptr inbounds [10010 x i32], [10010 x i32]* %belong, i32 0, i32 %57
  %58 = load i32, i32* %arrayidx46, align 4
  %arrayidx47 = getelementptr inbounds [10010 x i32], [10010 x i32]* %HEAD, i32 0, i32 %58
  store i32 %56, i32* %arrayidx47, align 4
  br label %for.inc48

for.inc48:                                        ; preds = %if.end39, %if.then38
  %59 = load i32, i32* %i28, align 4
  %arrayidx49 = getelementptr inbounds [10010 x i32], [10010 x i32]* %Next, i32 0, i32 %59
  %60 = load i32, i32* %arrayidx49, align 4
  store i32 %60, i32* %i28, align 4
  br label %for.cond30

for.end50:                                        ; preds = %for.cond30
  br label %for.inc51

for.inc51:                                        ; preds = %for.end50
  %61 = load i32, i32* %x21, align 4
  %inc52 = add nsw i32 %61, 1
  store i32 %inc52, i32* %x21, align 4
  br label %for.cond22

for.end53:                                        ; preds = %for.cond22
  %62 = load i32, i32* %scc, align 4
  store i32 %62, i32* %x54, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc98, %for.end53
  %63 = load i32, i32* %x54, align 4
  %cmp56 = icmp sge i32 %63, 1
  br i1 %cmp56, label %for.body57, label %for.end99

for.body57:                                       ; preds = %for.cond55
  %64 = load i32, i32* %x54, align 4
  %arrayidx59 = getelementptr inbounds [10010 x i32], [10010 x i32]* %HEAD, i32 0, i32 %64
  %65 = load i32, i32* %arrayidx59, align 4
  store i32 %65, i32* %i58, align 4
  br label %for.cond60

for.cond60:                                       ; preds = %for.inc95, %for.body57
  %66 = load i32, i32* %i58, align 4
  %tobool61 = icmp ne i32 %66, 0
  br i1 %tobool61, label %for.body62, label %for.end97

for.body62:                                       ; preds = %for.cond60
  %67 = load i32, i32* %i58, align 4
  %arrayidx64 = getelementptr inbounds [10010 x i32], [10010 x i32]* %VER, i32 0, i32 %67
  %68 = load i32, i32* %arrayidx64, align 4
  store i32 %68, i32* %y63, align 4
  %69 = load i32, i32* %y63, align 4
  %arrayidx65 = getelementptr inbounds [10010 x i32], [10010 x i32]* %used, i32 0, i32 %69
  %70 = load i32, i32* %arrayidx65, align 4
  %71 = load i32, i32* %x54, align 4
  %cmp66 = icmp eq i32 %70, %71
  br i1 %cmp66, label %if.then67, label %if.end68

if.then67:                                        ; preds = %for.body62
  br label %for.inc95

if.end68:                                         ; preds = %for.body62
  %72 = load i32, i32* %x54, align 4
  %73 = load i32, i32* %y63, align 4
  %arrayidx69 = getelementptr inbounds [10010 x i32], [10010 x i32]* %used, i32 0, i32 %73
  store i32 %72, i32* %arrayidx69, align 4
  %74 = load i32, i32* %y63, align 4
  %arrayidx70 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %74
  %75 = load i32, i32* %arrayidx70, align 4
  %76 = load i32, i32* %x54, align 4
  %arrayidx71 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %76
  %77 = load i32, i32* %arrayidx71, align 4
  %78 = load i32, i32* %y63, align 4
  %arrayidx72 = getelementptr inbounds [10010 x i32], [10010 x i32]* %size, i32 0, i32 %78
  %79 = load i32, i32* %arrayidx72, align 4
  %add = add nsw i32 %77, %79
  %cmp73 = icmp slt i32 %75, %add
  br i1 %cmp73, label %if.then74, label %if.else

if.then74:                                        ; preds = %if.end68
  %80 = load i32, i32* %x54, align 4
  %arrayidx75 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %80
  %81 = load i32, i32* %arrayidx75, align 4
  %82 = load i32, i32* %y63, align 4
  %arrayidx76 = getelementptr inbounds [10010 x i32], [10010 x i32]* %size, i32 0, i32 %82
  %83 = load i32, i32* %arrayidx76, align 4
  %add77 = add nsw i32 %81, %83
  %84 = load i32, i32* %y63, align 4
  %arrayidx78 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %84
  store i32 %add77, i32* %arrayidx78, align 4
  %85 = load i32, i32* %x54, align 4
  %arrayidx79 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %85
  %86 = load i32, i32* %arrayidx79, align 4
  %87 = load i32, i32* %y63, align 4
  %arrayidx80 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %87
  store i32 %86, i32* %arrayidx80, align 4
  br label %if.end94

if.else:                                          ; preds = %if.end68
  %88 = load i32, i32* %y63, align 4
  %arrayidx81 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %88
  %89 = load i32, i32* %arrayidx81, align 4
  %90 = load i32, i32* %x54, align 4
  %arrayidx82 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %90
  %91 = load i32, i32* %arrayidx82, align 4
  %92 = load i32, i32* %y63, align 4
  %arrayidx83 = getelementptr inbounds [10010 x i32], [10010 x i32]* %size, i32 0, i32 %92
  %93 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %91, %93
  %cmp85 = icmp eq i32 %89, %add84
  br i1 %cmp85, label %if.then86, label %if.end93

if.then86:                                        ; preds = %if.else
  %94 = load i32, i32* %y63, align 4
  %arrayidx87 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %94
  %95 = load i32, i32* %arrayidx87, align 4
  %96 = load i32, i32* %x54, align 4
  %arrayidx88 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %96
  %97 = load i32, i32* %arrayidx88, align 4
  %add89 = add nsw i32 %95, %97
  %98 = load i32, i32* %y63, align 4
  %arrayidx90 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %98
  store i32 %add89, i32* %arrayidx90, align 4
  %99 = load i32, i32* %y63, align 4
  %arrayidx91 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %99
  %100 = load i32, i32* %arrayidx91, align 4
  %101 = load i32, i32* %MOD, align 4
  %rem = srem i32 %100, %101
  %102 = load i32, i32* %y63, align 4
  %arrayidx92 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %102
  store i32 %rem, i32* %arrayidx92, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then86, %if.else
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.then74
  br label %for.inc95

for.inc95:                                        ; preds = %if.end94, %if.then67
  %103 = load i32, i32* %i58, align 4
  %arrayidx96 = getelementptr inbounds [10010 x i32], [10010 x i32]* %NEXT, i32 0, i32 %103
  %104 = load i32, i32* %arrayidx96, align 4
  store i32 %104, i32* %i58, align 4
  br label %for.cond60

for.end97:                                        ; preds = %for.cond60
  br label %for.inc98

for.inc98:                                        ; preds = %for.end97
  %105 = load i32, i32* %x54, align 4
  %dec = add nsw i32 %105, -1
  store i32 %dec, i32* %x54, align 4
  br label %for.cond55

for.end99:                                        ; preds = %for.cond55
  %106 = load i32, i32* %mn.addr, align 4
  store i32 %106, i32* %ans, align 4
  store i32 0, i32* %tmp, align 4
  store i32 1, i32* %i101, align 4
  br label %for.cond102

for.cond102:                                      ; preds = %for.inc119, %for.end99
  %107 = load i32, i32* %i101, align 4
  %108 = load i32, i32* %scc, align 4
  %cmp103 = icmp sle i32 %107, %108
  br i1 %cmp103, label %for.body104, label %for.end121

for.body104:                                      ; preds = %for.cond102
  %109 = load i32, i32* %i101, align 4
  %arrayidx105 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %109
  %110 = load i32, i32* %arrayidx105, align 4
  %111 = load i32, i32* %ans, align 4
  %cmp106 = icmp sgt i32 %110, %111
  br i1 %cmp106, label %if.then107, label %if.else110

if.then107:                                       ; preds = %for.body104
  %112 = load i32, i32* %i101, align 4
  %arrayidx108 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %112
  %113 = load i32, i32* %arrayidx108, align 4
  store i32 %113, i32* %ans, align 4
  %114 = load i32, i32* %i101, align 4
  %arrayidx109 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %114
  %115 = load i32, i32* %arrayidx109, align 4
  store i32 %115, i32* %tmp, align 4
  br label %if.end118

if.else110:                                       ; preds = %for.body104
  %116 = load i32, i32* %i101, align 4
  %arrayidx111 = getelementptr inbounds [10010 x i32], [10010 x i32]* %f, i32 0, i32 %116
  %117 = load i32, i32* %arrayidx111, align 4
  %118 = load i32, i32* %ans, align 4
  %cmp112 = icmp eq i32 %117, %118
  br i1 %cmp112, label %if.then113, label %if.end117

if.then113:                                       ; preds = %if.else110
  %119 = load i32, i32* %tmp, align 4
  %120 = load i32, i32* %i101, align 4
  %arrayidx114 = getelementptr inbounds [10010 x i32], [10010 x i32]* %g, i32 0, i32 %120
  %121 = load i32, i32* %arrayidx114, align 4
  %add115 = add nsw i32 %119, %121
  store i32 %add115, i32* %tmp, align 4
  %122 = load i32, i32* %tmp, align 4
  %123 = load i32, i32* %MOD, align 4
  %rem116 = srem i32 %122, %123
  store i32 %rem116, i32* %tmp, align 4
  br label %if.end117

if.end117:                                        ; preds = %if.then113, %if.else110
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then107
  br label %for.inc119

for.inc119:                                       ; preds = %if.end118
  %124 = load i32, i32* %i101, align 4
  %inc120 = add nsw i32 %124, 1
  store i32 %inc120, i32* %i101, align 4
  br label %for.cond102

for.end121:                                       ; preds = %for.cond102
  %125 = load i32, i32* %tmp, align 4
  ret i32 %125
}

; Function Attrs: noinline nounwind
define i32 @"\01?find_sc@@YAHHPAH@Z"(i32 %x, i32* %f) #0 {
entry:
  %retval = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %x.addr = alloca i32, align 4
  store i32* %f, i32** %f.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32*, i32** %f.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %0
  %2 = load i32, i32* %arrayidx, align 4
  %3 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %x.addr, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32*, i32** %f.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %7 = load i32*, i32** %f.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %6
  %8 = load i32, i32* %arrayidx1, align 4
  %call = call i32 @"\01?find_sc@@YAHHPAH@Z"(i32 %8, i32* %5)
  %9 = load i32, i32* %x.addr, align 4
  %10 = load i32*, i32** %f.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %9
  store i32 %call, i32* %arrayidx2, align 4
  %11 = load i32, i32* %x.addr, align 4
  %12 = load i32*, i32** %f.addr, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %11
  %13 = load i32, i32* %arrayidx3, align 4
  store i32 %13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind
define i32 @"\01?save_cloud@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %e1 = alloca [1009 x i32], align 4
  %e2 = alloca [1009 x i32], align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %cnt = alloca i32, align 4
  %f = alloca [20010 x i32], align 4
  %x = alloca [20010 x i32], align 4
  %y = alloca [20010 x i32], align 4
  %i = alloca i32, align 4
  %i5 = alloca i32, align 4
  %j = alloca i32, align 4
  %i38 = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %j86 = alloca i32, align 4
  %i91 = alloca i32, align 4
  %ta1 = alloca i32, align 4
  %mx = alloca i32, align 4
  %i148 = alloca i32, align 4
  %i157 = alloca i32, align 4
  %p = alloca i32, align 4
  %q = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [1009 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([1009 x i32]* @"\01?e1@?1??save_cloud@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  %1 = bitcast [1009 x i32]* %e2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([1009 x i32]* @"\01?e2@?1??save_cloud@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  store i32 0, i32* %cnt, align 4
  %2 = bitcast [20010 x i32]* %f to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 80040, i1 false)
  %3 = bitcast [20010 x i32]* %x to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %3, i8 0, i32 80040, i1 false)
  %4 = bitcast [20010 x i32]* %y to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %4, i8 0, i32 80040, i1 false)
  store i32 100, i32* %n, align 4
  store i32 100, i32* %r, align 4
  store i32 100, i32* %c, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %7, 1
  %arrayidx = getelementptr inbounds [1009 x i32], [1009 x i32]* %e1, i32 0, i32 %sub
  %8 = load i32, i32* %arrayidx, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %9
  store i32 %8, i32* %arrayidx1, align 4
  %10 = load i32, i32* %i, align 4
  %sub2 = sub nsw i32 %10, 1
  %arrayidx3 = getelementptr inbounds [1009 x i32], [1009 x i32]* %e2, i32 0, i32 %sub2
  %11 = load i32, i32* %arrayidx3, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %12
  store i32 %11, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i5, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc35, %for.end
  %14 = load i32, i32* %i5, align 4
  %15 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %14, %15
  br i1 %cmp7, label %for.body8, label %for.end37

for.body8:                                        ; preds = %for.cond6
  %16 = load i32, i32* %i5, align 4
  %add = add nsw i32 %16, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc32, %for.body8
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %n, align 4
  %cmp10 = icmp sle i32 %17, %18
  br i1 %cmp10, label %for.body11, label %for.end34

for.body11:                                       ; preds = %for.cond9
  %19 = load i32, i32* %i5, align 4
  %20 = load i32, i32* %cnt, align 4
  %inc12 = add nsw i32 %20, 1
  store i32 %inc12, i32* %cnt, align 4
  %arrayidx13 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %inc12
  %x14 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx13, i32 0, i32 0
  store i32 %19, i32* %x14, align 4
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %cnt, align 4
  %arrayidx15 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %22
  %y16 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx15, i32 0, i32 1
  store i32 %21, i32* %y16, align 4
  %23 = load i32, i32* %i5, align 4
  %arrayidx17 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %23
  %24 = load i32, i32* %arrayidx17, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx18 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx18, align 4
  %sub19 = sub nsw i32 %24, %26
  %27 = load i32, i32* %i5, align 4
  %arrayidx20 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %27
  %28 = load i32, i32* %arrayidx20, align 4
  %29 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %29
  %30 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub nsw i32 %28, %30
  %mul = mul nsw i32 %sub19, %sub22
  %31 = load i32, i32* %i5, align 4
  %arrayidx23 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %31
  %32 = load i32, i32* %arrayidx23, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx24, align 4
  %sub25 = sub nsw i32 %32, %34
  %35 = load i32, i32* %i5, align 4
  %arrayidx26 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %35
  %36 = load i32, i32* %arrayidx26, align 4
  %37 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx27, align 4
  %sub28 = sub nsw i32 %36, %38
  %mul29 = mul nsw i32 %sub25, %sub28
  %add30 = add nsw i32 %mul, %mul29
  %39 = load i32, i32* %cnt, align 4
  %arrayidx31 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %39
  %len = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx31, i32 0, i32 2
  store i32 %add30, i32* %len, align 4
  br label %for.inc32

for.inc32:                                        ; preds = %for.body11
  %40 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %40, 1
  store i32 %inc33, i32* %j, align 4
  br label %for.cond9

for.end34:                                        ; preds = %for.cond9
  br label %for.inc35

for.inc35:                                        ; preds = %for.end34
  %41 = load i32, i32* %i5, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i5, align 4
  br label %for.cond6

for.end37:                                        ; preds = %for.cond6
  store i32 1, i32* %i38, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc83, %for.end37
  %42 = load i32, i32* %i38, align 4
  %43 = load i32, i32* %n, align 4
  %cmp40 = icmp sle i32 %42, %43
  br i1 %cmp40, label %for.body41, label %for.end85

for.body41:                                       ; preds = %for.cond39
  %44 = load i32, i32* %i38, align 4
  %45 = load i32, i32* %cnt, align 4
  %inc42 = add nsw i32 %45, 1
  store i32 %inc42, i32* %cnt, align 4
  %arrayidx43 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %inc42
  %x44 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx43, i32 0, i32 0
  store i32 %44, i32* %x44, align 4
  %46 = load i32, i32* %n, align 4
  %add45 = add nsw i32 %46, 1
  %47 = load i32, i32* %cnt, align 4
  %arrayidx46 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %47
  %y47 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx46, i32 0, i32 1
  store i32 %add45, i32* %y47, align 4
  %48 = load i32, i32* %i38, align 4
  %arrayidx48 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %48
  %49 = load i32, i32* %arrayidx48, align 4
  %sub49 = sub nsw i32 %49, 1
  %50 = load i32, i32* %r, align 4
  %51 = load i32, i32* %i38, align 4
  %arrayidx50 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %51
  %52 = load i32, i32* %arrayidx50, align 4
  %sub51 = sub nsw i32 %50, %52
  %cmp52 = icmp slt i32 %sub49, %sub51
  br i1 %cmp52, label %if.then, label %if.else

if.then:                                          ; preds = %for.body41
  %53 = load i32, i32* %i38, align 4
  %arrayidx53 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %53
  %54 = load i32, i32* %arrayidx53, align 4
  %sub54 = sub nsw i32 %54, 1
  store i32 %sub54, i32* %temp1, align 4
  br label %if.end

if.else:                                          ; preds = %for.body41
  %55 = load i32, i32* %r, align 4
  %56 = load i32, i32* %i38, align 4
  %arrayidx55 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %56
  %57 = load i32, i32* %arrayidx55, align 4
  %sub56 = sub nsw i32 %55, %57
  store i32 %sub56, i32* %temp1, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %58 = load i32, i32* %temp1, align 4
  %59 = load i32, i32* %temp1, align 4
  %mul57 = mul nsw i32 %58, %59
  %mul58 = mul nsw i32 %mul57, 4
  %60 = load i32, i32* %cnt, align 4
  %arrayidx59 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %60
  %len60 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx59, i32 0, i32 2
  store i32 %mul58, i32* %len60, align 4
  %61 = load i32, i32* %i38, align 4
  %62 = load i32, i32* %cnt, align 4
  %inc61 = add nsw i32 %62, 1
  store i32 %inc61, i32* %cnt, align 4
  %arrayidx62 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %inc61
  %x63 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx62, i32 0, i32 0
  store i32 %61, i32* %x63, align 4
  %63 = load i32, i32* %n, align 4
  %add64 = add nsw i32 %63, 2
  %64 = load i32, i32* %cnt, align 4
  %arrayidx65 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %64
  %y66 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx65, i32 0, i32 1
  store i32 %add64, i32* %y66, align 4
  %65 = load i32, i32* %i38, align 4
  %arrayidx67 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %65
  %66 = load i32, i32* %arrayidx67, align 4
  %sub68 = sub nsw i32 %66, 1
  %67 = load i32, i32* %c, align 4
  %68 = load i32, i32* %i38, align 4
  %arrayidx69 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %68
  %69 = load i32, i32* %arrayidx69, align 4
  %sub70 = sub nsw i32 %67, %69
  %cmp71 = icmp slt i32 %sub68, %sub70
  br i1 %cmp71, label %if.then72, label %if.else75

if.then72:                                        ; preds = %if.end
  %70 = load i32, i32* %i38, align 4
  %arrayidx73 = getelementptr inbounds [20010 x i32], [20010 x i32]* %x, i32 0, i32 %70
  %71 = load i32, i32* %arrayidx73, align 4
  %sub74 = sub nsw i32 %71, 1
  store i32 %sub74, i32* %temp1, align 4
  br label %if.end78

if.else75:                                        ; preds = %if.end
  %72 = load i32, i32* %c, align 4
  %73 = load i32, i32* %i38, align 4
  %arrayidx76 = getelementptr inbounds [20010 x i32], [20010 x i32]* %y, i32 0, i32 %73
  %74 = load i32, i32* %arrayidx76, align 4
  %sub77 = sub nsw i32 %72, %74
  store i32 %sub77, i32* %temp1, align 4
  br label %if.end78

if.end78:                                         ; preds = %if.else75, %if.then72
  %75 = load i32, i32* %temp1, align 4
  %76 = load i32, i32* %temp1, align 4
  %mul79 = mul nsw i32 %75, %76
  %mul80 = mul nsw i32 %mul79, 4
  %77 = load i32, i32* %cnt, align 4
  %arrayidx81 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %77
  %len82 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx81, i32 0, i32 2
  store i32 %mul80, i32* %len82, align 4
  br label %for.inc83

for.inc83:                                        ; preds = %if.end78
  %78 = load i32, i32* %i38, align 4
  %inc84 = add nsw i32 %78, 1
  store i32 %inc84, i32* %i38, align 4
  br label %for.cond39

for.end85:                                        ; preds = %for.cond39
  store i32 1, i32* %j86, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc138, %for.end85
  %79 = load i32, i32* %j86, align 4
  %80 = load i32, i32* %cnt, align 4
  %add88 = add nsw i32 %80, 1
  %cmp89 = icmp slt i32 %79, %add88
  br i1 %cmp89, label %for.body90, label %for.end140

for.body90:                                       ; preds = %for.cond87
  store i32 1, i32* %i91, align 4
  br label %for.cond92

for.cond92:                                       ; preds = %for.inc135, %for.body90
  %81 = load i32, i32* %i91, align 4
  %82 = load i32, i32* %cnt, align 4
  %add93 = add nsw i32 %82, 1
  %83 = load i32, i32* %j86, align 4
  %sub94 = sub nsw i32 %add93, %83
  %cmp95 = icmp slt i32 %81, %sub94
  br i1 %cmp95, label %for.body96, label %for.end137

for.body96:                                       ; preds = %for.cond92
  %84 = load i32, i32* %i91, align 4
  %arrayidx97 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %84
  %len98 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx97, i32 0, i32 2
  %85 = load i32, i32* %len98, align 4
  %86 = load i32, i32* %i91, align 4
  %add99 = add nsw i32 %86, 1
  %arrayidx100 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %add99
  %len101 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx100, i32 0, i32 2
  %87 = load i32, i32* %len101, align 4
  %cmp102 = icmp sgt i32 %85, %87
  br i1 %cmp102, label %if.then103, label %if.end134

if.then103:                                       ; preds = %for.body96
  %88 = load i32, i32* %i91, align 4
  %arrayidx104 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %88
  %len105 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx104, i32 0, i32 2
  %89 = load i32, i32* %len105, align 4
  store i32 %89, i32* %ta1, align 4
  %90 = load i32, i32* %i91, align 4
  %add106 = add nsw i32 %90, 1
  %arrayidx107 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %add106
  %len108 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx107, i32 0, i32 2
  %91 = load i32, i32* %len108, align 4
  %92 = load i32, i32* %i91, align 4
  %arrayidx109 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %92
  %len110 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx109, i32 0, i32 2
  store i32 %91, i32* %len110, align 4
  %93 = load i32, i32* %ta1, align 4
  %94 = load i32, i32* %i91, align 4
  %add111 = add nsw i32 %94, 1
  %arrayidx112 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %add111
  %len113 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx112, i32 0, i32 2
  store i32 %93, i32* %len113, align 4
  %95 = load i32, i32* %i91, align 4
  %arrayidx114 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %95
  %x115 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx114, i32 0, i32 0
  %96 = load i32, i32* %x115, align 4
  store i32 %96, i32* %ta1, align 4
  %97 = load i32, i32* %i91, align 4
  %add116 = add nsw i32 %97, 1
  %arrayidx117 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %add116
  %x118 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx117, i32 0, i32 0
  %98 = load i32, i32* %x118, align 4
  %99 = load i32, i32* %i91, align 4
  %arrayidx119 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %99
  %x120 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx119, i32 0, i32 0
  store i32 %98, i32* %x120, align 4
  %100 = load i32, i32* %ta1, align 4
  %101 = load i32, i32* %i91, align 4
  %add121 = add nsw i32 %101, 1
  %arrayidx122 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %add121
  %x123 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx122, i32 0, i32 0
  store i32 %100, i32* %x123, align 4
  %102 = load i32, i32* %i91, align 4
  %arrayidx124 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %102
  %y125 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx124, i32 0, i32 1
  %103 = load i32, i32* %y125, align 4
  store i32 %103, i32* %ta1, align 4
  %104 = load i32, i32* %i91, align 4
  %add126 = add nsw i32 %104, 1
  %arrayidx127 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %add126
  %y128 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx127, i32 0, i32 1
  %105 = load i32, i32* %y128, align 4
  %106 = load i32, i32* %i91, align 4
  %arrayidx129 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %106
  %y130 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx129, i32 0, i32 1
  store i32 %105, i32* %y130, align 4
  %107 = load i32, i32* %ta1, align 4
  %108 = load i32, i32* %i91, align 4
  %add131 = add nsw i32 %108, 1
  %arrayidx132 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %add131
  %y133 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx132, i32 0, i32 1
  store i32 %107, i32* %y133, align 4
  br label %if.end134

if.end134:                                        ; preds = %if.then103, %for.body96
  br label %for.inc135

for.inc135:                                       ; preds = %if.end134
  %109 = load i32, i32* %i91, align 4
  %inc136 = add nsw i32 %109, 1
  store i32 %inc136, i32* %i91, align 4
  br label %for.cond92

for.end137:                                       ; preds = %for.cond92
  br label %for.inc138

for.inc138:                                       ; preds = %for.end137
  %110 = load i32, i32* %j86, align 4
  %inc139 = add nsw i32 %110, 1
  store i32 %inc139, i32* %j86, align 4
  br label %for.cond87

for.end140:                                       ; preds = %for.cond87
  %111 = load i32, i32* %mn.addr, align 4
  store i32 %111, i32* %mx, align 4
  %112 = load i32, i32* %mx, align 4
  %call = call i32 @"\01?max_zitu@@YAHH@Z"(i32 %112)
  %113 = load i32, i32* %mx, align 4
  %call141 = call i32 @"\01?yyy_qi@@YAHH@Z"(i32 %113)
  %cmp142 = icmp sgt i32 %call, %call141
  br i1 %cmp142, label %if.then143, label %if.else145

if.then143:                                       ; preds = %for.end140
  %114 = load i32, i32* %mx, align 4
  %call144 = call i32 @"\01?yyy_qi@@YAHH@Z"(i32 %114)
  store i32 %call144, i32* %mx, align 4
  br label %if.end147

if.else145:                                       ; preds = %for.end140
  %115 = load i32, i32* %mx, align 4
  %call146 = call i32 @"\01?max_zitu@@YAHH@Z"(i32 %115)
  store i32 %call146, i32* %mx, align 4
  br label %if.end147

if.end147:                                        ; preds = %if.else145, %if.then143
  store i32 1, i32* %i148, align 4
  br label %for.cond149

for.cond149:                                      ; preds = %for.inc154, %if.end147
  %116 = load i32, i32* %i148, align 4
  %117 = load i32, i32* %n, align 4
  %add150 = add nsw i32 %117, 2
  %cmp151 = icmp sle i32 %116, %add150
  br i1 %cmp151, label %for.body152, label %for.end156

for.body152:                                      ; preds = %for.cond149
  %118 = load i32, i32* %i148, align 4
  %119 = load i32, i32* %i148, align 4
  %arrayidx153 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 %119
  store i32 %118, i32* %arrayidx153, align 4
  br label %for.inc154

for.inc154:                                       ; preds = %for.body152
  %120 = load i32, i32* %i148, align 4
  %inc155 = add nsw i32 %120, 1
  store i32 %inc155, i32* %i148, align 4
  br label %for.cond149

for.end156:                                       ; preds = %for.cond149
  store i32 1, i32* %i157, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc188, %for.end156
  %121 = load i32, i32* %i157, align 4
  %122 = load i32, i32* %cnt, align 4
  %cmp159 = icmp sle i32 %121, %122
  br i1 %cmp159, label %for.body160, label %for.end190

for.body160:                                      ; preds = %for.cond158
  %arraydecay = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 0
  %123 = load i32, i32* %i157, align 4
  %arrayidx161 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %123
  %x162 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx161, i32 0, i32 0
  %124 = load i32, i32* %x162, align 4
  %call163 = call i32 @"\01?find_sc@@YAHHPAH@Z"(i32 %124, i32* %arraydecay)
  store i32 %call163, i32* %p, align 4
  %arraydecay164 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 0
  %125 = load i32, i32* %i157, align 4
  %arrayidx165 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %125
  %y166 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx165, i32 0, i32 1
  %126 = load i32, i32* %y166, align 4
  %call167 = call i32 @"\01?find_sc@@YAHHPAH@Z"(i32 %126, i32* %arraydecay164)
  store i32 %call167, i32* %q, align 4
  %127 = load i32, i32* %p, align 4
  %128 = load i32, i32* %q, align 4
  %cmp168 = icmp ne i32 %127, %128
  br i1 %cmp168, label %if.then169, label %if.end187

if.then169:                                       ; preds = %for.body160
  %129 = load i32, i32* %q, align 4
  %130 = load i32, i32* %p, align 4
  %arrayidx170 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 %130
  store i32 %129, i32* %arrayidx170, align 4
  %131 = load i32, i32* %mx, align 4
  %132 = load i32, i32* %i157, align 4
  %arrayidx171 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %132
  %len172 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx171, i32 0, i32 2
  %133 = load i32, i32* %len172, align 4
  %cmp173 = icmp slt i32 %131, %133
  br i1 %cmp173, label %if.then174, label %if.end177

if.then174:                                       ; preds = %if.then169
  %134 = load i32, i32* %i157, align 4
  %arrayidx175 = getelementptr inbounds [20010 x %struct.node_snow], [20010 x %struct.node_snow]* @"\01?e@?1??save_cloud@@YAHH@Z@4PAUedge_sc@@A", i32 0, i32 %134
  %len176 = getelementptr inbounds %struct.node_snow, %struct.node_snow* %arrayidx175, i32 0, i32 2
  %135 = load i32, i32* %len176, align 4
  store i32 %135, i32* %mx, align 4
  br label %if.end177

if.end177:                                        ; preds = %if.then174, %if.then169
  %arraydecay178 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 0
  %136 = load i32, i32* %n, align 4
  %add179 = add nsw i32 %136, 1
  %call180 = call i32 @"\01?find_sc@@YAHHPAH@Z"(i32 %add179, i32* %arraydecay178)
  %arraydecay181 = getelementptr inbounds [20010 x i32], [20010 x i32]* %f, i32 0, i32 0
  %137 = load i32, i32* %n, align 4
  %add182 = add nsw i32 %137, 2
  %call183 = call i32 @"\01?find_sc@@YAHHPAH@Z"(i32 %add182, i32* %arraydecay181)
  %cmp184 = icmp eq i32 %call180, %call183
  br i1 %cmp184, label %if.then185, label %if.end186

if.then185:                                       ; preds = %if.end177
  br label %for.end190

if.end186:                                        ; preds = %if.end177
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %for.body160
  br label %for.inc188

for.inc188:                                       ; preds = %if.end187
  %138 = load i32, i32* %i157, align 4
  %inc189 = add nsw i32 %138, 1
  store i32 %inc189, i32* %i157, align 4
  br label %for.cond158

for.end190:                                       ; preds = %if.then185, %for.cond158
  %139 = load i32, i32* %mx, align 4
  ret i32 %139
}

; Function Attrs: noinline nounwind
define i32 @"\01?light_bomb@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %v = alloca [110 x [110 x i32]], align 4
  %ans = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %vi = alloca i32, align 4
  %e1 = alloca [1009 x i32], align 4
  %e2 = alloca [1009 x i32], align 4
  %e3 = alloca [1009 x i32], align 4
  %i = alloca i32, align 4
  %i8 = alloca i32, align 4
  %j = alloca i32, align 4
  %i38 = alloca i32, align 4
  %j43 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [110 x [110 x i32]]* %v to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 48400, i1 false)
  %1 = load i32, i32* %mn.addr, align 4
  store i32 %1, i32* %ans, align 4
  %2 = bitcast [1009 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([1009 x i32]* @"\01?e1@?1??light_bomb@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  %3 = bitcast [1009 x i32]* %e2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([1009 x i32]* @"\01?e2@?1??light_bomb@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  %4 = bitcast [1009 x i32]* %e3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 bitcast ([1009 x i32]* @"\01?e3@?1??light_bomb@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  store i32 100, i32* %n, align 4
  store i32 100, i32* %r, align 4
  %5 = load i32, i32* %ans, align 4
  %call = call i32 @"\01?save_cloud@@YAHH@Z"(i32 %5)
  store i32 %call, i32* %ans, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds [1009 x i32], [1009 x i32]* %e1, i32 0, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  store i32 %9, i32* %x, align 4
  %10 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %10, 1
  %arrayidx2 = getelementptr inbounds [1009 x i32], [1009 x i32]* %e2, i32 0, i32 %sub1
  %11 = load i32, i32* %arrayidx2, align 4
  store i32 %11, i32* %y, align 4
  %12 = load i32, i32* %i, align 4
  %sub3 = sub nsw i32 %12, 1
  %arrayidx4 = getelementptr inbounds [1009 x i32], [1009 x i32]* %e3, i32 0, i32 %sub3
  %13 = load i32, i32* %arrayidx4, align 4
  store i32 %13, i32* %vi, align 4
  %14 = load i32, i32* %vi, align 4
  %15 = load i32, i32* %y, align 4
  %add = add nsw i32 %15, 1
  %16 = load i32, i32* %x, align 4
  %add5 = add nsw i32 %16, 1
  %arrayidx6 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %add5
  %arrayidx7 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx6, i32 0, i32 %add
  store i32 %14, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i8, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc35, %for.end
  %18 = load i32, i32* %i8, align 4
  %cmp10 = icmp sle i32 %18, 101
  br i1 %cmp10, label %for.body11, label %for.end37

for.body11:                                       ; preds = %for.cond9
  store i32 1, i32* %j, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc32, %for.body11
  %19 = load i32, i32* %j, align 4
  %cmp13 = icmp sle i32 %19, 101
  br i1 %cmp13, label %for.body14, label %for.end34

for.body14:                                       ; preds = %for.cond12
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %i8, align 4
  %arrayidx15 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %21
  %arrayidx16 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx15, i32 0, i32 %20
  %22 = load i32, i32* %arrayidx16, align 4
  %23 = load i32, i32* %j, align 4
  %24 = load i32, i32* %i8, align 4
  %sub17 = sub nsw i32 %24, 1
  %arrayidx18 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %sub17
  %arrayidx19 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx18, i32 0, i32 %23
  %25 = load i32, i32* %arrayidx19, align 4
  %add20 = add nsw i32 %22, %25
  %26 = load i32, i32* %j, align 4
  %sub21 = sub nsw i32 %26, 1
  %27 = load i32, i32* %i8, align 4
  %arrayidx22 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %27
  %arrayidx23 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx22, i32 0, i32 %sub21
  %28 = load i32, i32* %arrayidx23, align 4
  %add24 = add nsw i32 %add20, %28
  %29 = load i32, i32* %j, align 4
  %sub25 = sub nsw i32 %29, 1
  %30 = load i32, i32* %i8, align 4
  %sub26 = sub nsw i32 %30, 1
  %arrayidx27 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %sub26
  %arrayidx28 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx27, i32 0, i32 %sub25
  %31 = load i32, i32* %arrayidx28, align 4
  %sub29 = sub nsw i32 %add24, %31
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %i8, align 4
  %arrayidx30 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %33
  %arrayidx31 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx30, i32 0, i32 %32
  store i32 %sub29, i32* %arrayidx31, align 4
  br label %for.inc32

for.inc32:                                        ; preds = %for.body14
  %34 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %34, 1
  store i32 %inc33, i32* %j, align 4
  br label %for.cond12

for.end34:                                        ; preds = %for.cond12
  br label %for.inc35

for.inc35:                                        ; preds = %for.end34
  %35 = load i32, i32* %i8, align 4
  %inc36 = add nsw i32 %35, 1
  store i32 %inc36, i32* %i8, align 4
  br label %for.cond9

for.end37:                                        ; preds = %for.cond9
  store i32 0, i32* %i38, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc82, %for.end37
  %36 = load i32, i32* %i38, align 4
  %37 = load i32, i32* %r, align 4
  %sub40 = sub nsw i32 101, %37
  %cmp41 = icmp sle i32 %36, %sub40
  br i1 %cmp41, label %for.body42, label %for.end84

for.body42:                                       ; preds = %for.cond39
  store i32 0, i32* %j43, align 4
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc79, %for.body42
  %38 = load i32, i32* %j43, align 4
  %39 = load i32, i32* %r, align 4
  %sub45 = sub nsw i32 101, %39
  %cmp46 = icmp sle i32 %38, %sub45
  br i1 %cmp46, label %for.body47, label %for.end81

for.body47:                                       ; preds = %for.cond44
  %40 = load i32, i32* %ans, align 4
  %41 = load i32, i32* %j43, align 4
  %42 = load i32, i32* %r, align 4
  %add48 = add nsw i32 %41, %42
  %43 = load i32, i32* %i38, align 4
  %44 = load i32, i32* %r, align 4
  %add49 = add nsw i32 %43, %44
  %arrayidx50 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %add49
  %arrayidx51 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx50, i32 0, i32 %add48
  %45 = load i32, i32* %arrayidx51, align 4
  %46 = load i32, i32* %j43, align 4
  %47 = load i32, i32* %i38, align 4
  %48 = load i32, i32* %r, align 4
  %add52 = add nsw i32 %47, %48
  %arrayidx53 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %add52
  %arrayidx54 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx53, i32 0, i32 %46
  %49 = load i32, i32* %arrayidx54, align 4
  %sub55 = sub nsw i32 %45, %49
  %50 = load i32, i32* %j43, align 4
  %51 = load i32, i32* %r, align 4
  %add56 = add nsw i32 %50, %51
  %52 = load i32, i32* %i38, align 4
  %arrayidx57 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %52
  %arrayidx58 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx57, i32 0, i32 %add56
  %53 = load i32, i32* %arrayidx58, align 4
  %sub59 = sub nsw i32 %sub55, %53
  %54 = load i32, i32* %j43, align 4
  %55 = load i32, i32* %i38, align 4
  %arrayidx60 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %55
  %arrayidx61 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx60, i32 0, i32 %54
  %56 = load i32, i32* %arrayidx61, align 4
  %add62 = add nsw i32 %sub59, %56
  %cmp63 = icmp slt i32 %40, %add62
  br i1 %cmp63, label %if.then, label %if.end

if.then:                                          ; preds = %for.body47
  %57 = load i32, i32* %j43, align 4
  %58 = load i32, i32* %r, align 4
  %add64 = add nsw i32 %57, %58
  %59 = load i32, i32* %i38, align 4
  %60 = load i32, i32* %r, align 4
  %add65 = add nsw i32 %59, %60
  %arrayidx66 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %add65
  %arrayidx67 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx66, i32 0, i32 %add64
  %61 = load i32, i32* %arrayidx67, align 4
  %62 = load i32, i32* %j43, align 4
  %63 = load i32, i32* %i38, align 4
  %64 = load i32, i32* %r, align 4
  %add68 = add nsw i32 %63, %64
  %arrayidx69 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %add68
  %arrayidx70 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx69, i32 0, i32 %62
  %65 = load i32, i32* %arrayidx70, align 4
  %sub71 = sub nsw i32 %61, %65
  %66 = load i32, i32* %j43, align 4
  %67 = load i32, i32* %r, align 4
  %add72 = add nsw i32 %66, %67
  %68 = load i32, i32* %i38, align 4
  %arrayidx73 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %68
  %arrayidx74 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx73, i32 0, i32 %add72
  %69 = load i32, i32* %arrayidx74, align 4
  %sub75 = sub nsw i32 %sub71, %69
  %70 = load i32, i32* %j43, align 4
  %71 = load i32, i32* %i38, align 4
  %arrayidx76 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %v, i32 0, i32 %71
  %arrayidx77 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx76, i32 0, i32 %70
  %72 = load i32, i32* %arrayidx77, align 4
  %add78 = add nsw i32 %sub75, %72
  store i32 %add78, i32* %ans, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body47
  br label %for.inc79

for.inc79:                                        ; preds = %if.end
  %73 = load i32, i32* %j43, align 4
  %inc80 = add nsw i32 %73, 1
  store i32 %inc80, i32* %j43, align 4
  br label %for.cond44

for.end81:                                        ; preds = %for.cond44
  br label %for.inc82

for.inc82:                                        ; preds = %for.end81
  %74 = load i32, i32* %i38, align 4
  %inc83 = add nsw i32 %74, 1
  store i32 %inc83, i32* %i38, align 4
  br label %for.cond39

for.end84:                                        ; preds = %for.cond39
  %75 = load i32, i32* %ans, align 4
  ret i32 %75
}

; Function Attrs: noinline nounwind
define i32 @"\01?print_ant@@YAHH@Z"(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp sgt i32 %0, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %x.addr, align 4
  %div = sdiv i32 %1, 10
  %call = call i32 @"\01?print_ant@@YAHH@Z"(i32 %div)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %x.addr, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind
define i32 @"\01?kill_ant@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %t = alloca i32, align 4
  %b = alloca i32, align 4
  %Ans = alloca i32, align 4
  %ans = alloca [110 x [110 x i32]], align 4
  %i = alloca i32, align 4
  %i6 = alloca i32, align 4
  %j = alloca i32, align 4
  %temp = alloca i32, align 4
  %i64 = alloca i32, align 4
  %j68 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %Ans, align 4
  %0 = bitcast [110 x [110 x i32]]* %ans to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 48400, i1 false)
  %1 = load i32, i32* %mn.addr, align 4
  store i32 %1, i32* %n, align 4
  store i32 1, i32* %r, align 4
  store i32 1, i32* %g, align 4
  store i32 1, i32* %b, align 4
  store i32 1, i32* %t, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  %5 = load i32, i32* %g, align 4
  %mul = mul nsw i32 %sub, %5
  %6 = load i32, i32* %t, align 4
  %mul1 = mul nsw i32 %mul, %6
  %7 = load i32, i32* %i, align 4
  %sub2 = sub nsw i32 %7, 1
  %arrayidx = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %sub2
  %arrayidx3 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx, i32 0, i32 0
  %8 = load i32, i32* %arrayidx3, align 4
  %add = add nsw i32 %mul1, %8
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %9
  %arrayidx5 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx4, i32 0, i32 0
  store i32 %add, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i6, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc61, %for.end
  %11 = load i32, i32* %i6, align 4
  %12 = load i32, i32* %n, align 4
  %cmp8 = icmp sle i32 %11, %12
  br i1 %cmp8, label %for.body9, label %for.end63

for.body9:                                        ; preds = %for.cond7
  store i32 1, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc58, %for.body9
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %i6, align 4
  %cmp11 = icmp slt i32 %13, %14
  br i1 %cmp11, label %for.body12, label %for.end60

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %15, 1
  %16 = load i32, i32* %i6, align 4
  %sub14 = sub nsw i32 %16, 1
  %arrayidx15 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %sub14
  %arrayidx16 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx15, i32 0, i32 %sub13
  %17 = load i32, i32* %arrayidx16, align 4
  %18 = load i32, i32* %i6, align 4
  %19 = load i32, i32* %j, align 4
  %sub17 = sub nsw i32 %18, %19
  %20 = load i32, i32* %g, align 4
  %mul18 = mul nsw i32 %sub17, %20
  %21 = load i32, i32* %t, align 4
  %22 = load i32, i32* %j, align 4
  %sub19 = sub nsw i32 %22, 1
  %23 = load i32, i32* %b, align 4
  %mul20 = mul nsw i32 %sub19, %23
  %add21 = add nsw i32 %21, %mul20
  %mul22 = mul nsw i32 %mul18, %add21
  %add23 = add nsw i32 %17, %mul22
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %i6, align 4
  %sub24 = sub nsw i32 %25, 1
  %arrayidx25 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %sub24
  %arrayidx26 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx25, i32 0, i32 %24
  %26 = load i32, i32* %arrayidx26, align 4
  %27 = load i32, i32* %i6, align 4
  %28 = load i32, i32* %j, align 4
  %sub27 = sub nsw i32 %27, %28
  %sub28 = sub nsw i32 %sub27, 1
  %29 = load i32, i32* %g, align 4
  %mul29 = mul nsw i32 %sub28, %29
  %30 = load i32, i32* %t, align 4
  %31 = load i32, i32* %j, align 4
  %32 = load i32, i32* %b, align 4
  %mul30 = mul nsw i32 %31, %32
  %add31 = add nsw i32 %30, %mul30
  %mul32 = mul nsw i32 %mul29, %add31
  %add33 = add nsw i32 %26, %mul32
  %cmp34 = icmp sgt i32 %add23, %add33
  br i1 %cmp34, label %if.then, label %if.else

if.then:                                          ; preds = %for.body12
  %33 = load i32, i32* %j, align 4
  %sub35 = sub nsw i32 %33, 1
  %34 = load i32, i32* %i6, align 4
  %sub36 = sub nsw i32 %34, 1
  %arrayidx37 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %sub36
  %arrayidx38 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx37, i32 0, i32 %sub35
  %35 = load i32, i32* %arrayidx38, align 4
  %36 = load i32, i32* %i6, align 4
  %37 = load i32, i32* %j, align 4
  %sub39 = sub nsw i32 %36, %37
  %38 = load i32, i32* %g, align 4
  %mul40 = mul nsw i32 %sub39, %38
  %39 = load i32, i32* %t, align 4
  %40 = load i32, i32* %j, align 4
  %sub41 = sub nsw i32 %40, 1
  %41 = load i32, i32* %b, align 4
  %mul42 = mul nsw i32 %sub41, %41
  %add43 = add nsw i32 %39, %mul42
  %mul44 = mul nsw i32 %mul40, %add43
  %add45 = add nsw i32 %35, %mul44
  store i32 %add45, i32* %temp, align 4
  br label %if.end

if.else:                                          ; preds = %for.body12
  %42 = load i32, i32* %j, align 4
  %43 = load i32, i32* %i6, align 4
  %sub46 = sub nsw i32 %43, 1
  %arrayidx47 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %sub46
  %arrayidx48 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx47, i32 0, i32 %42
  %44 = load i32, i32* %arrayidx48, align 4
  %45 = load i32, i32* %i6, align 4
  %46 = load i32, i32* %j, align 4
  %sub49 = sub nsw i32 %45, %46
  %sub50 = sub nsw i32 %sub49, 1
  %47 = load i32, i32* %g, align 4
  %mul51 = mul nsw i32 %sub50, %47
  %48 = load i32, i32* %t, align 4
  %49 = load i32, i32* %j, align 4
  %50 = load i32, i32* %b, align 4
  %mul52 = mul nsw i32 %49, %50
  %add53 = add nsw i32 %48, %mul52
  %mul54 = mul nsw i32 %mul51, %add53
  %add55 = add nsw i32 %44, %mul54
  store i32 %add55, i32* %temp, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %51 = load i32, i32* %temp, align 4
  %52 = load i32, i32* %j, align 4
  %53 = load i32, i32* %i6, align 4
  %arrayidx56 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %53
  %arrayidx57 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx56, i32 0, i32 %52
  store i32 %51, i32* %arrayidx57, align 4
  br label %for.inc58

for.inc58:                                        ; preds = %if.end
  %54 = load i32, i32* %j, align 4
  %inc59 = add nsw i32 %54, 1
  store i32 %inc59, i32* %j, align 4
  br label %for.cond10

for.end60:                                        ; preds = %for.cond10
  br label %for.inc61

for.inc61:                                        ; preds = %for.end60
  %55 = load i32, i32* %i6, align 4
  %inc62 = add nsw i32 %55, 1
  store i32 %inc62, i32* %i6, align 4
  br label %for.cond7

for.end63:                                        ; preds = %for.cond7
  store i32 0, i32* %i64, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc110, %for.end63
  %56 = load i32, i32* %i64, align 4
  %57 = load i32, i32* %n, align 4
  %cmp66 = icmp sle i32 %56, %57
  br i1 %cmp66, label %for.body67, label %for.end112

for.body67:                                       ; preds = %for.cond65
  store i32 0, i32* %j68, align 4
  br label %for.cond69

for.cond69:                                       ; preds = %for.inc107, %for.body67
  %58 = load i32, i32* %j68, align 4
  %59 = load i32, i32* %i64, align 4
  %cmp70 = icmp sle i32 %58, %59
  br i1 %cmp70, label %for.body71, label %for.end109

for.body71:                                       ; preds = %for.cond69
  %60 = load i32, i32* %j68, align 4
  %61 = load i32, i32* %i64, align 4
  %arrayidx72 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %61
  %arrayidx73 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx72, i32 0, i32 %60
  %62 = load i32, i32* %arrayidx73, align 4
  %63 = load i32, i32* %r, align 4
  %64 = load i32, i32* %n, align 4
  %65 = load i32, i32* %i64, align 4
  %sub74 = sub nsw i32 %64, %65
  %mul75 = mul nsw i32 %63, %sub74
  %66 = load i32, i32* %t, align 4
  %67 = load i32, i32* %j68, align 4
  %68 = load i32, i32* %b, align 4
  %mul76 = mul nsw i32 %67, %68
  %add77 = add nsw i32 %66, %mul76
  %mul78 = mul nsw i32 %mul75, %add77
  %add79 = add nsw i32 %62, %mul78
  %69 = load i32, i32* %i64, align 4
  %70 = load i32, i32* %j68, align 4
  %sub80 = sub nsw i32 %69, %70
  %71 = load i32, i32* %g, align 4
  %mul81 = mul nsw i32 %sub80, %71
  %72 = load i32, i32* %n, align 4
  %73 = load i32, i32* %i64, align 4
  %sub82 = sub nsw i32 %72, %73
  %mul83 = mul nsw i32 %mul81, %sub82
  %74 = load i32, i32* %t, align 4
  %75 = load i32, i32* %j68, align 4
  %76 = load i32, i32* %b, align 4
  %mul84 = mul nsw i32 %75, %76
  %add85 = add nsw i32 %74, %mul84
  %mul86 = mul nsw i32 %mul83, %add85
  %add87 = add nsw i32 %add79, %mul86
  %77 = load i32, i32* %Ans, align 4
  %cmp88 = icmp sgt i32 %add87, %77
  br i1 %cmp88, label %if.then89, label %if.end106

if.then89:                                        ; preds = %for.body71
  %78 = load i32, i32* %j68, align 4
  %79 = load i32, i32* %i64, align 4
  %arrayidx90 = getelementptr inbounds [110 x [110 x i32]], [110 x [110 x i32]]* %ans, i32 0, i32 %79
  %arrayidx91 = getelementptr inbounds [110 x i32], [110 x i32]* %arrayidx90, i32 0, i32 %78
  %80 = load i32, i32* %arrayidx91, align 4
  %81 = load i32, i32* %r, align 4
  %82 = load i32, i32* %n, align 4
  %83 = load i32, i32* %i64, align 4
  %sub92 = sub nsw i32 %82, %83
  %mul93 = mul nsw i32 %81, %sub92
  %84 = load i32, i32* %t, align 4
  %85 = load i32, i32* %j68, align 4
  %86 = load i32, i32* %b, align 4
  %mul94 = mul nsw i32 %85, %86
  %add95 = add nsw i32 %84, %mul94
  %mul96 = mul nsw i32 %mul93, %add95
  %add97 = add nsw i32 %80, %mul96
  %87 = load i32, i32* %i64, align 4
  %88 = load i32, i32* %j68, align 4
  %sub98 = sub nsw i32 %87, %88
  %89 = load i32, i32* %g, align 4
  %mul99 = mul nsw i32 %sub98, %89
  %90 = load i32, i32* %n, align 4
  %91 = load i32, i32* %i64, align 4
  %sub100 = sub nsw i32 %90, %91
  %mul101 = mul nsw i32 %mul99, %sub100
  %92 = load i32, i32* %t, align 4
  %93 = load i32, i32* %j68, align 4
  %94 = load i32, i32* %b, align 4
  %mul102 = mul nsw i32 %93, %94
  %add103 = add nsw i32 %92, %mul102
  %mul104 = mul nsw i32 %mul101, %add103
  %add105 = add nsw i32 %add97, %mul104
  store i32 %add105, i32* %Ans, align 4
  br label %if.end106

if.end106:                                        ; preds = %if.then89, %for.body71
  br label %for.inc107

for.inc107:                                       ; preds = %if.end106
  %95 = load i32, i32* %j68, align 4
  %inc108 = add nsw i32 %95, 1
  store i32 %inc108, i32* %j68, align 4
  br label %for.cond69

for.end109:                                       ; preds = %for.cond69
  br label %for.inc110

for.inc110:                                       ; preds = %for.end109
  %96 = load i32, i32* %i64, align 4
  %inc111 = add nsw i32 %96, 1
  store i32 %inc111, i32* %i64, align 4
  br label %for.cond65

for.end112:                                       ; preds = %for.cond65
  %97 = load i32, i32* %Ans, align 4
  %call = call i32 @"\01?print_ant@@YAHH@Z"(i32 %97)
  ret i32 %call
}

; Function Attrs: noinline nounwind
define i32 @"\01?cow_balei@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %ez = alloca [1010 x [4 x i8]], align 1
  %n = alloca i32, align 4
  %s = alloca [5 x i8], align 1
  %dx = alloca [4 x i32], align 4
  %dy = alloca [4 x i32], align 4
  %dir = alloca i32, align 4
  %maxx = alloca i32, align 4
  %minx = alloca i32, align 4
  %maxy = alloca i32, align 4
  %miny = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %num = alloca i32, align 4
  %dirr = alloca i32, align 4
  %dirr56 = alloca i32, align 4
  %ddx = alloca i32, align 4
  %ddy = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [1010 x [4 x i8]]* %ez to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([1010 x [4 x i8]], [1010 x [4 x i8]]* @"\01?ez@?1??cow_balei@@YAHH@Z@3PAY03DA", i32 0, i32 0, i32 0), i32 4040, i1 false)
  %1 = bitcast [5 x i8]* %s to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %1, i8 0, i32 5, i1 false)
  %2 = bitcast [4 x i32]* %dx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([4 x i32]* @"\01?dx@?1??cow_balei@@YAHH@Z@3PAHA" to i8*), i32 16, i1 false)
  %3 = bitcast [4 x i32]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([4 x i32]* @"\01?dy@?1??cow_balei@@YAHH@Z@3PAHA" to i8*), i32 16, i1 false)
  store i32 0, i32* %dir, align 4
  store i32 1, i32* %maxx, align 4
  store i32 0, i32* %minx, align 4
  store i32 1, i32* %maxy, align 4
  store i32 0, i32* %miny, align 4
  %4 = load i32, i32* %mn.addr, align 4
  %rem = srem i32 %4, 100
  %add = add nsw i32 %rem, 500
  store i32 %add, i32* %n, align 4
  store i32 0, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 2), align 4
  store i32 0, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 0), align 4
  store i32 0, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 0), align 4
  store i32 1, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 3), align 4
  store i32 1, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 3), align 4
  store i32 1, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 2), align 4
  store i32 1, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 1), align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc135, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end137

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %7, 1
  %arrayidx = getelementptr inbounds [1010 x [4 x i8]], [1010 x [4 x i8]]* %ez, i32 0, i32 %sub
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 0
  %call = call i8* @strcpy(i8* %arraydecay1, i8* %arraydecay)
  store i32 0, i32* %num, align 4
  %arrayidx2 = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 0
  %8 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 82
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %num, align 4
  %add4 = add nsw i32 %9, 2
  store i32 %add4, i32* %num, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %arrayidx5 = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 1
  %10 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 82
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end
  %11 = load i32, i32* %num, align 4
  %add9 = add nsw i32 %11, 1
  store i32 %add9, i32* %num, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.end
  %arrayidx11 = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 2
  %12 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv12, 70
  br i1 %cmp13, label %if.then14, label %if.end23

if.then14:                                        ; preds = %if.end10
  %13 = load i32, i32* %num, align 4
  %arrayidx15 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %13
  %14 = load i32, i32* %arrayidx15, align 4
  %15 = load i32, i32* %dir, align 4
  %arrayidx16 = getelementptr inbounds [4 x i32], [4 x i32]* %dx, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx16, align 4
  %add17 = add nsw i32 %14, %16
  %17 = load i32, i32* %num, align 4
  %arrayidx18 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %17
  store i32 %add17, i32* %arrayidx18, align 4
  %18 = load i32, i32* %num, align 4
  %arrayidx19 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %18
  %19 = load i32, i32* %arrayidx19, align 4
  %20 = load i32, i32* %dir, align 4
  %arrayidx20 = getelementptr inbounds [4 x i32], [4 x i32]* %dy, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx20, align 4
  %add21 = add nsw i32 %19, %21
  %22 = load i32, i32* %num, align 4
  %arrayidx22 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %22
  store i32 %add21, i32* %arrayidx22, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then14, %if.end10
  %arrayidx24 = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 2
  %23 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %23 to i32
  %cmp26 = icmp eq i32 %conv25, 66
  br i1 %cmp26, label %if.then27, label %if.end36

if.then27:                                        ; preds = %if.end23
  %24 = load i32, i32* %num, align 4
  %arrayidx28 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %24
  %25 = load i32, i32* %arrayidx28, align 4
  %26 = load i32, i32* %dir, align 4
  %arrayidx29 = getelementptr inbounds [4 x i32], [4 x i32]* %dx, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx29, align 4
  %sub30 = sub nsw i32 %25, %27
  %28 = load i32, i32* %num, align 4
  %arrayidx31 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %28
  store i32 %sub30, i32* %arrayidx31, align 4
  %29 = load i32, i32* %num, align 4
  %arrayidx32 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %29
  %30 = load i32, i32* %arrayidx32, align 4
  %31 = load i32, i32* %dir, align 4
  %arrayidx33 = getelementptr inbounds [4 x i32], [4 x i32]* %dy, i32 0, i32 %31
  %32 = load i32, i32* %arrayidx33, align 4
  %sub34 = sub nsw i32 %30, %32
  %33 = load i32, i32* %num, align 4
  %arrayidx35 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %33
  store i32 %sub34, i32* %arrayidx35, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then27, %if.end23
  %arrayidx37 = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 2
  %34 = load i8, i8* %arrayidx37, align 1
  %conv38 = sext i8 %34 to i32
  %cmp39 = icmp eq i32 %conv38, 82
  br i1 %cmp39, label %if.then40, label %if.end51

if.then40:                                        ; preds = %if.end36
  %35 = load i32, i32* %dir, align 4
  %add41 = add nsw i32 %35, 1
  %rem42 = srem i32 %add41, 4
  store i32 %rem42, i32* %dirr, align 4
  %36 = load i32, i32* %num, align 4
  %arrayidx43 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %36
  %37 = load i32, i32* %arrayidx43, align 4
  %38 = load i32, i32* %dirr, align 4
  %arrayidx44 = getelementptr inbounds [4 x i32], [4 x i32]* %dx, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx44, align 4
  %sub45 = sub nsw i32 %37, %39
  %40 = load i32, i32* %num, align 4
  %arrayidx46 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %40
  store i32 %sub45, i32* %arrayidx46, align 4
  %41 = load i32, i32* %num, align 4
  %arrayidx47 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %41
  %42 = load i32, i32* %arrayidx47, align 4
  %43 = load i32, i32* %dirr, align 4
  %arrayidx48 = getelementptr inbounds [4 x i32], [4 x i32]* %dy, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx48, align 4
  %add49 = add nsw i32 %42, %44
  %45 = load i32, i32* %num, align 4
  %arrayidx50 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %45
  store i32 %add49, i32* %arrayidx50, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then40, %if.end36
  %arrayidx52 = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 2
  %46 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %46 to i32
  %cmp54 = icmp eq i32 %conv53, 76
  br i1 %cmp54, label %if.then55, label %if.end67

if.then55:                                        ; preds = %if.end51
  %47 = load i32, i32* %dir, align 4
  %add57 = add nsw i32 %47, 1
  %rem58 = srem i32 %add57, 4
  store i32 %rem58, i32* %dirr56, align 4
  %48 = load i32, i32* %num, align 4
  %arrayidx59 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %48
  %49 = load i32, i32* %arrayidx59, align 4
  %50 = load i32, i32* %dirr56, align 4
  %arrayidx60 = getelementptr inbounds [4 x i32], [4 x i32]* %dx, i32 0, i32 %50
  %51 = load i32, i32* %arrayidx60, align 4
  %sub61 = sub nsw i32 %49, %51
  %52 = load i32, i32* %num, align 4
  %arrayidx62 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %52
  store i32 %sub61, i32* %arrayidx62, align 4
  %53 = load i32, i32* %num, align 4
  %arrayidx63 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %53
  %54 = load i32, i32* %arrayidx63, align 4
  %55 = load i32, i32* %dirr56, align 4
  %arrayidx64 = getelementptr inbounds [4 x i32], [4 x i32]* %dy, i32 0, i32 %55
  %56 = load i32, i32* %arrayidx64, align 4
  %sub65 = sub nsw i32 %54, %56
  %57 = load i32, i32* %num, align 4
  %arrayidx66 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %57
  store i32 %sub65, i32* %arrayidx66, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then55, %if.end51
  %arrayidx68 = getelementptr inbounds [5 x i8], [5 x i8]* %s, i32 0, i32 2
  %58 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %58 to i32
  %cmp70 = icmp eq i32 %conv69, 80
  br i1 %cmp70, label %if.then71, label %if.end92

if.then71:                                        ; preds = %if.end67
  store i32 0, i32* %j, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc, %if.then71
  %59 = load i32, i32* %j, align 4
  %cmp73 = icmp slt i32 %59, 4
  br i1 %cmp73, label %for.body74, label %for.end

for.body74:                                       ; preds = %for.cond72
  %60 = load i32, i32* %j, align 4
  %61 = load i32, i32* %num, align 4
  %cmp75 = icmp ne i32 %60, %61
  br i1 %cmp75, label %if.then76, label %if.end89

if.then76:                                        ; preds = %for.body74
  %62 = load i32, i32* %j, align 4
  %arrayidx77 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %62
  %63 = load i32, i32* %arrayidx77, align 4
  %64 = load i32, i32* %num, align 4
  %arrayidx78 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %64
  %65 = load i32, i32* %arrayidx78, align 4
  %sub79 = sub nsw i32 %63, %65
  store i32 %sub79, i32* %ddx, align 4
  %66 = load i32, i32* %j, align 4
  %arrayidx80 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %66
  %67 = load i32, i32* %arrayidx80, align 4
  %68 = load i32, i32* %num, align 4
  %arrayidx81 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %68
  %69 = load i32, i32* %arrayidx81, align 4
  %sub82 = sub nsw i32 %67, %69
  store i32 %sub82, i32* %ddy, align 4
  %70 = load i32, i32* %num, align 4
  %arrayidx83 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %70
  %71 = load i32, i32* %arrayidx83, align 4
  %72 = load i32, i32* %ddy, align 4
  %add84 = add nsw i32 %71, %72
  %73 = load i32, i32* %j, align 4
  %arrayidx85 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %73
  store i32 %add84, i32* %arrayidx85, align 4
  %74 = load i32, i32* %num, align 4
  %arrayidx86 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %74
  %75 = load i32, i32* %arrayidx86, align 4
  %76 = load i32, i32* %ddx, align 4
  %sub87 = sub nsw i32 %75, %76
  %77 = load i32, i32* %j, align 4
  %arrayidx88 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %77
  store i32 %sub87, i32* %arrayidx88, align 4
  br label %if.end89

if.end89:                                         ; preds = %if.then76, %for.body74
  br label %for.inc

for.inc:                                          ; preds = %if.end89
  %78 = load i32, i32* %j, align 4
  %inc = add nsw i32 %78, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond72

for.end:                                          ; preds = %for.cond72
  %79 = load i32, i32* %dir, align 4
  %add90 = add nsw i32 %79, 1
  %rem91 = srem i32 %add90, 4
  store i32 %rem91, i32* %dir, align 4
  br label %if.end92

if.end92:                                         ; preds = %for.end, %if.end67
  store i32 0, i32* %j, align 4
  br label %for.cond93

for.cond93:                                       ; preds = %for.inc116, %if.end92
  %80 = load i32, i32* %j, align 4
  %cmp94 = icmp slt i32 %80, 4
  br i1 %cmp94, label %for.body95, label %for.end118

for.body95:                                       ; preds = %for.cond93
  %81 = load i32, i32* %maxx, align 4
  %82 = load i32, i32* %j, align 4
  %arrayidx96 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %82
  %83 = load i32, i32* %arrayidx96, align 4
  %cmp97 = icmp slt i32 %81, %83
  br i1 %cmp97, label %if.then98, label %if.end100

if.then98:                                        ; preds = %for.body95
  %84 = load i32, i32* %j, align 4
  %arrayidx99 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %84
  %85 = load i32, i32* %arrayidx99, align 4
  store i32 %85, i32* %maxx, align 4
  br label %if.end100

if.end100:                                        ; preds = %if.then98, %for.body95
  %86 = load i32, i32* %minx, align 4
  %87 = load i32, i32* %j, align 4
  %arrayidx101 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %87
  %88 = load i32, i32* %arrayidx101, align 4
  %cmp102 = icmp slt i32 %86, %88
  br i1 %cmp102, label %if.then103, label %if.end105

if.then103:                                       ; preds = %if.end100
  %89 = load i32, i32* %j, align 4
  %arrayidx104 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %89
  %90 = load i32, i32* %arrayidx104, align 4
  store i32 %90, i32* %minx, align 4
  br label %if.end105

if.end105:                                        ; preds = %if.then103, %if.end100
  %91 = load i32, i32* %maxx, align 4
  %92 = load i32, i32* %j, align 4
  %arrayidx106 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %92
  %93 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp slt i32 %91, %93
  br i1 %cmp107, label %if.then108, label %if.end110

if.then108:                                       ; preds = %if.end105
  %94 = load i32, i32* %j, align 4
  %arrayidx109 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %94
  %95 = load i32, i32* %arrayidx109, align 4
  store i32 %95, i32* %maxx, align 4
  br label %if.end110

if.end110:                                        ; preds = %if.then108, %if.end105
  %96 = load i32, i32* %minx, align 4
  %97 = load i32, i32* %j, align 4
  %arrayidx111 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %97
  %98 = load i32, i32* %arrayidx111, align 4
  %cmp112 = icmp slt i32 %96, %98
  br i1 %cmp112, label %if.then113, label %if.end115

if.then113:                                       ; preds = %if.end110
  %99 = load i32, i32* %j, align 4
  %arrayidx114 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %99
  %100 = load i32, i32* %arrayidx114, align 4
  store i32 %100, i32* %minx, align 4
  br label %if.end115

if.end115:                                        ; preds = %if.then113, %if.end110
  br label %for.inc116

for.inc116:                                       ; preds = %if.end115
  %101 = load i32, i32* %j, align 4
  %inc117 = add nsw i32 %101, 1
  store i32 %inc117, i32* %j, align 4
  br label %for.cond93

for.end118:                                       ; preds = %for.cond93
  store i32 0, i32* %j, align 4
  br label %for.cond119

for.cond119:                                      ; preds = %for.inc132, %for.end118
  %102 = load i32, i32* %j, align 4
  %cmp120 = icmp slt i32 %102, 4
  br i1 %cmp120, label %for.body121, label %for.end134

for.body121:                                      ; preds = %for.cond119
  %103 = load i32, i32* %j, align 4
  %104 = load i32, i32* %num, align 4
  %cmp122 = icmp ne i32 %103, %104
  br i1 %cmp122, label %land.lhs.true, label %if.end131

land.lhs.true:                                    ; preds = %for.body121
  %105 = load i32, i32* %num, align 4
  %arrayidx123 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %105
  %106 = load i32, i32* %arrayidx123, align 4
  %107 = load i32, i32* %j, align 4
  %arrayidx124 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?x@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %107
  %108 = load i32, i32* %arrayidx124, align 4
  %cmp125 = icmp eq i32 %106, %108
  br i1 %cmp125, label %land.lhs.true126, label %if.end131

land.lhs.true126:                                 ; preds = %land.lhs.true
  %109 = load i32, i32* %num, align 4
  %arrayidx127 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %109
  %110 = load i32, i32* %arrayidx127, align 4
  %111 = load i32, i32* %j, align 4
  %arrayidx128 = getelementptr inbounds [4 x i32], [4 x i32]* @"\01?y@?1??cow_balei@@YAHH@Z@4PAHA", i32 0, i32 %111
  %112 = load i32, i32* %arrayidx128, align 4
  %cmp129 = icmp eq i32 %110, %112
  br i1 %cmp129, label %if.then130, label %if.end131

if.then130:                                       ; preds = %land.lhs.true126
  br label %for.end134

if.end131:                                        ; preds = %land.lhs.true126, %land.lhs.true, %for.body121
  br label %for.inc132

for.inc132:                                       ; preds = %if.end131
  %113 = load i32, i32* %j, align 4
  %inc133 = add nsw i32 %113, 1
  store i32 %inc133, i32* %j, align 4
  br label %for.cond119

for.end134:                                       ; preds = %if.then130, %for.cond119
  br label %for.inc135

for.inc135:                                       ; preds = %for.end134
  %114 = load i32, i32* %i, align 4
  %inc136 = add nsw i32 %114, 1
  store i32 %inc136, i32* %i, align 4
  br label %for.cond

for.end137:                                       ; preds = %for.cond
  %115 = load i32, i32* %maxx, align 4
  %116 = load i32, i32* %minx, align 4
  %sub138 = sub nsw i32 %115, %116
  %add139 = add nsw i32 %sub138, 1
  %117 = load i32, i32* %maxy, align 4
  %118 = load i32, i32* %miny, align 4
  %sub140 = sub nsw i32 %117, %118
  %add141 = add nsw i32 %sub140, 1
  %mul = mul nsw i32 %add139, %add141
  store i32 %mul, i32* %temp, align 4
  %119 = load i32, i32* %temp, align 4
  ret i32 %119
}

declare i8* @strcpy(i8*, i8*) #1

; Function Attrs: noinline nounwind
define i32 @"\01?tong_fan@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %e1 = alloca [1009 x i32], align 4
  %e2 = alloca [1009 x i32], align 4
  %num = alloca i32, align 4
  %q = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %sum = alloca i32, align 4
  %sum1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [1009 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([1009 x i32]* @"\01?e1@?1??tong_fan@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  %1 = bitcast [1009 x i32]* %e2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([1009 x i32]* @"\01?e2@?1??tong_fan@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  %2 = load i32, i32* %mn.addr, align 4
  store i32 %2, i32* %num, align 4
  store i32 0, i32* %q, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %3 = load i32, i32* %q, align 4
  %cmp = icmp slt i32 %3, 10
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %sum1, align 4
  %4 = load i32, i32* %q, align 4
  %arrayidx = getelementptr inbounds [1009 x i32], [1009 x i32]* %e1, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %rem = srem i32 %5, 10
  store i32 %rem, i32* %n, align 4
  %6 = load i32, i32* %q, align 4
  %arrayidx1 = getelementptr inbounds [1009 x i32], [1009 x i32]* %e2, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx1, align 4
  %rem2 = srem i32 %7, 10
  store i32 %rem2, i32* %m, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.body
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %n, align 4
  %cmp4 = icmp sle i32 %8, %9
  br i1 %cmp4, label %for.body5, label %for.end14

for.body5:                                        ; preds = %for.cond3
  store i32 1, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body5
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %m, align 4
  %cmp7 = icmp sle i32 %10, %11
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %12, %13
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %for.body8
  %14 = load i32, i32* %i, align 4
  store i32 %14, i32* %temp, align 4
  br label %if.end

if.else:                                          ; preds = %for.body8
  %15 = load i32, i32* %j, align 4
  store i32 %15, i32* %temp, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load i32, i32* %sum, align 4
  %17 = load i32, i32* %temp, align 4
  %add = add nsw i32 %16, %17
  store i32 %add, i32* %sum, align 4
  %18 = load i32, i32* %sum1, align 4
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %mul = mul nsw i32 %19, %20
  %add10 = add nsw i32 %18, %mul
  store i32 %add10, i32* %sum1, align 4
  %21 = load i32, i32* %sum1, align 4
  %22 = load i32, i32* %num, align 4
  %add11 = add nsw i32 %21, %22
  store i32 %add11, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %23 = load i32, i32* %j, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %24, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %25 = load i32, i32* %q, align 4
  %inc16 = add nsw i32 %25, 1
  store i32 %inc16, i32* %q, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %26 = load i32, i32* %num, align 4
  %rem18 = srem i32 %26, 10
  %add19 = add nsw i32 %rem18, 100
  store i32 %add19, i32* %num, align 4
  %27 = load i32, i32* %num, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind
define i32 @"\01?MergeSort_meng@@YAHHHPAH0@Z"(i32 %l, i32 %r, i32* %fir, i32* %t) #0 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca i32*, align 4
  %fir.addr = alloca i32*, align 4
  %r.addr = alloca i32, align 4
  %l.addr = alloca i32, align 4
  %mid = alloca i32, align 4
  %p = alloca i32, align 4
  %lp = alloca i32, align 4
  %rp = alloca i32, align 4
  %ans = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %t, i32** %t.addr, align 4
  store i32* %fir, i32** %fir.addr, align 4
  store i32 %r, i32* %r.addr, align 4
  store i32 %l, i32* %l.addr, align 4
  %0 = load i32, i32* %l.addr, align 4
  %1 = load i32, i32* %r.addr, align 4
  %add = add nsw i32 %0, %1
  %div = sdiv i32 %add, 2
  store i32 %div, i32* %mid, align 4
  %2 = load i32, i32* %l.addr, align 4
  store i32 %2, i32* %p, align 4
  %3 = load i32, i32* %l.addr, align 4
  store i32 %3, i32* %lp, align 4
  %4 = load i32, i32* %mid, align 4
  %add1 = add nsw i32 %4, 1
  store i32 %add1, i32* %rp, align 4
  store i32 0, i32* %ans, align 4
  %5 = load i32, i32* %l.addr, align 4
  %6 = load i32, i32* %r.addr, align 4
  %cmp = icmp eq i32 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i32*, i32** %t.addr, align 4
  %8 = load i32*, i32** %fir.addr, align 4
  %9 = load i32, i32* %mid, align 4
  %10 = load i32, i32* %l.addr, align 4
  %call = call i32 @"\01?MergeSort_meng@@YAHHHPAH0@Z"(i32 %10, i32 %9, i32* %8, i32* %7)
  store i32 %call, i32* %temp1, align 4
  %11 = load i32*, i32** %t.addr, align 4
  %12 = load i32*, i32** %fir.addr, align 4
  %13 = load i32, i32* %r.addr, align 4
  %14 = load i32, i32* %mid, align 4
  %add2 = add nsw i32 %14, 1
  %call3 = call i32 @"\01?MergeSort_meng@@YAHHHPAH0@Z"(i32 %add2, i32 %13, i32* %12, i32* %11)
  store i32 %call3, i32* %temp2, align 4
  %15 = load i32, i32* %temp1, align 4
  %16 = load i32, i32* %temp2, align 4
  %add4 = add nsw i32 %15, %16
  store i32 %add4, i32* %ans, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end17, %if.end
  %17 = load i32, i32* %lp, align 4
  %18 = load i32, i32* %mid, align 4
  %cmp5 = icmp sle i32 %17, %18
  br i1 %cmp5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %19 = load i32, i32* %rp, align 4
  %20 = load i32, i32* %r.addr, align 4
  %cmp6 = icmp sle i32 %19, %20
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %21 = phi i1 [ false, %while.cond ], [ %cmp6, %land.rhs ]
  br i1 %21, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %22 = load i32, i32* %lp, align 4
  %23 = load i32*, i32** %fir.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %23, i32 %22
  %24 = load i32, i32* %arrayidx, align 4
  %25 = load i32, i32* %rp, align 4
  %26 = load i32*, i32** %fir.addr, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %26, i32 %25
  %27 = load i32, i32* %arrayidx7, align 4
  %cmp8 = icmp sgt i32 %24, %27
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %while.body
  %28 = load i32, i32* %ans, align 4
  %29 = load i32, i32* %mid, align 4
  %add10 = add nsw i32 %28, %29
  %30 = load i32, i32* %lp, align 4
  %sub = sub nsw i32 %add10, %30
  %add11 = add nsw i32 %sub, 1
  store i32 %add11, i32* %ans, align 4
  %31 = load i32, i32* %rp, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %rp, align 4
  %32 = load i32*, i32** %fir.addr, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %32, i32 %31
  %33 = load i32, i32* %arrayidx12, align 4
  %34 = load i32, i32* %p, align 4
  %35 = load i32*, i32** %t.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %35, i32 %34
  store i32 %33, i32* %arrayidx13, align 4
  br label %if.end17

if.else:                                          ; preds = %while.body
  %36 = load i32, i32* %lp, align 4
  %inc14 = add nsw i32 %36, 1
  store i32 %inc14, i32* %lp, align 4
  %37 = load i32*, i32** %fir.addr, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %37, i32 %36
  %38 = load i32, i32* %arrayidx15, align 4
  %39 = load i32, i32* %p, align 4
  %40 = load i32*, i32** %t.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %40, i32 %39
  store i32 %38, i32* %arrayidx16, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then9
  %41 = load i32, i32* %p, align 4
  %inc18 = add nsw i32 %41, 1
  store i32 %inc18, i32* %p, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond19

while.cond19:                                     ; preds = %while.body21, %while.end
  %42 = load i32, i32* %lp, align 4
  %43 = load i32, i32* %mid, align 4
  %cmp20 = icmp sle i32 %42, %43
  br i1 %cmp20, label %while.body21, label %while.end26

while.body21:                                     ; preds = %while.cond19
  %44 = load i32, i32* %lp, align 4
  %inc22 = add nsw i32 %44, 1
  store i32 %inc22, i32* %lp, align 4
  %45 = load i32*, i32** %fir.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %45, i32 %44
  %46 = load i32, i32* %arrayidx23, align 4
  %47 = load i32, i32* %p, align 4
  %inc24 = add nsw i32 %47, 1
  store i32 %inc24, i32* %p, align 4
  %48 = load i32*, i32** %t.addr, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %48, i32 %47
  store i32 %46, i32* %arrayidx25, align 4
  br label %while.cond19

while.end26:                                      ; preds = %while.cond19
  br label %while.cond27

while.cond27:                                     ; preds = %while.body29, %while.end26
  %49 = load i32, i32* %rp, align 4
  %50 = load i32, i32* %r.addr, align 4
  %cmp28 = icmp sle i32 %49, %50
  br i1 %cmp28, label %while.body29, label %while.end34

while.body29:                                     ; preds = %while.cond27
  %51 = load i32, i32* %rp, align 4
  %inc30 = add nsw i32 %51, 1
  store i32 %inc30, i32* %rp, align 4
  %52 = load i32*, i32** %fir.addr, align 4
  %arrayidx31 = getelementptr inbounds i32, i32* %52, i32 %51
  %53 = load i32, i32* %arrayidx31, align 4
  %54 = load i32, i32* %p, align 4
  %inc32 = add nsw i32 %54, 1
  store i32 %inc32, i32* %p, align 4
  %55 = load i32*, i32** %t.addr, align 4
  %arrayidx33 = getelementptr inbounds i32, i32* %55, i32 %54
  store i32 %53, i32* %arrayidx33, align 4
  br label %while.cond27

while.end34:                                      ; preds = %while.cond27
  %56 = load i32, i32* %l.addr, align 4
  store i32 %56, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end34
  %57 = load i32, i32* %i, align 4
  %58 = load i32, i32* %r.addr, align 4
  %cmp35 = icmp sle i32 %57, %58
  br i1 %cmp35, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %59 = load i32, i32* %i, align 4
  %60 = load i32*, i32** %t.addr, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %60, i32 %59
  %61 = load i32, i32* %arrayidx36, align 4
  %62 = load i32, i32* %i, align 4
  %63 = load i32*, i32** %fir.addr, align 4
  %arrayidx37 = getelementptr inbounds i32, i32* %63, i32 %62
  store i32 %61, i32* %arrayidx37, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %64 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %64, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %65 = load i32, i32* %ans, align 4
  store i32 %65, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %66 = load i32, i32* %retval, align 4
  ret i32 %66
}

; Function Attrs: noinline nounwind
define i32 @"\01?mai_meng@@YAHXZ"() #0 {
entry:
  %num = alloca [10010 x i32], align 4
  %fir = alloca [10010 x i32], align 4
  %t = alloca [10010 x i32], align 4
  %e1 = alloca [1009 x i32], align 4
  %n = alloca i32, align 4
  %ans = alloca i32, align 4
  %i = alloca i32, align 4
  %i4 = alloca i32, align 4
  %i14 = alloca i32, align 4
  %ans1 = alloca i32, align 4
  %0 = bitcast [10010 x i32]* %num to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 40040, i1 false)
  %1 = bitcast [10010 x i32]* %fir to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 40040, i1 false)
  %2 = bitcast [10010 x i32]* %t to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 40040, i1 false)
  %3 = bitcast [1009 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([1009 x i32]* @"\01?e1@?1??mai_meng@@YAHXZ@3PAHA" to i8*), i32 4036, i1 false)
  store i32 0, i32* %ans, align 4
  store i32 100, i32* %n, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [1009 x i32], [1009 x i32]* %e1, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10010 x i32], [10010 x i32]* %num, i32 0, i32 %8
  store i32 %7, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx2 = getelementptr inbounds [10010 x i32], [10010 x i32]* %num, i32 0, i32 0
  %10 = load i32, i32* %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds [10010 x i32], [10010 x i32]* %fir, i32 0, i32 0
  store i32 %10, i32* %arrayidx3, align 4
  store i32 1, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc11, %for.end
  %11 = load i32, i32* %i4, align 4
  %12 = load i32, i32* %n, align 4
  %cmp6 = icmp slt i32 %11, %12
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond5
  %13 = load i32, i32* %i4, align 4
  %sub = sub nsw i32 %13, 1
  %arrayidx8 = getelementptr inbounds [10010 x i32], [10010 x i32]* %fir, i32 0, i32 %sub
  %14 = load i32, i32* %arrayidx8, align 4
  %15 = load i32, i32* %i4, align 4
  %arrayidx9 = getelementptr inbounds [10010 x i32], [10010 x i32]* %num, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %add = add nsw i32 %14, %16
  %17 = load i32, i32* %i4, align 4
  %arrayidx10 = getelementptr inbounds [10010 x i32], [10010 x i32]* %fir, i32 0, i32 %17
  store i32 %add, i32* %arrayidx10, align 4
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %18 = load i32, i32* %i4, align 4
  %inc12 = add nsw i32 %18, 1
  store i32 %inc12, i32* %i4, align 4
  br label %for.cond5

for.end13:                                        ; preds = %for.cond5
  store i32 0, i32* %i14, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc24, %for.end13
  %19 = load i32, i32* %i14, align 4
  %20 = load i32, i32* %n, align 4
  %cmp16 = icmp slt i32 %19, %20
  br i1 %cmp16, label %for.body17, label %for.end26

for.body17:                                       ; preds = %for.cond15
  %21 = load i32, i32* %i14, align 4
  %arrayidx18 = getelementptr inbounds [10010 x i32], [10010 x i32]* %fir, i32 0, i32 %21
  %22 = load i32, i32* %arrayidx18, align 4
  %sub19 = sub nsw i32 0, %22
  %23 = load i32, i32* %i14, align 4
  %arrayidx20 = getelementptr inbounds [10010 x i32], [10010 x i32]* %fir, i32 0, i32 %23
  store i32 %sub19, i32* %arrayidx20, align 4
  %24 = load i32, i32* %i14, align 4
  %arrayidx21 = getelementptr inbounds [10010 x i32], [10010 x i32]* %fir, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp slt i32 %25, 0
  br i1 %cmp22, label %if.then, label %if.end

if.then:                                          ; preds = %for.body17
  %26 = load i32, i32* %ans, align 4
  %inc23 = add nsw i32 %26, 1
  store i32 %inc23, i32* %ans, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body17
  br label %for.inc24

for.inc24:                                        ; preds = %if.end
  %27 = load i32, i32* %i14, align 4
  %inc25 = add nsw i32 %27, 1
  store i32 %inc25, i32* %i14, align 4
  br label %for.cond15

for.end26:                                        ; preds = %for.cond15
  %arraydecay = getelementptr inbounds [10010 x i32], [10010 x i32]* %t, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [10010 x i32], [10010 x i32]* %fir, i32 0, i32 0
  %28 = load i32, i32* %n, align 4
  %sub28 = sub nsw i32 %28, 1
  %call = call i32 @"\01?MergeSort_meng@@YAHHHPAH0@Z"(i32 0, i32 %sub28, i32* %arraydecay27, i32* %arraydecay)
  store i32 %call, i32* %ans1, align 4
  %29 = load i32, i32* %ans1, align 4
  %30 = load i32, i32* %ans, align 4
  %add29 = add nsw i32 %29, %30
  store i32 %add29, i32* %ans, align 4
  %31 = load i32, i32* %ans, align 4
  %rem = srem i32 %31, 100
  ret i32 %rem
}

; Function Attrs: noinline nounwind
define i32 @"\01?Blink@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %e1 = alloca [1009 x i32], align 4
  %ez1 = alloca [1010 x i8], align 1
  %n = alloca i32, align 4
  %k = alloca i32, align 4
  %cnt = alloca i32, align 4
  %ans = alloca i32, align 4
  %las = alloca i32, align 4
  %pos = alloca i32, align 4
  %ch = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i29 = alloca i32, align 4
  %temp = alloca i32, align 4
  %col = alloca i32, align 4
  %ss = alloca i32, align 4
  %i69 = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [1009 x i32]* %e1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([1009 x i32]* @"\01?e1@?1??Blink@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  %1 = bitcast [1010 x i8]* %ez1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([1010 x i8], [1010 x i8]* @"\01?ez1@?1??Blink@@YAHH@Z@3PADA", i32 0, i32 0), i32 1010, i1 false)
  store i32 0, i32* %cnt, align 4
  store i32 0, i32* %ans, align 4
  store i32 1000, i32* %n, align 4
  store i32 2, i32* %k, align 4
  store i32 0, i32* %las, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  %arrayidx = getelementptr inbounds [1009 x i32], [1009 x i32]* %e1, i32 0, i32 %sub
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %pos, align 4
  %6 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %6, 1
  %arrayidx2 = getelementptr inbounds [1010 x i8], [1010 x i8]* %ez1, i32 0, i32 %sub1
  %7 = load i8, i8* %arrayidx2, align 1
  store i8 %7, i8* %ch, align 1
  %8 = load i8, i8* %ch, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 82
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %las, align 4
  %10 = load i32, i32* %cnt, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %cnt, align 4
  %arrayidx4 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %inc
  %id = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx4, i32 0, i32 0
  store i32 %9, i32* %id, align 4
  %11 = load i32, i32* %cnt, align 4
  %arrayidx5 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %11
  %flag = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx5, i32 0, i32 1
  store i32 1, i32* %flag, align 4
  %12 = load i32, i32* %las, align 4
  %13 = load i32, i32* %pos, align 4
  %add = add nsw i32 %12, %13
  %14 = load i32, i32* %cnt, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %cnt, align 4
  %arrayidx7 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %inc6
  %id8 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx7, i32 0, i32 0
  store i32 %add, i32* %id8, align 4
  %15 = load i32, i32* %cnt, align 4
  %arrayidx9 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %15
  %flag10 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx9, i32 0, i32 1
  store i32 -1, i32* %flag10, align 4
  %16 = load i32, i32* %las, align 4
  %17 = load i32, i32* %pos, align 4
  %add11 = add nsw i32 %16, %17
  store i32 %add11, i32* %las, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %18 = load i32, i32* %las, align 4
  %19 = load i32, i32* %pos, align 4
  %sub12 = sub nsw i32 %18, %19
  %20 = load i32, i32* %cnt, align 4
  %inc13 = add nsw i32 %20, 1
  store i32 %inc13, i32* %cnt, align 4
  %arrayidx14 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %inc13
  %id15 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx14, i32 0, i32 0
  store i32 %sub12, i32* %id15, align 4
  %21 = load i32, i32* %cnt, align 4
  %arrayidx16 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %21
  %flag17 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx16, i32 0, i32 1
  store i32 1, i32* %flag17, align 4
  %22 = load i32, i32* %las, align 4
  %23 = load i32, i32* %cnt, align 4
  %inc18 = add nsw i32 %23, 1
  store i32 %inc18, i32* %cnt, align 4
  %arrayidx19 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %inc18
  %id20 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx19, i32 0, i32 0
  store i32 %22, i32* %id20, align 4
  %24 = load i32, i32* %cnt, align 4
  %arrayidx21 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %24
  %flag22 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx21, i32 0, i32 1
  store i32 -1, i32* %flag22, align 4
  %25 = load i32, i32* %las, align 4
  %26 = load i32, i32* %pos, align 4
  %sub23 = sub nsw i32 %25, %26
  store i32 %sub23, i32* %las, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %27, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc66, %for.end
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %cnt, align 4
  %add26 = add nsw i32 %29, 1
  %cmp27 = icmp slt i32 %28, %add26
  br i1 %cmp27, label %for.body28, label %for.end68

for.body28:                                       ; preds = %for.cond25
  store i32 1, i32* %i29, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc63, %for.body28
  %30 = load i32, i32* %i29, align 4
  %31 = load i32, i32* %cnt, align 4
  %add31 = add nsw i32 %31, 1
  %32 = load i32, i32* %j, align 4
  %sub32 = sub nsw i32 %add31, %32
  %cmp33 = icmp slt i32 %30, %sub32
  br i1 %cmp33, label %for.body34, label %for.end65

for.body34:                                       ; preds = %for.cond30
  %33 = load i32, i32* %i29, align 4
  %arrayidx35 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %33
  %id36 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx35, i32 0, i32 0
  %34 = load i32, i32* %id36, align 4
  %35 = load i32, i32* %i29, align 4
  %add37 = add nsw i32 %35, 1
  %arrayidx38 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %add37
  %id39 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx38, i32 0, i32 0
  %36 = load i32, i32* %id39, align 4
  %cmp40 = icmp sgt i32 %34, %36
  br i1 %cmp40, label %if.then41, label %if.end62

if.then41:                                        ; preds = %for.body34
  %37 = load i32, i32* %i29, align 4
  %arrayidx42 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %37
  %id43 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx42, i32 0, i32 0
  %38 = load i32, i32* %id43, align 4
  store i32 %38, i32* %temp, align 4
  %39 = load i32, i32* %i29, align 4
  %add44 = add nsw i32 %39, 1
  %arrayidx45 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %add44
  %id46 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx45, i32 0, i32 0
  %40 = load i32, i32* %id46, align 4
  %41 = load i32, i32* %i29, align 4
  %arrayidx47 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %41
  %id48 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx47, i32 0, i32 0
  store i32 %40, i32* %id48, align 4
  %42 = load i32, i32* %temp, align 4
  %43 = load i32, i32* %i29, align 4
  %add49 = add nsw i32 %43, 1
  %arrayidx50 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %add49
  %id51 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx50, i32 0, i32 0
  store i32 %42, i32* %id51, align 4
  %44 = load i32, i32* %i29, align 4
  %arrayidx52 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %44
  %flag53 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx52, i32 0, i32 1
  %45 = load i32, i32* %flag53, align 4
  store i32 %45, i32* %temp, align 4
  %46 = load i32, i32* %i29, align 4
  %add54 = add nsw i32 %46, 1
  %arrayidx55 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %add54
  %flag56 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx55, i32 0, i32 1
  %47 = load i32, i32* %flag56, align 4
  %48 = load i32, i32* %i29, align 4
  %arrayidx57 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %48
  %flag58 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx57, i32 0, i32 1
  store i32 %47, i32* %flag58, align 4
  %49 = load i32, i32* %temp, align 4
  %50 = load i32, i32* %i29, align 4
  %add59 = add nsw i32 %50, 1
  %arrayidx60 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %add59
  %flag61 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx60, i32 0, i32 1
  store i32 %49, i32* %flag61, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then41, %for.body34
  br label %for.inc63

for.inc63:                                        ; preds = %if.end62
  %51 = load i32, i32* %i29, align 4
  %inc64 = add nsw i32 %51, 1
  store i32 %inc64, i32* %i29, align 4
  br label %for.cond30

for.end65:                                        ; preds = %for.cond30
  br label %for.inc66

for.inc66:                                        ; preds = %for.end65
  %52 = load i32, i32* %j, align 4
  %inc67 = add nsw i32 %52, 1
  store i32 %inc67, i32* %j, align 4
  br label %for.cond25

for.end68:                                        ; preds = %for.cond25
  %53 = load i32, i32* %mn.addr, align 4
  %rem = srem i32 %53, 10
  store i32 %rem, i32* %col, align 4
  store i32 1, i32* %i69, align 4
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc93, %for.end68
  %54 = load i32, i32* %i69, align 4
  %55 = load i32, i32* %cnt, align 4
  %cmp71 = icmp sle i32 %54, %55
  br i1 %cmp71, label %for.body72, label %for.end95

for.body72:                                       ; preds = %for.cond70
  %56 = load i32, i32* %i69, align 4
  %arrayidx73 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %56
  %flag74 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx73, i32 0, i32 1
  %57 = load i32, i32* %flag74, align 4
  %cmp75 = icmp eq i32 %57, 1
  br i1 %cmp75, label %if.then76, label %if.else83

if.then76:                                        ; preds = %for.body72
  %58 = load i32, i32* %col, align 4
  %inc77 = add nsw i32 %58, 1
  store i32 %inc77, i32* %col, align 4
  %59 = load i32, i32* %col, align 4
  %60 = load i32, i32* %k, align 4
  %cmp78 = icmp eq i32 %59, %60
  br i1 %cmp78, label %if.then79, label %if.end82

if.then79:                                        ; preds = %if.then76
  %61 = load i32, i32* %i69, align 4
  %arrayidx80 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %61
  %id81 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx80, i32 0, i32 0
  %62 = load i32, i32* %id81, align 4
  store i32 %62, i32* %ss, align 4
  br label %if.end82

if.end82:                                         ; preds = %if.then79, %if.then76
  br label %if.end92

if.else83:                                        ; preds = %for.body72
  %63 = load i32, i32* %col, align 4
  %dec = add nsw i32 %63, -1
  store i32 %dec, i32* %col, align 4
  %64 = load i32, i32* %col, align 4
  %65 = load i32, i32* %k, align 4
  %sub84 = sub nsw i32 %65, 1
  %cmp85 = icmp eq i32 %64, %sub84
  br i1 %cmp85, label %if.then86, label %if.end91

if.then86:                                        ; preds = %if.else83
  %66 = load i32, i32* %ans, align 4
  %67 = load i32, i32* %i69, align 4
  %arrayidx87 = getelementptr inbounds [20010 x %struct.node_hay], [20010 x %struct.node_hay]* @"\01?a@?1??Blink@@YAHH@Z@4PAUnode_fence@@A", i32 0, i32 %67
  %id88 = getelementptr inbounds %struct.node_hay, %struct.node_hay* %arrayidx87, i32 0, i32 0
  %68 = load i32, i32* %id88, align 4
  %add89 = add nsw i32 %66, %68
  %69 = load i32, i32* %ss, align 4
  %sub90 = sub nsw i32 %add89, %69
  store i32 %sub90, i32* %ans, align 4
  br label %if.end91

if.end91:                                         ; preds = %if.then86, %if.else83
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.end82
  br label %for.inc93

for.inc93:                                        ; preds = %if.end92
  %70 = load i32, i32* %i69, align 4
  %inc94 = add nsw i32 %70, 1
  store i32 %inc94, i32* %i69, align 4
  br label %for.cond70

for.end95:                                        ; preds = %for.cond70
  %71 = load i32, i32* %ans, align 4
  ret i32 %71
}

; Function Attrs: noinline nounwind
define i32 @"\01?match@@YAHHH@Z"(i32 %pos, i32 %dicv) #0 {
entry:
  %retval = alloca i32, align 4
  %dicv.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %dicv, i32* %dicv.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %dicv.addr, align 4
  %arrayidx = getelementptr inbounds [510 x i32], [510 x i32]* @"\01?diclen@@3PAHA", i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  %cmp = icmp sle i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %pos.addr, align 4
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, %4
  %arrayidx1 = getelementptr inbounds [310 x i8], [310 x i8]* @"\01?a@@3PADA", i32 0, i32 %add
  %5 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %5 to i32
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %dicv.addr, align 4
  %arrayidx2 = getelementptr inbounds [510 x [310 x i8]], [510 x [310 x i8]]* @"\01?dic@@3PAY0BDG@DA", i32 0, i32 %7
  %arrayidx3 = getelementptr inbounds [310 x i8], [310 x i8]* %arrayidx2, i32 0, i32 %6
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %8 to i32
  %cmp5 = icmp ne i32 %conv, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind
define i32 @"\01?good_feel@@YAHH@Z"(i32 %mn) #0 {
entry:
  %mn.addr = alloca i32, align 4
  %sb1 = alloca [1009 x i32], align 4
  %fi = alloca [20010 x i32], align 4
  %si = alloca [20010 x i32], align 4
  %q = alloca [20010 x i32], align 4
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %ans = alloca i32, align 4
  %head = alloca i32, align 4
  %i13 = alloca i32, align 4
  %b = alloca i32, align 4
  store i32 %mn, i32* %mn.addr, align 4
  %0 = bitcast [1009 x i32]* %sb1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([1009 x i32]* @"\01?sb1@?1??good_feel@@YAHH@Z@3PAHA" to i8*), i32 4036, i1 false)
  %1 = bitcast [20010 x i32]* %fi to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 80040, i1 false)
  %2 = bitcast [20010 x i32]* %si to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %2, i8 0, i32 80040, i1 false)
  %3 = bitcast [20010 x i32]* %q to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %3, i8 0, i32 80040, i1 false)
  store i32 100, i32* %n, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %arrayidx = getelementptr inbounds [1009 x i32], [1009 x i32]* %sb1, i32 0, i32 %sub
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [20010 x i32], [20010 x i32]* %fi, i32 0, i32 %8
  store i32 %7, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc10, %for.end
  %10 = load i32, i32* %i2, align 4
  %11 = load i32, i32* %n, align 4
  %cmp4 = icmp sle i32 %10, %11
  br i1 %cmp4, label %for.body5, label %for.end12

for.body5:                                        ; preds = %for.cond3
  %12 = load i32, i32* %i2, align 4
  %sub6 = sub nsw i32 %12, 1
  %arrayidx7 = getelementptr inbounds [20010 x i32], [20010 x i32]* %si, i32 0, i32 %sub6
  %13 = load i32, i32* %arrayidx7, align 4
  %14 = load i32, i32* %i2, align 4
  %arrayidx8 = getelementptr inbounds [20010 x i32], [20010 x i32]* %fi, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx8, align 4
  %add = add nsw i32 %13, %15
  %16 = load i32, i32* %i2, align 4
  %arrayidx9 = getelementptr inbounds [20010 x i32], [20010 x i32]* %si, i32 0, i32 %16
  store i32 %add, i32* %arrayidx9, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body5
  %17 = load i32, i32* %i2, align 4
  %inc11 = add nsw i32 %17, 1
  store i32 %inc11, i32* %i2, align 4
  br label %for.cond3

for.end12:                                        ; preds = %for.cond3
  %18 = load i32, i32* %mn.addr, align 4
  store i32 %18, i32* %ans, align 4
  store i32 0, i32* %head, align 4
  store i32 1, i32* %i13, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc33, %for.end12
  %19 = load i32, i32* %i13, align 4
  %20 = load i32, i32* %n, align 4
  %add15 = add nsw i32 %20, 1
  %cmp16 = icmp sle i32 %19, %add15
  br i1 %cmp16, label %for.body17, label %for.end35

for.body17:                                       ; preds = %for.cond14
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body17
  %21 = load i32, i32* %head, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %22 = load i32, i32* %head, align 4
  %arrayidx18 = getelementptr inbounds [20010 x i32], [20010 x i32]* %q, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx18, align 4
  %arrayidx19 = getelementptr inbounds [20010 x i32], [20010 x i32]* %fi, i32 0, i32 %23
  %24 = load i32, i32* %arrayidx19, align 4
  %25 = load i32, i32* %i13, align 4
  %arrayidx20 = getelementptr inbounds [20010 x i32], [20010 x i32]* %fi, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp sgt i32 %24, %26
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %27 = phi i1 [ false, %while.cond ], [ %cmp21, %land.rhs ]
  br i1 %27, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %28 = load i32, i32* %i13, align 4
  %sub22 = sub nsw i32 %28, 1
  %arrayidx23 = getelementptr inbounds [20010 x i32], [20010 x i32]* %si, i32 0, i32 %sub22
  %29 = load i32, i32* %arrayidx23, align 4
  %30 = load i32, i32* %head, align 4
  %sub24 = sub nsw i32 %30, 1
  %arrayidx25 = getelementptr inbounds [20010 x i32], [20010 x i32]* %q, i32 0, i32 %sub24
  %31 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds [20010 x i32], [20010 x i32]* %si, i32 0, i32 %31
  %32 = load i32, i32* %arrayidx26, align 4
  %sub27 = sub nsw i32 %29, %32
  %33 = load i32, i32* %head, align 4
  %arrayidx28 = getelementptr inbounds [20010 x i32], [20010 x i32]* %q, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx28, align 4
  %arrayidx29 = getelementptr inbounds [20010 x i32], [20010 x i32]* %fi, i32 0, i32 %34
  %35 = load i32, i32* %arrayidx29, align 4
  %mul = mul nsw i32 %sub27, %35
  store i32 %mul, i32* %b, align 4
  %36 = load i32, i32* %ans, align 4
  %37 = load i32, i32* %b, align 4
  %cmp30 = icmp slt i32 %36, %37
  br i1 %cmp30, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %38 = load i32, i32* %b, align 4
  store i32 %38, i32* %ans, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %39 = load i32, i32* %head, align 4
  %dec = add nsw i32 %39, -1
  store i32 %dec, i32* %head, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %40 = load i32, i32* %head, align 4
  %inc31 = add nsw i32 %40, 1
  store i32 %inc31, i32* %head, align 4
  %41 = load i32, i32* %i13, align 4
  %42 = load i32, i32* %head, align 4
  %arrayidx32 = getelementptr inbounds [20010 x i32], [20010 x i32]* %q, i32 0, i32 %42
  store i32 %41, i32* %arrayidx32, align 4
  br label %for.inc33

for.inc33:                                        ; preds = %while.end
  %43 = load i32, i32* %i13, align 4
  %inc34 = add nsw i32 %43, 1
  store i32 %inc34, i32* %i13, align 4
  br label %for.cond14

for.end35:                                        ; preds = %for.cond14
  %44 = load i32, i32* %ans, align 4
  ret i32 %44
}

; Function Attrs: noinline norecurse nounwind
define i32 @main(i32 %argc, i8** %argv) #2 {
entry:
  %retval = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %argc.addr = alloca i32, align 4
  %tea2 = alloca i32, align 4
  %ez = alloca [3 x [3 x i8]], align 1
  %i = alloca i32, align 4
  %tea1 = alloca i32, align 4
  %i14 = alloca i32, align 4
  %i25 = alloca i32, align 4
  %j = alloca i32, align 4
  %d = alloca i32, align 4
  %i67 = alloca i32, align 4
  %j72 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i32 0, i32* %tea2, align 4
  %0 = bitcast [3 x [3 x i8]]* %ez to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([3 x [3 x i8]], [3 x [3 x i8]]* @"\01?ez@?1??main@@9@3PAY02DA", i32 0, i32 0, i32 0), i32 9, i1 false)
  store i32 3, i32* @"\01?dicnum@@3HA", align 4
  %call = call i8* @strcpy(i8* getelementptr inbounds ([310 x i8], [310 x i8]* @"\01?a@@3PADA", i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"\01??_C@_05NAIFAAEC@asdsd?$AA@", i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* @"\01?dicnum@@3HA", align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds [3 x [3 x i8]], [3 x [3 x i8]]* %ez, i32 0, i32 %sub
  %arraydecay = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx, i32 0, i32 0
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [510 x [310 x i8]], [510 x [310 x i8]]* @"\01?dic@@3PAY0BDG@DA", i32 0, i32 %4
  %arraydecay2 = getelementptr inbounds [310 x i8], [310 x i8]* %arrayidx1, i32 0, i32 0
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* %arraydecay)
  %5 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [510 x [310 x i8]], [510 x [310 x i8]]* @"\01?dic@@3PAY0BDG@DA", i32 0, i32 %5
  %arraydecay5 = getelementptr inbounds [310 x i8], [310 x i8]* %arrayidx4, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5)
  %sub7 = sub i32 %call6, 1
  %6 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [510 x i32], [510 x i32]* @"\01?diclen@@3PAHA", i32 0, i32 %6
  store i32 %sub7, i32* %arrayidx8, align 4
  %7 = load i32, i32* %tea2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [510 x i32], [510 x i32]* @"\01?diclen@@3PAHA", i32 0, i32 %8
  %9 = load i32, i32* %arrayidx9, align 4
  %call10 = call i32 @"\01?kill_ant@@YAHH@Z"(i32 %9)
  %add = add nsw i32 %7, %call10
  store i32 %add, i32* %tea2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call11 = call i32 @strlen(i8* getelementptr inbounds ([310 x i8], [310 x i8]* @"\01?a@@3PADA", i32 0, i32 0))
  store i32 %call11, i32* @"\01?lena@@3HA", align 4
  %11 = load i32, i32* @"\01?lena@@3HA", align 4
  %call12 = call i32 @"\01?good_feel@@YAHH@Z"(i32 %11)
  %call13 = call i32 @"\01?Blink@@YAHH@Z"(i32 %call12)
  store i32 %call13, i32* %tea1, align 4
  store i32 0, i32* %i14, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.end
  %12 = load i32, i32* %i14, align 4
  %call16 = call i32 @"\01?mai_meng@@YAHXZ"()
  %cmp17 = icmp slt i32 %12, %call16
  br i1 %cmp17, label %for.body18, label %for.end24

for.body18:                                       ; preds = %for.cond15
  %13 = load i32, i32* %tea1, align 4
  %14 = load i32, i32* %i14, align 4
  %call19 = call i32 @"\01?tong_fan@@YAHH@Z"(i32 %14)
  %cmp20 = icmp sgt i32 %13, %call19
  br i1 %cmp20, label %if.then, label %if.end

if.then:                                          ; preds = %for.body18
  %15 = load i32, i32* %i14, align 4
  %call21 = call i32 @"\01?tong_fan@@YAHH@Z"(i32 %15)
  store i32 %call21, i32* %tea1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body18
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %16 = load i32, i32* %i14, align 4
  %inc23 = add nsw i32 %16, 1
  store i32 %inc23, i32* %i14, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %17 = load i32, i32* @"\01?lena@@3HA", align 4
  store i32 %17, i32* %i25, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc64, %for.end24
  %18 = load i32, i32* %i25, align 4
  %cmp27 = icmp sge i32 %18, 1
  br i1 %cmp27, label %for.body28, label %for.end66

for.body28:                                       ; preds = %for.cond26
  %19 = load i32, i32* %i25, align 4
  store i32 %19, i32* %j, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %for.body28
  %20 = load i32, i32* %j, align 4
  %cmp30 = icmp sge i32 %20, 1
  br i1 %cmp30, label %for.body31, label %for.end63

for.body31:                                       ; preds = %for.cond29
  %21 = load i32, i32* %i25, align 4
  %22 = load i32, i32* %j, align 4
  %add32 = add nsw i32 %22, 1
  %arrayidx33 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @"\01?k@@3PAY0BDG@HA", i32 0, i32 %add32
  %arrayidx34 = getelementptr inbounds [310 x i32], [310 x i32]* %arrayidx33, i32 0, i32 %21
  %23 = load i32, i32* %arrayidx34, align 4
  %tobool = icmp ne i32 %23, 0
  br i1 %tobool, label %if.then35, label %if.end38

if.then35:                                        ; preds = %for.body31
  %24 = load i32, i32* %i25, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @"\01?k@@3PAY0BDG@HA", i32 0, i32 %25
  %arrayidx37 = getelementptr inbounds [310 x i32], [310 x i32]* %arrayidx36, i32 0, i32 %24
  store i32 1, i32* %arrayidx37, align 4
  br label %for.inc62

if.end38:                                         ; preds = %for.body31
  store i32 1, i32* %d, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc59, %if.end38
  %26 = load i32, i32* %d, align 4
  %27 = load i32, i32* @"\01?dicnum@@3HA", align 4
  %cmp40 = icmp sle i32 %26, %27
  br i1 %cmp40, label %for.body41, label %for.end61

for.body41:                                       ; preds = %for.cond39
  %28 = load i32, i32* %j, align 4
  %sub42 = sub nsw i32 %28, 1
  %arrayidx43 = getelementptr inbounds [310 x i8], [310 x i8]* @"\01?a@@3PADA", i32 0, i32 %sub42
  %29 = load i8, i8* %arrayidx43, align 1
  %conv = sext i8 %29 to i32
  %30 = load i32, i32* %d, align 4
  %arrayidx44 = getelementptr inbounds [510 x [310 x i8]], [510 x [310 x i8]]* @"\01?dic@@3PAY0BDG@DA", i32 0, i32 %30
  %arrayidx45 = getelementptr inbounds [310 x i8], [310 x i8]* %arrayidx44, i32 0, i32 0
  %31 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %31 to i32
  %cmp47 = icmp eq i32 %conv, %conv46
  br i1 %cmp47, label %land.lhs.true, label %if.end58

land.lhs.true:                                    ; preds = %for.body41
  %32 = load i32, i32* %i25, align 4
  %33 = load i32, i32* %j, align 4
  %sub48 = sub nsw i32 %32, %33
  %34 = load i32, i32* %d, align 4
  %arrayidx49 = getelementptr inbounds [510 x i32], [510 x i32]* @"\01?diclen@@3PAHA", i32 0, i32 %34
  %35 = load i32, i32* %arrayidx49, align 4
  %cmp50 = icmp sge i32 %sub48, %35
  br i1 %cmp50, label %land.lhs.true51, label %if.end58

land.lhs.true51:                                  ; preds = %land.lhs.true
  %36 = load i32, i32* %d, align 4
  %37 = load i32, i32* %j, align 4
  %sub52 = sub nsw i32 %37, 1
  %call53 = call i32 @"\01?match@@YAHHH@Z"(i32 %sub52, i32 %36)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.then55, label %if.end58

if.then55:                                        ; preds = %land.lhs.true51
  %38 = load i32, i32* %i25, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx56 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @"\01?k@@3PAY0BDG@HA", i32 0, i32 %39
  %arrayidx57 = getelementptr inbounds [310 x i32], [310 x i32]* %arrayidx56, i32 0, i32 %38
  store i32 1, i32* %arrayidx57, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %land.lhs.true51, %land.lhs.true, %for.body41
  br label %for.inc59

for.inc59:                                        ; preds = %if.end58
  %40 = load i32, i32* %d, align 4
  %inc60 = add nsw i32 %40, 1
  store i32 %inc60, i32* %d, align 4
  br label %for.cond39

for.end61:                                        ; preds = %for.cond39
  br label %for.inc62

for.inc62:                                        ; preds = %for.end61, %if.then35
  %41 = load i32, i32* %j, align 4
  %dec = add nsw i32 %41, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond29

for.end63:                                        ; preds = %for.cond29
  br label %for.inc64

for.inc64:                                        ; preds = %for.end63
  %42 = load i32, i32* %i25, align 4
  %dec65 = add nsw i32 %42, -1
  store i32 %dec65, i32* %i25, align 4
  br label %for.cond26

for.end66:                                        ; preds = %for.cond26
  store i32 0, i32* getelementptr inbounds ([310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 0), align 4
  store i32 1, i32* %i67, align 4
  br label %for.cond68

for.cond68:                                       ; preds = %for.inc97, %for.end66
  %43 = load i32, i32* %i67, align 4
  %44 = load i32, i32* @"\01?lena@@3HA", align 4
  %add69 = add nsw i32 %44, 1
  %cmp70 = icmp sle i32 %43, %add69
  br i1 %cmp70, label %for.body71, label %for.end99

for.body71:                                       ; preds = %for.cond68
  store i32 0, i32* %j72, align 4
  br label %for.cond73

for.cond73:                                       ; preds = %for.inc94, %for.body71
  %45 = load i32, i32* %j72, align 4
  %46 = load i32, i32* %i67, align 4
  %cmp74 = icmp sle i32 %45, %46
  br i1 %cmp74, label %for.body75, label %for.end96

for.body75:                                       ; preds = %for.cond73
  %47 = load i32, i32* %i67, align 4
  %arrayidx76 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %47
  %48 = load i32, i32* %arrayidx76, align 4
  %49 = load i32, i32* %j72, align 4
  %arrayidx77 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %49
  %50 = load i32, i32* %arrayidx77, align 4
  %51 = load i32, i32* %i67, align 4
  %52 = load i32, i32* %j72, align 4
  %add78 = add nsw i32 %52, 1
  %arrayidx79 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @"\01?k@@3PAY0BDG@HA", i32 0, i32 %add78
  %arrayidx80 = getelementptr inbounds [310 x i32], [310 x i32]* %arrayidx79, i32 0, i32 %51
  %53 = load i32, i32* %arrayidx80, align 4
  %add81 = add nsw i32 %50, %53
  %cmp82 = icmp slt i32 %48, %add81
  br i1 %cmp82, label %if.then83, label %if.end93

if.then83:                                        ; preds = %for.body75
  %54 = load i32, i32* %j72, align 4
  %arrayidx84 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %54
  %55 = load i32, i32* %arrayidx84, align 4
  %56 = load i32, i32* %i67, align 4
  %57 = load i32, i32* %j72, align 4
  %add85 = add nsw i32 %57, 1
  %arrayidx86 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @"\01?k@@3PAY0BDG@HA", i32 0, i32 %add85
  %arrayidx87 = getelementptr inbounds [310 x i32], [310 x i32]* %arrayidx86, i32 0, i32 %56
  %58 = load i32, i32* %arrayidx87, align 4
  %add88 = add nsw i32 %55, %58
  %59 = load i32, i32* %i67, align 4
  %arrayidx89 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %59
  store i32 %add88, i32* %arrayidx89, align 4
  %60 = load i32, i32* %i67, align 4
  %arrayidx90 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %60
  %61 = load i32, i32* %arrayidx90, align 4
  %call91 = call i32 @"\01?cow_balei@@YAHH@Z"(i32 %61)
  %62 = load i32, i32* %i67, align 4
  %arrayidx92 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %62
  store i32 %call91, i32* %arrayidx92, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then83, %for.body75
  br label %for.inc94

for.inc94:                                        ; preds = %if.end93
  %63 = load i32, i32* %j72, align 4
  %inc95 = add nsw i32 %63, 1
  store i32 %inc95, i32* %j72, align 4
  br label %for.cond73

for.end96:                                        ; preds = %for.cond73
  br label %for.inc97

for.inc97:                                        ; preds = %for.end96
  %64 = load i32, i32* %i67, align 4
  %inc98 = add nsw i32 %64, 1
  store i32 %inc98, i32* %i67, align 4
  br label %for.cond68

for.end99:                                        ; preds = %for.cond68
  %65 = load i32, i32* @"\01?lena@@3HA", align 4
  %add100 = add nsw i32 %65, 1
  %arrayidx101 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %add100
  %66 = load i32, i32* %arrayidx101, align 4
  %67 = load i32, i32* @"\01?lena@@3HA", align 4
  %add102 = add nsw i32 %67, 1
  %arrayidx103 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %add102
  %68 = load i32, i32* %arrayidx103, align 4
  %call104 = call i32 @"\01?light_bomb@@YAHH@Z"(i32 %68)
  %cmp105 = icmp slt i32 %66, %call104
  br i1 %cmp105, label %if.then106, label %if.end118

if.then106:                                       ; preds = %for.end99
  %69 = load i32, i32* @"\01?lena@@3HA", align 4
  %add107 = add nsw i32 %69, 1
  %arrayidx108 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %add107
  %70 = load i32, i32* %arrayidx108, align 4
  %call109 = call i32 @"\01?HYZ_card@@YAHH@Z"(i32 %70)
  %cmp110 = icmp sgt i32 %call109, 0
  br i1 %cmp110, label %if.then111, label %if.end117

if.then111:                                       ; preds = %if.then106
  %71 = load i32, i32* @"\01?lena@@3HA", align 4
  %add112 = add nsw i32 %71, 1
  %arrayidx113 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %add112
  %72 = load i32, i32* %arrayidx113, align 4
  %call114 = call i32 @"\01?light_bomb@@YAHH@Z"(i32 %72)
  %73 = load i32, i32* @"\01?lena@@3HA", align 4
  %add115 = add nsw i32 %73, 1
  %arrayidx116 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %add115
  store i32 %call114, i32* %arrayidx116, align 4
  br label %if.end117

if.end117:                                        ; preds = %if.then111, %if.then106
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %for.end99
  %74 = load i32, i32* %tea1, align 4
  %75 = load i32, i32* %tea2, align 4
  %cmp119 = icmp sgt i32 %74, %75
  br i1 %cmp119, label %if.then120, label %if.end121

if.then120:                                       ; preds = %if.end118
  %76 = load i32, i32* %tea2, align 4
  store i32 %76, i32* %tea1, align 4
  br label %if.end121

if.end121:                                        ; preds = %if.then120, %if.end118
  %77 = load i32, i32* %tea1, align 4
  %78 = load i32, i32* @"\01?lena@@3HA", align 4
  %add122 = add nsw i32 %78, 1
  %arrayidx123 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %add122
  %79 = load i32, i32* %arrayidx123, align 4
  %add124 = add nsw i32 %77, %79
  %80 = load i32, i32* @"\01?lena@@3HA", align 4
  %add125 = add nsw i32 %80, 1
  %arrayidx126 = getelementptr inbounds [310 x i32], [310 x i32]* @"\01?f@@3PAHA", i32 0, i32 %add125
  store i32 %add124, i32* %arrayidx126, align 4
  ret i32 0
}

declare i32 @strlen(i8*) #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #3

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #4

attributes #0 = { noinline nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline norecurse nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind willreturn writeonly }
attributes #4 = { argmemonly nofree nounwind willreturn }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1}
!llvm.linker.options = !{!3, !4}

!0 = !{!"clang version 3.8.0 (branches/release_38)"}
!1 = !{i32 6, !"Linker Options", !2}
!2 = !{!3, !4}
!3 = !{!"/DEFAULTLIB:libcmt.lib"}
!4 = !{!"/DEFAULTLIB:oldnames.lib"}
